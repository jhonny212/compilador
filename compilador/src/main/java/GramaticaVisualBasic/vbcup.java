
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaVisualBasic;

import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import Lenguajes.MetodosVisual;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class vbcup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public vbcup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public vbcup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public vbcup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\002\005\000\002\002" +
    "\007\000\002\004\012\000\002\004\010\000\002\007\005" +
    "\000\002\007\003\000\002\007\004\000\002\010\003\000" +
    "\002\010\003\000\002\012\013\000\002\012\012\000\002" +
    "\011\015\000\002\011\014\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\060\010\000\002\060\006" +
    "\000\002\060\004\000\002\036\003\000\002\036\005\000" +
    "\002\034\005\000\002\034\003\000\002\033\003\000\002" +
    "\033\004\000\002\031\005\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\005\006\000\002\051\005\000\002\051" +
    "\007\000\002\051\003\000\002\051\005\000\002\051\004" +
    "\000\002\046\005\000\002\046\005\000\002\046\003\000" +
    "\002\047\005\000\002\047\005\000\002\047\003\000\002" +
    "\047\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\005\000\002\050\006" +
    "\000\002\042\005\000\002\042\005\000\002\042\003\000" +
    "\002\044\005\000\002\044\005\000\002\044\003\000\002" +
    "\044\005\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\043\006\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\015\012\000\002\015\011\000\002\052\005\000\002" +
    "\052\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\004\000\002\024\007\000\002\024\006\000\002\021\002" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\022\002\000\002" +
    "\022\004\000\002\022\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\025\007\000\002\025\006\000\002\026\002\000\002\026" +
    "\004\000\002\027\007\000\002\030\007\000\002\030\005" +
    "\000\002\030\007\000\002\037\011\000\002\037\010\000" +
    "\002\041\004\000\002\041\003\000\002\040\006\000\002" +
    "\040\006\000\002\045\002\000\002\045\005\000\002\045" +
    "\005\000\002\053\014\000\002\053\016\000\002\055\006" +
    "\000\002\055\005\000\002\055\006\000\002\055\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\003\000\002" +
    "\056\003\000\002\056\004\000\002\056\004\000\002\056" +
    "\004\000\002\057\006\000\002\057\006\000\002\057\006" +
    "\000\002\057\005\000\002\057\005\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\063\004\001\002\000\004\045\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\003\010\020\015\064\016\001\002\000\004\045" +
    "\u012f\001\002\000\004\045\ufff9\001\002\000\004\045\u012c" +
    "\001\002\000\004\045\ufffb\001\002\000\004\045\ufff8\001" +
    "\002\000\006\021\020\022\017\001\002\000\004\002\000" +
    "\001\002\000\004\062\u0121\001\002\000\004\062\021\001" +
    "\002\000\004\057\022\001\002\000\010\003\024\024\023" +
    "\060\026\001\002\000\004\062\u011e\001\002\000\010\035" +
    "\033\043\032\044\031\001\002\000\006\034\u0112\060\u0113" +
    "\001\002\000\004\032\027\001\002\000\010\035\033\043" +
    "\032\044\031\001\002\000\004\045\035\001\002\000\012" +
    "\033\ufff2\034\ufff2\045\ufff2\060\ufff2\001\002\000\012\033" +
    "\ufff1\034\ufff1\045\ufff1\060\ufff1\001\002\000\012\033\ufff3" +
    "\034\ufff3\045\ufff3\060\ufff3\001\002\000\004\007\u0110\001" +
    "\002\000\050\003\055\005\061\006\047\007\uffe9\010\uffe9" +
    "\011\uffe9\012\041\015\054\017\uffe9\025\063\026\065\027" +
    "\066\030\036\031\064\036\uffe9\037\062\041\043\042\046" +
    "\062\052\001\002\000\004\057\u010c\001\002\000\004\045" +
    "\u010a\001\002\000\004\045\uffdb\001\002\000\004\014\327" +
    "\001\002\000\004\045\uffdf\001\002\000\016\046\221\057" +
    "\222\062\213\065\211\066\215\067\223\001\002\000\004" +
    "\045\uffdc\001\002\000\004\045\uffde\001\002\000\016\053" +
    "\072\057\102\062\077\065\073\066\100\067\103\001\002" +
    "\000\016\046\221\057\222\062\213\065\211\066\215\067" +
    "\223\001\002\000\004\045\uffdd\001\002\000\014\007\uffe8" +
    "\010\uffe8\011\uffe8\017\uffe8\036\uffe8\001\002\000\004\033" +
    "\272\001\002\000\004\045\uffe0\001\002\000\004\045\035" +
    "\001\002\000\030\017\202\025\063\026\065\027\066\045" +
    "\200\053\072\057\102\062\077\065\073\066\100\067\103" +
    "\001\002\000\004\045\uffe2\001\002\000\004\045\uffe1\001" +
    "\002\000\004\045\uffe3\001\002\000\006\003\165\062\164" +
    "\001\002\000\004\062\147\001\002\000\004\057\143\001" +
    "\002\000\004\057\137\001\002\000\004\057\133\001\002" +
    "\000\004\057\067\001\002\000\024\003\101\053\072\057" +
    "\102\060\071\062\077\065\073\066\100\067\103\070\070" +
    "\001\002\000\006\060\uff81\061\uff81\001\002\000\004\045" +
    "\uff77\001\002\000\004\057\130\001\002\000\044\004\uffca" +
    "\032\uffca\033\uffca\034\uffca\040\uffca\045\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\060\uffca\061\uffca\071\uffca\001\002\000\044\004\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\040\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\060" +
    "\uffcf\061\uffcf\071\uffcf\001\002\000\012\052\115\053\114" +
    "\060\uff80\061\uff80\001\002\000\006\060\124\061\125\001" +
    "\002\000\044\004\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\071\uffcd\001\002" +
    "\000\044\004\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc\045" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\060\uffcc\061\uffcc\071\uffcc\001\002\000" +
    "\022\053\072\057\102\061\122\062\077\065\073\066\100" +
    "\067\103\070\121\001\002\000\016\053\072\057\102\062" +
    "\077\065\073\066\100\067\103\001\002\000\044\004\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\040\uffcb\045\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\060\uffcb\061\uffcb\071\uffcb\001\002\000\044\004\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\040\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\106\055\107\056\105\060" +
    "\uffd2\061\uffd2\071\uffd2\001\002\000\016\053\072\057\102" +
    "\062\077\065\073\066\100\067\103\001\002\000\016\053" +
    "\072\057\102\062\077\065\073\066\100\067\103\001\002" +
    "\000\016\053\072\057\102\062\077\065\073\066\100\067" +
    "\103\001\002\000\044\004\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\040\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\061\uffd0\071\uffd0" +
    "\001\002\000\044\004\uffd1\032\uffd1\033\uffd1\034\uffd1\040" +
    "\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\071\uffd1\001" +
    "\002\000\044\004\uffce\032\uffce\033\uffce\034\uffce\040\uffce" +
    "\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\060\uffce\061\uffce\071\uffce\001\002" +
    "\000\010\052\115\053\114\060\116\001\002\000\016\053" +
    "\072\057\102\062\077\065\073\066\100\067\103\001\002" +
    "\000\016\053\072\057\102\062\077\065\073\066\100\067" +
    "\103\001\002\000\044\004\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\040\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\071\uffc9" +
    "\001\002\000\044\004\uffd4\032\uffd4\033\uffd4\034\uffd4\040" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\106\055\107\056\105\060\uffd4\061\uffd4\071\uffd4\001" +
    "\002\000\044\004\uffd3\032\uffd3\033\uffd3\034\uffd3\040\uffd3" +
    "\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\106\055\107\056\105\060\uffd3\061\uffd3\071\uffd3\001\002" +
    "\000\006\060\uff7d\061\uff7d\001\002\000\006\060\uff7e\061" +
    "\uff7e\001\002\000\012\052\115\053\114\060\uff7f\061\uff7f" +
    "\001\002\000\004\045\uff7a\001\002\000\020\053\072\057" +
    "\102\062\077\065\073\066\100\067\103\070\126\001\002" +
    "\000\006\060\uff83\061\uff83\001\002\000\012\052\115\053" +
    "\114\060\uff82\061\uff82\001\002\000\016\053\072\057\102" +
    "\062\077\065\073\066\100\067\103\001\002\000\010\052" +
    "\115\053\114\060\132\001\002\000\044\004\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\040\uffc8\045\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\060\uffc8" +
    "\061\uffc8\071\uffc8\001\002\000\024\003\101\053\072\057" +
    "\102\060\134\062\077\065\073\066\100\067\103\070\070" +
    "\001\002\000\004\045\uff78\001\002\000\006\060\136\061" +
    "\125\001\002\000\004\045\uff7b\001\002\000\024\003\101" +
    "\053\072\057\102\060\140\062\077\065\073\066\100\067" +
    "\103\070\070\001\002\000\004\045\uff84\001\002\000\006" +
    "\060\142\061\125\001\002\000\004\045\uff85\001\002\000" +
    "\024\003\101\053\072\057\102\060\144\062\077\065\073" +
    "\066\100\067\103\070\070\001\002\000\004\045\uff79\001" +
    "\002\000\006\060\146\061\125\001\002\000\004\045\uff7c" +
    "\001\002\000\004\032\150\001\002\000\010\035\033\043" +
    "\032\044\031\001\002\000\004\033\152\001\002\000\016" +
    "\053\072\057\102\062\077\065\073\066\100\067\103\001" +
    "\002\000\010\052\115\053\114\071\154\001\002\000\016" +
    "\053\072\057\102\062\077\065\073\066\100\067\103\001" +
    "\002\000\012\040\156\045\035\052\115\053\114\001\002" +
    "\000\016\053\072\057\102\062\077\065\073\066\100\067" +
    "\103\001\002\000\004\036\160\001\002\000\004\045\uff89" +
    "\001\002\000\010\045\035\052\115\053\114\001\002\000" +
    "\004\036\163\001\002\000\004\045\uff88\001\002\000\010" +
    "\032\uffd7\033\176\034\uffd7\001\002\000\016\053\072\057" +
    "\102\062\077\065\073\066\100\067\103\001\002\000\006" +
    "\032\170\034\167\001\002\000\004\062\172\001\002\000" +
    "\010\035\033\043\032\044\031\001\002\000\004\045\uffda" +
    "\001\002\000\010\032\uffd9\033\173\034\uffd9\001\002\000" +
    "\016\053\072\057\102\062\077\065\073\066\100\067\103" +
    "\001\002\000\012\032\uffd8\034\uffd8\052\115\053\114\001" +
    "\002\000\012\032\uffd5\034\uffd5\052\115\053\114\001\002" +
    "\000\016\053\072\057\102\062\077\065\073\066\100\067" +
    "\103\001\002\000\012\032\uffd6\034\uffd6\052\115\053\114" +
    "\001\002\000\014\007\uffe6\010\uffe6\011\uffe6\017\uffe6\036" +
    "\uffe6\001\002\000\004\045\uffb9\001\002\000\004\041\204" +
    "\001\002\000\010\045\uffb8\052\115\053\114\001\002\000" +
    "\004\045\uff94\001\002\000\004\017\206\001\002\000\006" +
    "\016\210\041\207\001\002\000\016\046\221\057\222\062" +
    "\213\065\211\066\215\067\223\001\002\000\016\046\221" +
    "\057\222\062\213\065\211\066\215\067\223\001\002\000" +
    "\032\004\uff9b\033\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\001" +
    "\002\000\032\004\uffa0\033\uffa0\045\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060" +
    "\uffa0\001\002\000\032\004\uff9e\033\uff9e\045\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\060\uff9e\001\002\000\014\004\uffb2\045\uffb2\047\uffb2" +
    "\050\uffb2\060\uffb2\001\002\000\032\004\uff9d\033\uff9d\045" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\055\uff9d\056\uff9d\060\uff9d\001\002\000\024\004\uffa8\033" +
    "\242\045\uffa8\047\uffa8\050\uffa8\051\241\052\265\053\264" +
    "\060\uffa8\001\002\000\032\004\uffa3\033\uffa3\045\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\257\055\260" +
    "\056\256\060\uffa3\001\002\000\014\004\uffb4\045\uffb4\047" +
    "\uffb4\050\227\060\uffb4\001\002\000\004\057\253\001\002" +
    "\000\016\046\221\057\222\062\213\065\211\066\215\067" +
    "\223\001\002\000\032\004\uff9c\033\uff9c\045\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\060\uff9c\001\002\000\006\045\uff93\047\225\001\002" +
    "\000\016\046\221\057\222\062\213\065\211\066\215\067" +
    "\223\001\002\000\014\004\uffb5\045\uffb5\047\uffb5\050\227" +
    "\060\uffb5\001\002\000\016\046\221\057\222\062\213\065" +
    "\211\066\215\067\223\001\002\000\014\004\uffb3\045\uffb3" +
    "\047\uffb3\050\uffb3\060\uffb3\001\002\000\006\047\225\060" +
    "\232\001\002\000\032\004\uffae\033\uffae\045\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\235\053\233\054\236\055\237\056" +
    "\234\060\uffae\001\002\000\016\053\072\057\102\062\077" +
    "\065\073\066\100\067\103\001\002\000\016\053\072\057" +
    "\102\062\077\065\073\066\100\067\103\001\002\000\016" +
    "\053\072\057\102\062\077\065\073\066\100\067\103\001" +
    "\002\000\016\053\072\057\102\062\077\065\073\066\100" +
    "\067\103\001\002\000\016\053\072\057\102\062\077\065" +
    "\073\066\100\067\103\001\002\000\020\004\uffa8\033\242" +
    "\045\uffa8\047\uffa8\050\uffa8\051\241\060\uffa8\001\002\000" +
    "\016\053\072\057\102\062\077\065\073\066\100\067\103" +
    "\001\002\000\016\053\072\057\102\062\077\065\073\066" +
    "\100\067\103\001\002\000\014\004\uffb0\045\uffb0\047\uffb0" +
    "\050\uffb0\060\uffb0\001\002\000\020\004\uffa6\045\uffa6\047" +
    "\uffa6\050\uffa6\052\115\053\114\060\uffa6\001\002\000\020" +
    "\004\uffa7\045\uffa7\047\uffa7\050\uffa7\052\115\053\114\060" +
    "\uffa7\001\002\000\024\004\uffaa\033\uffaa\045\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\115\053\114\060\uffaa\001\002\000" +
    "\024\004\uffab\033\uffab\045\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\115\053\114\060\uffab\001\002\000\024\004\uffad\033" +
    "\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052\115\053\114" +
    "\060\uffad\001\002\000\024\004\uffa9\033\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\115\053\114\060\uffa9\001\002" +
    "\000\024\004\uffac\033\uffac\045\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\115\053\114\060\uffac\001\002\000\016\046\221" +
    "\057\222\062\213\065\211\066\215\067\223\001\002\000" +
    "\006\047\225\060\255\001\002\000\014\004\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\060\uffaf\001\002\000\016\053\072\057" +
    "\102\062\077\065\073\066\100\067\103\001\002\000\016" +
    "\053\072\057\102\062\077\065\073\066\100\067\103\001" +
    "\002\000\016\053\072\057\102\062\077\065\073\066\100" +
    "\067\103\001\002\000\032\004\uffa1\033\uffa1\045\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\060\uffa1\001\002\000\032\004\uffa2\033\uffa2\045" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\060\uffa2\001\002\000\032\004\uff9f\033" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\060\uff9f\001\002\000\016\053" +
    "\072\057\102\062\077\065\073\066\100\067\103\001\002" +
    "\000\016\053\072\057\102\062\077\065\073\066\100\067" +
    "\103\001\002\000\014\004\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\060\uffb1\001\002\000\032\004\uffa5\033\uffa5\045\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\106\055\107" +
    "\056\105\060\uffa5\001\002\000\032\004\uffa4\033\uffa4\045" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\106" +
    "\055\107\056\105\060\uffa4\001\002\000\006\045\uff95\047" +
    "\225\001\002\000\024\025\063\026\065\027\066\053\072" +
    "\057\102\062\077\065\073\066\100\067\103\001\002\000" +
    "\004\045\uffba\001\002\000\010\045\uffbb\052\115\053\114" +
    "\001\002\000\006\004\276\047\225\001\002\000\004\045" +
    "\035\001\002\000\010\007\uff98\010\300\011\303\001\002" +
    "\000\004\045\035\001\002\000\004\007\316\001\002\000" +
    "\010\007\uff98\010\300\011\310\001\002\000\016\046\221" +
    "\057\222\062\213\065\211\066\215\067\223\001\002\000" +
    "\006\004\305\047\225\001\002\000\004\045\035\001\002" +
    "\000\010\007\uff99\010\uff99\011\uff99\001\002\000\004\007" +
    "\314\001\002\000\016\046\221\057\222\062\213\065\211" +
    "\066\215\067\223\001\002\000\006\004\312\047\225\001" +
    "\002\000\004\045\035\001\002\000\010\007\uff9a\010\uff9a" +
    "\011\uff9a\001\002\000\004\006\315\001\002\000\004\045" +
    "\uffb7\001\002\000\004\006\317\001\002\000\004\045\uffb6" +
    "\001\002\000\004\007\uff97\001\002\000\010\045\322\052" +
    "\115\053\114\001\002\000\014\007\uffe4\010\uffe4\011\uffe4" +
    "\017\uffe4\036\uffe4\001\002\000\006\045\035\047\225\001" +
    "\002\000\004\007\325\001\002\000\004\041\326\001\002" +
    "\000\004\045\uff96\001\002\000\004\062\330\001\002\000" +
    "\004\045\331\001\002\000\006\007\334\014\335\001\002" +
    "\000\006\007\u0108\014\335\001\002\000\006\007\uff8f\014" +
    "\uff8f\001\002\000\004\012\u0106\001\002\000\016\010\342" +
    "\053\336\057\345\065\337\066\343\067\346\001\002\000" +
    "\004\057\u0103\001\002\000\020\045\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\060\uffbe\001\002\000\020\045" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2" +
    "\001\002\000\020\045\uffc5\052\uffc5\053\uffc5\054\355\055" +
    "\356\056\354\060\uffc5\001\002\000\004\045\364\001\002" +
    "\000\020\045\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\060\uffc0\001\002\000\010\045\364\052\351\053\350" +
    "\001\002\000\014\053\336\057\345\065\337\066\343\067" +
    "\346\001\002\000\020\045\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\060\uffbf\001\002\000\010\052\351\053" +
    "\350\060\352\001\002\000\014\053\336\057\345\065\337" +
    "\066\343\067\346\001\002\000\014\053\336\057\345\065" +
    "\337\066\343\067\346\001\002\000\020\045\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\001\002\000" +
    "\020\045\uffc7\052\uffc7\053\uffc7\054\355\055\356\056\354" +
    "\060\uffc7\001\002\000\014\053\336\057\345\065\337\066" +
    "\343\067\346\001\002\000\014\053\336\057\345\065\337" +
    "\066\343\067\346\001\002\000\014\053\336\057\345\065" +
    "\337\066\343\067\346\001\002\000\020\045\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\001\002\000" +
    "\020\045\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\060\uffc4\001\002\000\020\045\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\060\uffc1\001\002\000\020\045\uffc6" +
    "\052\uffc6\053\uffc6\054\355\055\356\056\354\060\uffc6\001" +
    "\002\000\012\007\uff8c\013\374\014\uff8c\042\373\001\002" +
    "\000\044\003\367\005\061\006\047\007\uffed\012\041\013" +
    "\uffed\014\uffed\015\054\025\063\026\065\027\066\030\036" +
    "\031\064\037\062\041\043\042\uffed\062\052\001\002\000" +
    "\004\045\uffea\001\002\000\004\045\370\001\002\000\026" +
    "\017\202\025\063\026\065\027\066\053\072\057\102\062" +
    "\077\065\073\066\100\067\103\001\002\000\044\003\367" +
    "\005\061\006\047\007\uffec\012\041\013\uffec\014\uffec\015" +
    "\054\025\063\026\065\027\066\030\036\031\064\037\062" +
    "\041\043\042\uffec\062\052\001\002\000\004\045\uffeb\001" +
    "\002\000\006\007\uff8e\014\uff8e\001\002\000\016\053\072" +
    "\057\102\062\077\065\073\066\100\067\103\001\002\000" +
    "\004\012\375\001\002\000\004\045\376\001\002\000\006" +
    "\007\uff8a\014\uff8a\001\002\000\010\045\u0100\052\115\053" +
    "\114\001\002\000\006\007\uff8b\014\uff8b\001\002\000\012" +
    "\007\uff8c\013\374\014\uff8c\042\373\001\002\000\006\007" +
    "\uff8d\014\uff8d\001\002\000\014\053\336\057\345\065\337" +
    "\066\343\067\346\001\002\000\010\052\351\053\350\060" +
    "\u0105\001\002\000\020\045\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\060\uffbc\001\002\000\004\045\uff91\001" +
    "\002\000\006\007\uff90\014\uff90\001\002\000\004\012\u0109" +
    "\001\002\000\004\045\uff92\001\002\000\050\003\055\005" +
    "\061\006\047\007\uffe5\010\uffe5\011\uffe5\012\041\015\054" +
    "\017\uffe5\025\063\026\065\027\066\030\036\031\064\036" +
    "\uffe5\037\062\041\043\042\046\062\052\001\002\000\014" +
    "\007\uffe7\010\uffe7\011\uffe7\017\uffe7\036\uffe7\001\002\000" +
    "\024\003\101\053\072\057\102\060\u010d\062\077\065\073" +
    "\066\100\067\103\070\070\001\002\000\004\045\uff86\001" +
    "\002\000\006\060\u010f\061\125\001\002\000\004\045\uff87" +
    "\001\002\000\004\021\u0111\001\002\000\004\045\ufff4\001" +
    "\002\000\004\024\u0119\001\002\000\004\032\u0114\001\002" +
    "\000\010\035\033\043\032\044\031\001\002\000\004\045" +
    "\035\001\002\000\004\007\u0117\001\002\000\004\021\u0118" +
    "\001\002\000\004\045\ufff5\001\002\000\004\062\u011a\001" +
    "\002\000\004\032\u011b\001\002\000\010\035\033\043\032" +
    "\044\031\001\002\000\006\034\ufff0\060\ufff0\001\002\000" +
    "\006\034\uffee\060\uffee\001\002\000\004\032\u011f\001\002" +
    "\000\010\035\033\043\032\044\031\001\002\000\006\034" +
    "\uffef\060\uffef\001\002\000\004\057\u0122\001\002\000\010" +
    "\003\024\024\023\060\u0124\001\002\000\006\034\u0112\060" +
    "\u0128\001\002\000\004\045\364\001\002\000\004\007\u0126" +
    "\001\002\000\004\022\u0127\001\002\000\004\045\ufff6\001" +
    "\002\000\004\045\364\001\002\000\004\007\u012a\001\002" +
    "\000\004\022\u012b\001\002\000\004\045\ufff7\001\002\000" +
    "\006\020\015\064\u012e\001\002\000\004\045\ufffc\001\002" +
    "\000\004\002\uffff\001\002\000\004\045\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\011\010\012" +
    "\011\013\012\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\024\001\001" +
    "\000\002\001\001\000\004\013\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\027\001\001\000\004" +
    "\033\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\057\006\055" +
    "\014\036\015\056\027\052\030\041\031\050\037\044\053" +
    "\047\055\037\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\215\017\216\020\211\023\217\024\213" +
    "\052\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\320\047\103\050\073\001\001\000\016\016\215" +
    "\017\216\020\211\023\217\024\213\052\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\204\001\001\000\012\046\202\047" +
    "\103\050\073\057\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\074\047\103\050" +
    "\073\056\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\122\047\103\050\073\001\001\000" +
    "\010\046\112\047\103\050\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\111\001\001\000\004\050" +
    "\110\001\001\000\004\050\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\117\050\073\001\001\000\006\047\116\050\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\126\047\103\050\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\130" +
    "\047\103\050\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\074\047\103\050\073\056\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\074\047\103\050\073\056\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\046" +
    "\074\047\103\050\073\056\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\150\001\001\000\002\001\001\000\010\046\152" +
    "\047\103\050\073\001\001\000\002\001\001\000\010\046" +
    "\154\047\103\050\073\001\001\000\004\033\156\001\001" +
    "\000\010\046\160\047\103\050\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\174\047\103\050\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\173\047\103\050\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\176\047" +
    "\103\050\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\215\017\216\020\211\023\217\024\213\052\270\001" +
    "\001\000\016\016\215\017\216\020\211\023\217\024\213" +
    "\052\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\215\017\216\020\211\023\217" +
    "\024\213\052\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\215\017\216\020\211\023\225\024\213" +
    "\001\001\000\002\001\001\000\012\016\215\017\216\020" +
    "\211\024\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\237\001\001\000\010\046\251\047\103\050" +
    "\073\001\001\000\010\046\250\047\103\050\073\001\001" +
    "\000\010\046\247\047\103\050\073\001\001\000\010\046" +
    "\246\047\103\050\073\001\001\000\010\046\245\047\103" +
    "\050\073\001\001\000\004\022\242\001\001\000\010\046" +
    "\244\047\103\050\073\001\001\000\010\046\243\047\103" +
    "\050\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\215\017\216\020\211\023\217\024\213\052\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\262\001" +
    "\001\000\004\050\261\001\001\000\004\050\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\267\050\073\001\001\000\006\047\266\050\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\273\047\103\050\073" +
    "\057\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\276\001\001\000\006\025\301" +
    "\026\300\001\001\000\004\033\317\001\001\000\002\001" +
    "\001\000\004\026\306\001\001\000\016\016\215\017\216" +
    "\020\211\023\217\024\213\052\303\001\001\000\002\001" +
    "\001\000\004\033\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\215\017\216\020\211\023\217\024" +
    "\213\052\310\001\001\000\002\001\001\000\004\033\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\332\041" +
    "\331\001\001\000\004\040\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\343\043\337\044\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u0100\001\001\000\002\001" +
    "\001\000\004\036\362\001\001\000\010\042\346\043\337" +
    "\044\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\337\044\361\001\001\000\006\043\337\044\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\360\001\001\000\004\043\357\001\001\000\004\043\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\371\001\001\000\030" +
    "\005\057\006\055\014\364\015\056\027\052\030\041\034" +
    "\365\037\044\053\047\055\037\057\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\202\047\103\050" +
    "\073\057\200\001\001\000\026\005\057\006\055\014\370" +
    "\015\056\027\052\030\041\037\044\053\047\055\037\057" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\376\047\103\050\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0101\001\001\000\002\001\001\000" +
    "\010\042\u0103\043\337\044\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\057\006\055" +
    "\014\036\015\056\027\052\030\041\031\u010a\037\044\053" +
    "\047\055\037\057\043\001\001\000\002\001\001\000\012" +
    "\046\074\047\103\050\073\056\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0114\001\001\000\004\033\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u0122\001\001\000\002\001\001\000\004\036\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\u012c\011\013\012\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$vbcup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$vbcup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$vbcup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Controlador_ controlador=new Controlador_();
    public ArrayList<metodos> listado;
    public ErrorClass errores=null;
    public Lenguajes.MetodosVisual visual=null;
    public void addError(int fila,int columna,String tk,String extra){

    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("Un "+s.left+" "+s.right+" "+s.value.toString());
    this.errores.AddError(1,s.left,s.right,s.value.toString());
    }
    public void syntax_error(Symbol s){
        System.out.println("Va "+s.left+" "+s.right+" "+s.value.toString());
        this.errores.AddError(1,s.left,s.right,s.value.toString());
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$vbcup$actions {
  private final vbcup parser;

  /** Constructor */
  CUP$vbcup$actions(vbcup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$vbcup$do_action_part00000000(
    int                        CUP$vbcup$act_num,
    java_cup.runtime.lr_parser CUP$vbcup$parser,
    java.util.Stack            CUP$vbcup$stack,
    int                        CUP$vbcup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$vbcup$result;

      /* select the action based on the action number */
      switch (CUP$vbcup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT = start_val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$vbcup$parser.done_parsing();
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VB SALTO_LINEA JAVA 
            {
              Object RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= VB SALTO_LINEA metodos SALTO_LINEA JAVA 
            {
              Object RESULT =null;
		int mtsleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int mtsright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<metodos> mts = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
Controlador_.verifyMetodos(mts,this.parser.errores);
if(mts!=null){
          if(!mts.isEmpty()){
            mts.stream()
                    .forEach(x->{
                      x.validate();
                    });
          }
        }
 if(this.parser.errores.haveErrors()){
  visual=new Lenguajes.MetodosVisual(mts);
 }
 this.parser.listado=mts;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // modulo ::= PUBLIC MODULE ID SALTO_LINEA metodos SALTO_LINEA END MODULE 
            {
              Object RESULT =null;
		int metodosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int metodosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		ArrayList<metodos> metodos = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("modulo",2, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // modulo ::= PUBLIC MODULE ID SALTO_LINEA END MODULE 
            {
              Object RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("modulo",2, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= metodos SALTO_LINEA metodo 
            {
              ArrayList<metodos> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<metodos> list = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
list.add(metodo);
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodos ::= metodo 
            {
              ArrayList<metodos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
RESULT=new ArrayList();
RESULT.add(metodo);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodos ::= error SALTO_LINEA 
            {
              ArrayList<metodos> RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // metodo ::= procedimiento 
            {
              metodos RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		metodos x = (metodos)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=x;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodo ::= funcion 
            {
              metodos RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		metodos x = (metodos)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=x;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("metodo",6, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedimiento ::= PUBLIC SUB ID AP argumentos CP valores_proc END SUB 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedimiento ::= PUBLIC SUB ID AP CP valores_proc END SUB 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= PUBLIC FUN ID AP argumentos CP AS tipos valores_fun END FUN 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
metodos metodo=new metodos(am,list,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-10)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion ::= PUBLIC FUN ID AP CP AS tipos valores_fun END FUN 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
metodos metodo=new metodos(am,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-9)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipos ::= INT 
            {
              Integer RESULT =null;
		RESULT=1;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tipos",9, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos ::= FLOAT 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tipos",9, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos ::= CHAR 
            {
              Integer RESULT =null;
		RESULT=2;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tipos",9, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argumentos ::= argumentos COMA BYVAL ID AS tipos 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
list.add(new VariableDeclaracion(id,idleft,idright,t1,false));
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("argumentos",46, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentos ::= BYVAL ID AS tipos 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,t1,false));

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("argumentos",46, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentos ::= error tipos 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al declarar una variable del argumento del metodo\n, especifique el identificador o el tipo");

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("argumentos",46, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valores_proc ::= SALTO_LINEA 
            {
              ambito_ RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("valores_proc",28, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valores_proc ::= SALTO_LINEA instrucciones_proc SALTO_LINEA 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=am;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("valores_proc",28, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones_proc ::= instrucciones_proc SALTO_LINEA instrucciones 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
am.add(ins);
RESULT=am;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_proc",26, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones_proc ::= instrucciones 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_proc",26, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valores_fun ::= SALTO_LINEA 
            {
              ambito_ RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("valores_fun",25, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valores_fun ::= SALTO_LINEA instrucciones_fun 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=am;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("valores_fun",25, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones_fun ::= instrucciones SALTO_LINEA instrucciones_fun 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
val.addIndex(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",23, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones_fun ::= error SALTO_LINEA 
            {
              ambito_ RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",23, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones_fun ::= instrucciones SALTO_LINEA 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",23, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones_fun ::= RETURN e SALTO_LINEA 
            {
              ambito_ RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
ambito_ am=new ambito_(val,x1left,x1right-1);
RESULT=am;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",23, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones ::= declaracion_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= asignacion_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= if_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= while_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= dowhile_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= select_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= for_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciones ::= input_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucciones ::= print_var 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion val = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_var ::= DIM variables AS tipos 
            {
              Instruccion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);

}catch(Exception ex){}

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("declaracion_var",3, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variables ::= variables COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("variables",39, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variables ::= variables COMA ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("variables",39, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variables ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("variables",39, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variables ::= ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("variables",39, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variables ::= error e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error en la declaracion de una variable, Formato:\nDim ID As tipo variable");

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("variables",39, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e",36, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e",36, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e",36, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t",37, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t",37, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t",37, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t",37, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=val1;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e_ ::= e_ SUM t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("+",val1,val2);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e_",32, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e_ ::= e_ RES t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("-",val1,val2);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e_",32, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e_ ::= t_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("e_",32, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // t_ ::= t_ MUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("*",val1,val2);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t_",34, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // t_ ::= t_ DIV f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("/",val1,val2);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t_",34, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // t_ ::= f_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t_",34, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // t_ ::= t_ MODUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("%",val1,val2);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("t_",34, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // f_ ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f_",33, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // f_ ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f_",33, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // f_ ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f_",33, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // f_ ::= AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=val1;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f_",33, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // f_ ::= RES AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("f_",33, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion_var ::= ID EQUALS e 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,nodo,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("asignacion_var",4, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion_var ::= ID EQUALS input_var 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Instruccion input = (Instruccion)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,input,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("asignacion_var",4, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion_var ::= error input_var 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("asignacion_var",4, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion_var ::= error e 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al momento de asignar un valor a una variable, verifique la asignacion");

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("asignacion_var",4, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_var ::= IF boolean THEN valores_fun else_var else_ END IF 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		instr_if v = (instr_if)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
RESULT=new instr_if(bool,am,list,v);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("if_var",11, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-7)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_var ::= IF boolean THEN valores_fun else_ END IF 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		instr_if v = (instr_if)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
RESULT=new instr_if(bool,am,null,v);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("if_var",11, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolean ::= boolean OR b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("boolean",40, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=v1;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("boolean",40, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // b ::= b AND c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=v1;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
        this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
        this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
         this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }
}
RESULT=v1;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // c ::= NOT AP boolean CP 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=v1;
RESULT.canAdd=false;
System.err.println("ENTROOOOOOOOOOOO");
RESULT.cambiarSigno=1;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // z ::= 
            {
              Object[] RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("z",15, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // y ::= 
            {
              Object[] RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("y",16, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("y",16, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("y",16, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ee1",12, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ee1",12, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ee1",12, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tt1",13, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tt1",13, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=val;
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tt1",13, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("tt1",13, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ff1",14, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ff1",14, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ff1",14, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("ff1",14, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_var ::= else_var ELSE_IF boolean THEN valores_fun 
            {
              ArrayList<instr_if> RESULT =null;
		int instr_ifsleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int instr_ifsright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		ArrayList<instr_if> instr_ifs = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
try{
 instr_ifs.add(new instr_if(am,bool));
 RESULT=instr_ifs;
 }catch(Exception ex){}


              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("else_var",19, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // else_var ::= ELSE_IF boolean THEN valores_fun 
            {
              ArrayList<instr_if> RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
 try{
 ArrayList<instr_if> instr_ifs=new ArrayList();;
 instr_ifs.add(new instr_if(am,bool));
 RESULT=instr_ifs;
 }catch(Exception ex){}

 
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("else_var",19, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else_ ::= 
            {
              instr_if RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("else_",20, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_ ::= ELSE valores_fun 
            {
              instr_if RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		RESULT=new instr_if(am);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("else_",20, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_var ::= WHILE boolean valores_fun END WHILE 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		RESULT=new instr_while(am,bool);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("while_var",21, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // dowhile_var ::= DO valores_fun LOOP WHILE boolean 
            {
              Instruccion RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
  try{
 RESULT=new instr_dowhile(am,bool);
  }catch(Exception e){
  }
 
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("dowhile_var",22, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dowhile_var ::= error LOOP WHILE 
            {
              Instruccion RESULT =null;
		

 
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("dowhile_var",22, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // dowhile_var ::= DO valores_fun LOOP UNTIL boolean 
            {
              Instruccion RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
 try{
  RESULT=new instr_dowhile(am,bool);
 }catch(Exception e){
 }
 
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("dowhile_var",22, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // select_var ::= SELECT CASE ID SALTO_LINEA cases_ END SELECT 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		
RESULT=new switch_var(id,list,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("select_var",29, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // select_var ::= SELECT CASE ID SALTO_LINEA END SELECT 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		
RESULT=new switch_var(id,null,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("select_var",29, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-5)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cases_ ::= cases_ case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
list.add(caso);
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("cases_",31, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cases_ ::= case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
ArrayList<Sub_case> list=new ArrayList();
list.add(caso);
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("cases_",31, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_ ::= CASE e_ valores_proc cases_break 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
Variable var=val.variable;
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(var,valleft,valright,am,1,false,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(var,valleft,valright,am,2,false,null);
 }
}else{
     RESULT=new Sub_case(var,valleft,valright,am,-1,false,null);
}

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("case_",30, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_ ::= CASE ELSE valores_proc cases_break 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(null,valleft,valright,am,1,true,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(null,valleft,valright,am,2,true,null);
 }
}else{
     RESULT=new Sub_case(null,valleft,valright,am,-1,true,null);
}

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("case_",30, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cases_break ::= 
            {
              Object[] RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("cases_break",35, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cases_break ::= RETURN e SALTO_LINEA 
            {
              Object[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		NodoAritmetica x = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
Object b[]=new Object[2];
b[0]=1;
b[1]=x;
RESULT=b;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("cases_break",35, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cases_break ::= EXIT SELECT SALTO_LINEA 
            {
              Object[] RESULT =null;
		
Object b[]=new Object[2];
b[0]=2;
RESULT=b;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("cases_break",35, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_var ::= FOR ID AS tipos EQUALS e TO e valores_fun NEXT 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=new instr_for(id,t1,t2,null,t,am,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("for_var",41, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-9)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_var ::= FOR ID AS tipos EQUALS e TO e STEP e valores_fun NEXT 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-8)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		NodoAritmetica t3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=new instr_for(id,t1,t2,t3,t,am,idleft,idright);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("for_var",41, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-11)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // print_var ::= CONSLN AP datos CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=new instr_print(datos,true);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("print_var",43, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // print_var ::= CONSLN AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(true);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("print_var",43, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // print_var ::= CONSL AP datos CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		
RESULT=new instr_print(datos,false);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("print_var",43, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // print_var ::= CONSL AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(false);

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("print_var",43, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // datos ::= datos Y CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
d.add(new argumento_dato(cd));
RESULT=d;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // datos ::= datos Y e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
d.add(new argumento_dato(nodo));
RESULT=d;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // datos ::= CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
ArrayList<argumento_dato>list=new ArrayList();
list.add(new argumento_dato(cd));
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // datos ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$vbcup$stack.peek()).value;
		
ArrayList<argumento_dato>list=new ArrayList();
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // datos ::= error e 
            {
              ArrayList<argumento_dato> RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // datos ::= error Y 
            {
              ArrayList<argumento_dato> RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // datos ::= error CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;

              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("datos",44, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // input_var ::= INPUTI AP datos CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=new instr_input(datos,1,"e",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // input_var ::= INPUTD AP datos CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=new instr_input(datos,0,"r",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // input_var ::= INPUTC AP datos CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-1)).value;
		RESULT=new instr_input(datos,1,"c",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-3)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // input_var ::= INPUTI AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		RESULT=new instr_input(1,"e",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // input_var ::= INPUTD AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		RESULT=new instr_input(0,"r",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // input_var ::= INPUTC AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)).value;
		RESULT=new instr_input(1,"c",xleft,xright);
              CUP$vbcup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$vbcup$stack.elementAt(CUP$vbcup$top-2)), ((java_cup.runtime.Symbol)CUP$vbcup$stack.peek()), RESULT);
            }
          return CUP$vbcup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$vbcup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$vbcup$do_action(
    int                        CUP$vbcup$act_num,
    java_cup.runtime.lr_parser CUP$vbcup$parser,
    java.util.Stack            CUP$vbcup$stack,
    int                        CUP$vbcup$top)
    throws java.lang.Exception
    {
              return CUP$vbcup$do_action_part00000000(
                               CUP$vbcup$act_num,
                               CUP$vbcup$parser,
                               CUP$vbcup$stack,
                               CUP$vbcup$top);
    }
}

}
