
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaJAVA;

import Errores.ErrorClass;
import GramaticaC.call_c;
import TablaSimbolos.SymTable;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import Lenguajes.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class javacup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}
  public static  String stringJavaClass="";
  /** Default constructor. */
  @Deprecated
  public javacup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public javacup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public javacup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\010\000\002\007\012\000\002\007\011\000" +
    "\002\007\013\000\002\007\012\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\010\013\000\002\010\012\000\002\011\013\000" +
    "\002\011\012\000\002\030\002\000\002\030\003\000\002" +
    "\014\002\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\005" +
    "\000\002\064\002\000\002\016\005\000\002\065\002\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\005\006\000\002\005\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\041\004\000\002\042\005\000\002\042\007" +
    "\000\002\042\003\000\002\042\005\000\002\042\004\000" +
    "\002\021\011\000\002\021\015\000\002\021\012\000\002" +
    "\021\016\000\002\020\013\000\002\020\012\000\002\022" +
    "\011\000\002\023\012\000\002\024\021\000\002\024\024" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\005\000\002\026\006\000\002\056\011\000\002" +
    "\053\004\000\002\053\003\000\002\053\004\000\002\055" +
    "\007\000\002\055\006\000\002\054\004\000\002\054\005" +
    "\000\002\054\002\000\002\061\004\000\002\061\004\000" +
    "\002\062\004\000\002\062\002\000\002\063\005\000\002" +
    "\063\002\000\002\060\006\000\002\060\005\000\002\060" +
    "\006\000\002\060\005\000\002\057\006\000\002\057\006" +
    "\000\002\057\006\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\003\000\002\034\005\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\005\000" +
    "\002\035\006\000\002\035\004\000\002\035\004\000\002" +
    "\035\003\000\002\036\005\000\002\036\005\000\002\036" +
    "\003\000\002\040\005\000\002\040\005\000\002\040\003" +
    "\000\002\040\005\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\005\000\002\037\006\000\002" +
    "\037\004\000\002\037\004\000\002\052\005\000\002\052" +
    "\003\000\002\050\005\000\002\050\003\000\002\051\004" +
    "\000\002\051\007\000\002\051\006\000\002\046\002\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\047\002\000\002\047" +
    "\004\000\002\047\004\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\044\005\000\002\044\005\000" +
    "\002\044\003\000\002\044\005\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\004\000\002\045\004\000\002\045\003\000\002\013\005" +
    "\000\002\013\006\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\010\003\004\004\007\041\005\001\002\000" +
    "\004\004\007\001\002\000\004\002\uffff\001\002\000\006" +
    "\004\007\041\u016b\001\002\000\004\005\013\001\002\000" +
    "\004\002\012\001\002\000\006\004\ufffd\041\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\017\014\001\002\000" +
    "\004\010\015\001\002\000\014\003\026\004\017\014\016" +
    "\015\025\016\027\001\002\000\006\003\uffd3\017\uffd3\001" +
    "\002\000\014\012\034\014\016\015\025\016\027\017\u015e" +
    "\001\002\000\016\003\026\004\017\011\ufff1\014\016\015" +
    "\025\016\027\001\002\000\004\011\u015c\001\002\000\004" +
    "\021\u015a\001\002\000\006\003\u0151\017\u0150\001\002\000" +
    "\016\003\026\004\017\011\ufff2\014\016\015\025\016\027" +
    "\001\002\000\006\003\uffd2\017\uffd2\001\002\000\004\004" +
    "\032\001\002\000\006\003\uffd1\017\uffd1\001\002\000\004" +
    "\011\uffef\001\002\000\004\011\ufff0\001\002\000\012\012" +
    "\034\014\016\015\025\016\027\001\002\000\004\017\u0144" +
    "\001\002\000\004\017\035\001\002\000\004\006\036\001" +
    "\002\000\012\007\041\014\016\015\025\016\027\001\002" +
    "\000\006\007\u013e\023\u013d\001\002\000\004\017\u013c\001" +
    "\002\000\004\010\042\001\002\000\042\003\064\011\uffe8" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\071\032\056\034\070\035\073\036\072\037\063\040\060" +
    "\054\051\001\002\000\052\003\064\011\uffe7\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\071\032\056" +
    "\033\uffe7\034\070\035\073\036\072\037\063\040\060\053" +
    "\uffe7\054\051\055\uffe7\056\uffe7\001\002\000\004\021\u013a" +
    "\001\002\000\004\021\u0139\001\002\000\004\006\u0133\001" +
    "\002\000\004\021\u0132\001\002\000\052\003\uffe5\011\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\025\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000" +
    "\004\006\u0102\001\002\000\004\006\345\001\002\000\052" +
    "\003\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda\025" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\006\006\127\022\342\001\002\000\052" +
    "\003\uffdc\011\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\025" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\001\002\000\004\010\250\001\002\000\052\003\uffd9" +
    "\011\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\025\uffd9\027" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\001" +
    "\002\000\004\006\244\001\002\000\004\021\243\001\002" +
    "\000\004\011\242\001\002\000\004\006\236\001\002\000" +
    "\030\006\106\007\232\017\104\021\235\034\070\035\073" +
    "\036\072\042\100\043\105\044\107\046\077\001\002\000" +
    "\004\021\uffe1\001\002\000\052\003\uffdd\011\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\025\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\004\021" +
    "\uffdf\001\002\000\004\006\222\001\002\000\004\006\156" +
    "\001\002\000\004\006\152\001\002\000\004\006\074\001" +
    "\002\000\022\006\106\007\076\017\104\020\075\042\100" +
    "\043\105\044\107\046\077\001\002\000\006\007\uffa9\045" +
    "\141\001\002\000\004\021\uff9d\001\002\000\010\006\145" +
    "\042\146\043\144\001\002\000\032\007\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\026\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\001\002\000\032\007\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\052\uff8d\001\002\000\032\007" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\001\002\000" +
    "\010\007\uffa7\045\136\046\122\001\002\000\034\006\127" +
    "\007\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\045" +
    "\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\001\002" +
    "\000\032\007\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\001\002\000\016\006\106\017\104\042\100\043\105\044" +
    "\107\046\077\001\002\000\032\007\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\026\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\001\002\000\032\007\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\026\uff9a\045\uff9a\046\uff9a\047" +
    "\114\050\115\051\113\052\uff9a\001\002\000\004\007\112" +
    "\001\002\000\004\021\uffa0\001\002\000\016\006\106\017" +
    "\104\042\100\043\105\044\107\046\077\001\002\000\016" +
    "\006\106\017\104\042\100\043\105\044\107\046\077\001" +
    "\002\000\016\006\106\017\104\042\100\043\105\044\107" +
    "\046\077\001\002\000\032\007\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\026\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\001\002\000\032\007\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\026\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\001\002\000\032\007\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\026\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\001\002\000\010\007" +
    "\124\045\123\046\122\001\002\000\016\006\106\017\104" +
    "\042\100\043\105\044\107\046\077\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\032\007\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\001\002\000\032\007\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\026\uff9c\045\uff9c\046\uff9c\047\114\050\115\051\113" +
    "\052\uff9c\001\002\000\032\007\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\026\uff9b\045\uff9b\046\uff9b\047\114\050\115" +
    "\051\113\052\uff9b\001\002\000\020\006\106\007\131\017" +
    "\104\042\100\043\105\044\107\046\077\001\002\000\006" +
    "\007\134\023\133\001\002\000\032\007\uff60\021\uff60\022" +
    "\uff60\023\uff60\024\uff60\026\uff60\045\uff60\046\uff60\047\uff60" +
    "\050\uff60\051\uff60\052\uff60\001\002\000\012\007\uff5d\023" +
    "\uff5d\045\123\046\122\001\002\000\016\006\106\017\104" +
    "\042\100\043\105\044\107\046\077\001\002\000\032\007" +
    "\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\026\uff5f\045\uff5f" +
    "\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\001\002\000" +
    "\012\007\uff5e\023\uff5e\045\123\046\122\001\002\000\020" +
    "\006\106\017\104\020\140\042\100\043\105\044\107\046" +
    "\077\001\002\000\004\007\uffac\001\002\000\006\007\uffa9" +
    "\045\141\001\002\000\020\006\106\017\104\020\075\042" +
    "\100\043\105\044\107\046\077\001\002\000\004\007\uffa8" +
    "\001\002\000\004\007\uffaa\001\002\000\032\007\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\052\uff8e\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\032\007\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\026" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\001\002\000\010\007\150\045\123\046\122\001\002\000" +
    "\032\007\uff90\021\uff90\022\uff90\023\uff90\024\uff90\026\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\001" +
    "\002\000\004\007\uffab\001\002\000\022\006\106\007\153" +
    "\017\104\020\075\042\100\043\105\044\107\046\077\001" +
    "\002\000\004\021\uff9e\001\002\000\004\007\155\001\002" +
    "\000\004\021\uffa1\001\002\000\012\014\016\015\025\016" +
    "\027\017\157\001\002\000\004\021\206\001\002\000\004" +
    "\017\161\001\002\000\004\022\162\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\010\021\164\045\123\046\122\001\002\000\004\017" +
    "\165\001\002\000\004\052\166\001\002\000\016\006\106" +
    "\017\104\042\100\043\105\044\107\046\077\001\002\000" +
    "\010\021\170\045\123\046\122\001\002\000\004\017\171" +
    "\001\002\000\004\022\172\001\002\000\016\006\106\017" +
    "\104\042\100\043\105\044\107\046\077\001\002\000\010" +
    "\007\174\045\123\046\122\001\002\000\004\010\175\001" +
    "\002\000\044\003\064\011\uffea\014\016\015\025\016\027" +
    "\017\054\025\052\027\046\031\071\032\056\033\176\034" +
    "\070\035\073\036\072\037\063\040\060\054\051\001\002" +
    "\000\016\006\106\017\104\042\100\043\105\044\107\046" +
    "\077\001\002\000\044\003\064\011\uffe3\014\016\015\025" +
    "\016\027\017\054\025\052\027\046\031\071\032\056\033" +
    "\176\034\070\035\073\036\072\037\063\040\060\054\051" +
    "\001\002\000\004\011\uffe9\001\002\000\004\011\202\001" +
    "\002\000\052\003\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\025\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\001\002\000\004\011\uffe4\001\002\000" +
    "\010\021\205\045\123\046\122\001\002\000\004\011\uffe2" +
    "\001\002\000\004\017\207\001\002\000\004\052\210\001" +
    "\002\000\016\006\106\017\104\042\100\043\105\044\107" +
    "\046\077\001\002\000\010\021\212\045\123\046\122\001" +
    "\002\000\004\017\213\001\002\000\004\022\214\001\002" +
    "\000\016\006\106\017\104\042\100\043\105\044\107\046" +
    "\077\001\002\000\010\007\216\045\123\046\122\001\002" +
    "\000\004\010\217\001\002\000\044\003\064\011\uffea\014" +
    "\016\015\025\016\027\017\054\025\052\027\046\031\071" +
    "\032\056\033\176\034\070\035\073\036\072\037\063\040" +
    "\060\054\051\001\002\000\004\011\221\001\002\000\052" +
    "\003\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\025" +
    "\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\022\006\106\007\223\017\104\020\075" +
    "\042\100\043\105\044\107\046\077\001\002\000\004\021" +
    "\uff9f\001\002\000\004\007\225\001\002\000\004\021\uffa2" +
    "\001\002\000\004\021\227\001\002\000\052\003\uffde\011" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\025\uffde\027\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\053\uffde\054\uffde\055\uffde\056\uffde\001\002" +
    "\000\004\021\231\001\002\000\052\003\uffe0\011\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\025\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\052" +
    "\003\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\025" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\004\021\uffcb\001\002\000\010\021\uffcc" +
    "\045\123\046\122\001\002\000\052\003\uffd6\011\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\025\uffd6\027\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002\000\022" +
    "\006\106\007\237\017\104\020\075\042\100\043\105\044" +
    "\107\046\077\001\002\000\004\021\uffa3\001\002\000\004" +
    "\007\241\001\002\000\004\021\uffa4\001\002\000\016\003" +
    "\uffeb\004\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb\001\002" +
    "\000\052\003\uffd4\011\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\025\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\001\002\000\022\006\106\007\245\017\104" +
    "\020\075\042\100\043\105\044\107\046\077\001\002\000" +
    "\004\021\uffa5\001\002\000\004\007\247\001\002\000\004" +
    "\021\uffa6\001\002\000\044\003\064\011\uffea\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\071\032\056" +
    "\033\176\034\070\035\073\036\072\037\063\040\060\054" +
    "\051\001\002\000\004\011\252\001\002\000\004\027\253" +
    "\001\002\000\004\006\254\001\002\000\020\006\270\013" +
    "\267\017\261\042\256\043\262\044\271\046\255\001\002" +
    "\000\006\042\341\043\340\001\002\000\026\007\uff64\022" +
    "\uff64\024\uff64\026\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\051\uff64\052\uff64\001\002\000\026\007\uff61\022\uff61\024" +
    "\uff61\026\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61" +
    "\052\uff61\001\002\000\026\007\uff69\022\uff69\024\uff69\026" +
    "\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69" +
    "\001\002\000\030\006\127\007\uff67\022\uff67\024\uff67\026" +
    "\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67" +
    "\001\002\000\026\007\uff66\022\uff66\024\uff66\026\uff66\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\001\002" +
    "\000\020\007\uff71\022\311\024\uff71\026\uff71\045\334\046" +
    "\333\052\310\001\002\000\010\007\uff7b\024\uff7b\026\uff7b" +
    "\001\002\000\026\007\uff6c\022\uff6c\024\uff6c\026\uff6c\045" +
    "\uff6c\046\uff6c\047\326\050\327\051\325\052\uff6c\001\002" +
    "\000\010\007\uff7d\024\uff7d\026\276\001\002\000\004\006" +
    "\322\001\002\000\020\006\270\013\267\017\261\042\256" +
    "\043\262\044\271\046\255\001\002\000\026\007\uff65\022" +
    "\uff65\024\uff65\026\uff65\045\uff65\046\uff65\047\uff65\050\uff65" +
    "\051\uff65\052\uff65\001\002\000\006\007\274\024\273\001" +
    "\002\000\020\006\270\013\267\017\261\042\256\043\262" +
    "\044\271\046\255\001\002\000\004\021\uffbd\001\002\000" +
    "\010\007\uff7e\024\uff7e\026\276\001\002\000\020\006\270" +
    "\013\267\017\261\042\256\043\262\044\271\046\255\001" +
    "\002\000\010\007\uff7c\024\uff7c\026\uff7c\001\002\000\006" +
    "\007\301\024\273\001\002\000\026\007\uff77\022\uff77\024" +
    "\uff77\026\uff77\045\304\046\302\047\305\050\306\051\303" +
    "\052\uff77\001\002\000\016\006\106\017\104\042\100\043" +
    "\105\044\107\046\077\001\002\000\016\006\106\017\104" +
    "\042\100\043\105\044\107\046\077\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\016\006\106\017\104\042\100\043\105\044\107\046" +
    "\077\001\002\000\016\006\106\017\104\042\100\043\105" +
    "\044\107\046\077\001\002\000\014\007\uff71\022\311\024" +
    "\uff71\026\uff71\052\310\001\002\000\016\006\106\017\104" +
    "\042\100\043\105\044\107\046\077\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\010\007\uff79\024\uff79\026\uff79\001\002\000\014\007" +
    "\uff6f\024\uff6f\026\uff6f\045\123\046\122\001\002\000\014" +
    "\007\uff70\024\uff70\026\uff70\045\123\046\122\001\002\000" +
    "\020\007\uff73\022\uff73\024\uff73\026\uff73\045\123\046\122" +
    "\052\uff73\001\002\000\020\007\uff74\022\uff74\024\uff74\026" +
    "\uff74\045\123\046\122\052\uff74\001\002\000\020\007\uff76" +
    "\022\uff76\024\uff76\026\uff76\045\123\046\122\052\uff76\001" +
    "\002\000\020\007\uff72\022\uff72\024\uff72\026\uff72\045\123" +
    "\046\122\052\uff72\001\002\000\020\007\uff75\022\uff75\024" +
    "\uff75\026\uff75\045\123\046\122\052\uff75\001\002\000\020" +
    "\006\270\013\267\017\261\042\256\043\262\044\271\046" +
    "\255\001\002\000\006\007\324\024\273\001\002\000\010" +
    "\007\uff78\024\uff78\026\uff78\001\002\000\016\006\106\017" +
    "\104\042\100\043\105\044\107\046\077\001\002\000\016" +
    "\006\106\017\104\042\100\043\105\044\107\046\077\001" +
    "\002\000\016\006\106\017\104\042\100\043\105\044\107" +
    "\046\077\001\002\000\026\007\uff6a\022\uff6a\024\uff6a\026" +
    "\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a" +
    "\001\002\000\026\007\uff6b\022\uff6b\024\uff6b\026\uff6b\045" +
    "\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\001\002" +
    "\000\026\007\uff68\022\uff68\024\uff68\026\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\001\002\000\016" +
    "\006\106\017\104\042\100\043\105\044\107\046\077\001" +
    "\002\000\016\006\106\017\104\042\100\043\105\044\107" +
    "\046\077\001\002\000\010\007\uff7a\024\uff7a\026\uff7a\001" +
    "\002\000\026\007\uff6e\022\uff6e\024\uff6e\026\uff6e\045\uff6e" +
    "\046\uff6e\047\114\050\115\051\113\052\uff6e\001\002\000" +
    "\026\007\uff6d\022\uff6d\024\uff6d\026\uff6d\045\uff6d\046\uff6d" +
    "\047\114\050\115\051\113\052\uff6d\001\002\000\026\007" +
    "\uff62\022\uff62\024\uff62\026\uff62\045\uff62\046\uff62\047\uff62" +
    "\050\uff62\051\uff62\052\uff62\001\002\000\026\007\uff63\022" +
    "\uff63\024\uff63\026\uff63\045\uff63\046\uff63\047\uff63\050\uff63" +
    "\051\uff63\052\uff63\001\002\000\024\006\106\017\104\034" +
    "\070\035\073\036\072\042\100\043\105\044\107\046\077" +
    "\001\002\000\004\021\uffcd\001\002\000\010\021\uffce\045" +
    "\123\046\122\001\002\000\020\006\270\013\267\017\261" +
    "\042\256\043\262\044\271\046\255\001\002\000\006\007" +
    "\347\024\273\001\002\000\004\010\350\001\002\000\044" +
    "\003\064\011\uffea\014\016\015\025\016\027\017\054\025" +
    "\052\027\046\031\071\032\056\033\176\034\070\035\073" +
    "\036\072\037\063\040\060\054\051\001\002\000\004\011" +
    "\352\001\002\000\054\003\uffc4\011\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\025\uffc4\027\uffc4\030\353\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\006\010" +
    "\370\025\371\001\002\000\054\003\uffc2\011\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\025\uffc2\027\uffc2\030\355\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000" +
    "\006\010\356\025\357\001\002\000\044\003\064\011\uffea" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\071\032\056\033\176\034\070\035\073\036\072\037\063" +
    "\040\060\054\051\001\002\000\004\006\360\001\002\000" +
    "\020\006\270\013\267\017\261\042\256\043\262\044\271" +
    "\046\255\001\002\000\006\007\362\024\273\001\002\000" +
    "\004\010\363\001\002\000\044\003\064\011\uffea\014\016" +
    "\015\025\016\027\017\054\025\052\027\046\031\071\032" +
    "\056\033\176\034\070\035\073\036\072\037\063\040\060" +
    "\054\051\001\002\000\004\011\365\001\002\000\054\003" +
    "\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\025\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\004\011\367\001\002\000\052\003" +
    "\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\025\uffc1" +
    "\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\001\002\000\044\003\064\011\uffea\014\016\015\025\016" +
    "\027\017\054\025\052\027\046\031\071\032\056\033\176" +
    "\034\070\035\073\036\072\037\063\040\060\054\051\001" +
    "\002\000\004\006\372\001\002\000\020\006\270\013\267" +
    "\017\261\042\256\043\262\044\271\046\255\001\002\000" +
    "\006\007\374\024\273\001\002\000\004\010\375\001\002" +
    "\000\044\003\064\011\uffea\014\016\015\025\016\027\017" +
    "\054\025\052\027\046\031\071\032\056\033\176\034\070" +
    "\035\073\036\072\037\063\040\060\054\051\001\002\000" +
    "\004\011\377\001\002\000\054\003\uffbf\011\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\025\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002\000" +
    "\004\011\u0101\001\002\000\052\003\uffc3\011\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\025\uffc3\027\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\004\017" +
    "\u0103\001\002\000\004\007\u0104\001\002\000\004\010\u0105" +
    "\001\002\000\010\003\u0107\053\u0106\055\u010a\001\002\000" +
    "\004\057\u012f\001\002\000\006\053\u0106\055\u010a\001\002" +
    "\000\010\011\uffb3\053\uffb3\055\uffb3\001\002\000\010\011" +
    "\u012c\053\u0106\055\u010a\001\002\000\014\006\u010e\042\u0112" +
    "\043\u010c\044\u0110\046\u010b\001\002\000\010\006\u0128\042" +
    "\u0129\043\u0127\001\002\000\020\007\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\057\uff85\001\002\000\020\007" +
    "\uff8a\045\uff8a\046\uff8a\047\u011f\050\u0120\051\u011e\057\uff8a" +
    "\001\002\000\014\006\u010e\042\u0112\043\u010c\044\u0110\046" +
    "\u010b\001\002\000\010\045\u0114\046\u0113\057\u0115\001\002" +
    "\000\020\007\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051" +
    "\uff84\057\uff84\001\002\000\020\007\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\057\uff87\001\002\000\020\007" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\057\uff83" +
    "\001\002\000\014\006\u010e\042\u0112\043\u010c\044\u0110\046" +
    "\u010b\001\002\000\014\006\u010e\042\u0112\043\u010c\044\u0110" +
    "\046\u010b\001\002\000\052\003\064\011\uffe8\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\071\032\056" +
    "\033\uffe8\034\070\035\073\036\072\037\063\040\060\053" +
    "\uffe8\054\051\055\uffe8\056\uffe8\001\002\000\014\011\uffad" +
    "\033\u0117\053\uffad\055\uffad\056\u0119\001\002\000\016\006" +
    "\106\017\104\042\100\043\105\044\107\046\077\001\002" +
    "\000\010\011\uffb1\053\uffb1\055\uffb1\001\002\000\004\021" +
    "\u011a\001\002\000\010\011\uffaf\053\uffaf\055\uffaf\001\002" +
    "\000\010\021\u011c\045\123\046\122\001\002\000\010\011" +
    "\uffae\053\uffae\055\uffae\001\002\000\020\007\uff8c\045\uff8c" +
    "\046\uff8c\047\u011f\050\u0120\051\u011e\057\uff8c\001\002\000" +
    "\014\006\u010e\042\u0112\043\u010c\044\u0110\046\u010b\001\002" +
    "\000\014\006\u010e\042\u0112\043\u010c\044\u0110\046\u010b\001" +
    "\002\000\014\006\u010e\042\u0112\043\u010c\044\u0110\046\u010b" +
    "\001\002\000\020\007\uff88\045\uff88\046\uff88\047\uff88\050" +
    "\uff88\051\uff88\057\uff88\001\002\000\020\007\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\057\uff89\001\002\000" +
    "\020\007\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\057\uff86\001\002\000\020\007\uff8b\045\uff8b\046\uff8b\047" +
    "\u011f\050\u0120\051\u011e\057\uff8b\001\002\000\010\007\u0126" +
    "\045\u0114\046\u0113\001\002\000\020\007\uff82\045\uff82\046" +
    "\uff82\047\uff82\050\uff82\051\uff82\057\uff82\001\002\000\020" +
    "\007\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\057" +
    "\uff7f\001\002\000\014\006\u010e\042\u0112\043\u010c\044\u0110" +
    "\046\u010b\001\002\000\020\007\uff80\045\uff80\046\uff80\047" +
    "\uff80\050\uff80\051\uff80\057\uff80\001\002\000\010\007\u012b" +
    "\045\u0114\046\u0113\001\002\000\020\007\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\057\uff81\001\002\000\052" +
    "\003\uffb5\011\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\025" +
    "\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\001\002\000\010\011\uffb4\053\uffb4\055\uffb4\001\002" +
    "\000\010\011\uffb2\053\uffb2\055\uffb2\001\002\000\052\003" +
    "\064\011\uffe8\014\016\015\025\016\027\017\054\025\052" +
    "\027\046\031\071\032\056\033\uffe8\034\070\035\073\036" +
    "\072\037\063\040\060\053\uffe8\054\051\055\uffe8\056\uffe8" +
    "\001\002\000\014\011\uffad\033\u0117\053\uffad\055\uffad\056" +
    "\u0119\001\002\000\010\011\uffb0\053\uffb0\055\uffb0\001\002" +
    "\000\052\003\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\025\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\001\002\000\020\006\270\013\267\017\261" +
    "\042\256\043\262\044\271\046\255\001\002\000\006\007" +
    "\u0135\024\273\001\002\000\004\010\u0136\001\002\000\044" +
    "\003\064\011\uffea\014\016\015\025\016\027\017\054\025" +
    "\052\027\046\031\071\032\056\033\176\034\070\035\073" +
    "\036\072\037\063\040\060\054\051\001\002\000\004\011" +
    "\u0138\001\002\000\052\003\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\025\uffbe\027\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\001\002\000\052\003\uffdb\011" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\025\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002" +
    "\000\052\003\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\025\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\052\003\uffe6\011\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\025\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\006\007" +
    "\uffcf\023\uffcf\001\002\000\010\014\016\015\025\016\027" +
    "\001\002\000\004\010\u013f\001\002\000\042\003\064\011" +
    "\uffe8\014\016\015\025\016\027\017\054\025\052\027\046" +
    "\031\071\032\056\034\070\035\073\036\072\037\063\040" +
    "\060\054\051\001\002\000\004\011\u0141\001\002\000\016" +
    "\003\uffec\004\uffec\011\uffec\014\uffec\015\uffec\016\uffec\001" +
    "\002\000\004\017\u0143\001\002\000\006\007\uffd0\023\uffd0" +
    "\001\002\000\004\006\u0145\001\002\000\012\007\u0147\014" +
    "\016\015\025\016\027\001\002\000\006\007\u014b\023\u013d" +
    "\001\002\000\004\010\u0148\001\002\000\044\003\064\011" +
    "\uffea\014\016\015\025\016\027\017\054\025\052\027\046" +
    "\031\071\032\056\033\176\034\070\035\073\036\072\037" +
    "\063\040\060\054\051\001\002\000\004\011\u014a\001\002" +
    "\000\016\003\uffed\004\uffed\011\uffed\014\uffed\015\uffed\016" +
    "\uffed\001\002\000\004\010\u014c\001\002\000\044\003\064" +
    "\011\uffea\014\016\015\025\016\027\017\054\025\052\027" +
    "\046\031\071\032\056\033\176\034\070\035\073\036\072" +
    "\037\063\040\060\054\051\001\002\000\004\011\u014e\001" +
    "\002\000\016\003\uffee\004\uffee\011\uffee\014\uffee\015\uffee" +
    "\016\uffee\001\002\000\004\011\ufff3\001\002\000\010\021" +
    "\uffc7\022\u0158\023\uffc7\001\002\000\016\006\106\017\104" +
    "\042\100\043\105\044\107\046\077\001\002\000\006\021" +
    "\uffca\023\u0153\001\002\000\004\017\u0154\001\002\000\010" +
    "\021\uffc9\022\u0155\023\uffc9\001\002\000\016\006\106\017" +
    "\104\042\100\043\105\044\107\046\077\001\002\000\012" +
    "\021\uffc8\023\uffc8\045\123\046\122\001\002\000\012\021" +
    "\uffc5\023\uffc5\045\123\046\122\001\002\000\016\006\106" +
    "\017\104\042\100\043\105\044\107\046\077\001\002\000" +
    "\012\021\uffc6\023\uffc6\045\123\046\122\001\002\000\016" +
    "\003\026\004\017\011\ufff5\014\016\015\025\016\027\001" +
    "\002\000\004\011\ufff6\001\002\000\006\004\ufffb\041\ufffb" +
    "\001\002\000\004\011\ufff4\001\002\000\004\006\u015f\001" +
    "\002\000\012\007\u0161\014\016\015\025\016\027\001\002" +
    "\000\006\007\u0166\023\u013d\001\002\000\004\010\u0162\001" +
    "\002\000\042\003\064\011\uffe8\014\016\015\025\016\027" +
    "\017\054\025\052\027\046\031\071\032\056\034\070\035" +
    "\073\036\072\037\063\040\060\054\051\001\002\000\004" +
    "\011\u0164\001\002\000\016\003\026\004\017\011\ufff9\014" +
    "\016\015\025\016\027\001\002\000\004\011\ufff7\001\002" +
    "\000\004\010\u0167\001\002\000\042\003\064\011\uffe8\014" +
    "\016\015\025\016\027\017\054\025\052\027\046\031\071" +
    "\032\056\034\070\035\073\036\072\037\063\040\060\054" +
    "\051\001\002\000\004\011\u0169\001\002\000\016\003\026" +
    "\004\017\011\ufffa\014\016\015\025\016\027\001\002\000" +
    "\004\011\ufff8\001\002\000\004\002\000\001\002\000\006" +
    "\004\ufffe\041\ufffe\001\002\000\006\004\ufffc\041\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\010\002\007\003\005\004\010\001\001\000" +
    "\004\004\u016c\001\001\000\002\001\001\000\004\004\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\022\007\020\010\017\011\023\041\021\001" +
    "\001\000\002\001\001\000\004\006\032\001\001\000\014" +
    "\006\022\007\u015c\010\017\011\023\041\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u0151\001\001" +
    "\000\014\006\022\007\u014e\010\017\011\023\041\021\001" +
    "\001\000\002\001\001\000\006\010\030\011\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\036\006\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\022\013\060\014\061\015\042\016\047\017\064\021" +
    "\065\022\054\023\044\024\052\041\066\056\056\057\046" +
    "\060\043\001\001\000\032\006\022\013\060\016\u013a\017" +
    "\064\021\065\022\054\023\044\024\052\041\066\056\056" +
    "\057\046\060\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\100\033\233\034\107" +
    "\035\101\057\232\001\001\000\004\064\227\001\001\000" +
    "\002\001\001\000\004\065\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\100\033\102\034\107\035\101\061\110\001\001" +
    "\000\004\062\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\100\033\120\034\107\035\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\100\035\117\001\001\000\006" +
    "\013\100\035\116\001\001\000\006\013\100\035\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\100\034\125\035\101\001" +
    "\001\000\010\013\100\034\124\035\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\127\013\100\033\131\034\107\035\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\100\033\134\034\107\035\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\100\034\124\035\101\001" +
    "\001\000\002\001\001\000\004\062\141\001\001\000\014" +
    "\013\100\033\102\034\107\035\101\061\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\100\033\146\034\107\035\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\100\033\102\034\107\035\101\061\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\100\033\162\034\107" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\100\033\166\034\107\035\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\100\033\172\034\107\035\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\022\013" +
    "\060\016\176\017\064\021\065\022\054\023\044\024\052" +
    "\027\177\030\200\041\066\056\056\057\046\060\043\001" +
    "\001\000\012\013\100\033\203\034\107\035\101\001\001" +
    "\000\034\006\022\013\060\016\176\017\064\021\065\022" +
    "\054\023\044\024\052\027\202\041\066\056\056\057\046" +
    "\060\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\100\033\210\034\107\035\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\100\033" +
    "\214\034\107\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\022\013\060\016\176\017\064\021" +
    "\065\022\054\023\044\024\052\027\177\030\217\041\066" +
    "\056\056\057\046\060\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\100\033\102\034\107\035\101" +
    "\061\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\100" +
    "\033\102\034\107\035\101\061\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\100\033\102\034\107\035" +
    "\101\061\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\022\013\060\016\176\017" +
    "\064\021\065\022\054\023\044\024\052\027\177\030\250" +
    "\041\066\056\056\057\046\060\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\256" +
    "\043\262\044\264\045\257\050\265\051\263\052\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\256\043" +
    "\262\044\264\045\257\050\265\051\263\052\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\256\043" +
    "\262\044\264\045\257\050\274\051\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\256\043\262\044" +
    "\264\045\257\051\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\306\001\001\000\012\013\100\033" +
    "\320\034\107\035\101\001\001\000\012\013\100\033\317" +
    "\034\107\035\101\001\001\000\012\013\100\033\316\034" +
    "\107\035\101\001\001\000\012\013\100\033\315\034\107" +
    "\035\101\001\001\000\012\013\100\033\314\034\107\035" +
    "\101\001\001\000\004\047\311\001\001\000\012\013\100" +
    "\033\313\034\107\035\101\001\001\000\012\013\100\033" +
    "\312\034\107\035\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\256\043\262\044\264\045\257\050\265\051" +
    "\263\052\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\100\035\331\001\001\000\006\013\100\035" +
    "\330\001\001\000\006\013\100\035\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\100\034\336\035\101\001\001\000\010\013\100\034\335" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\100\033\343\034\107\035\101\057\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\256\043\262" +
    "\044\264\045\257\050\265\051\263\052\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\022\013\060" +
    "\016\176\017\064\021\065\022\054\023\044\024\052\027" +
    "\177\030\350\041\066\056\056\057\046\060\043\001\001" +
    "\000\002\001\001\000\004\020\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\022" +
    "\013\060\016\176\017\064\021\065\022\054\023\044\024" +
    "\052\027\177\030\365\041\066\056\056\057\046\060\043" +
    "\001\001\000\002\001\001\000\020\013\256\043\262\044" +
    "\264\045\257\050\265\051\263\052\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\022\013\060\016" +
    "\176\017\064\021\065\022\054\023\044\024\052\027\177" +
    "\030\363\041\066\056\056\057\046\060\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\022\013\060\016\176\017\064\021" +
    "\065\022\054\023\044\024\052\027\177\030\377\041\066" +
    "\056\056\057\046\060\043\001\001\000\002\001\001\000" +
    "\020\013\256\043\262\044\264\045\257\050\265\051\263" +
    "\052\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\022\013\060\016\176\017\064\021\065\022\054" +
    "\023\044\024\052\027\177\030\375\041\066\056\056\057" +
    "\046\060\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\u0108\055\u0107" +
    "\001\001\000\002\001\001\000\004\055\u012d\001\001\000" +
    "\002\001\001\000\004\055\u012c\001\001\000\010\036\u010e" +
    "\037\u0110\040\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\u0124\037\u0110\040\u010c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\u0110\040\u0123\001\001" +
    "\000\006\037\u0110\040\u011c\001\001\000\036\006\022\013" +
    "\060\014\u0115\015\042\016\047\017\064\021\065\022\054" +
    "\023\044\024\052\041\066\056\056\057\046\060\043\001" +
    "\001\000\004\054\u0117\001\001\000\012\013\100\033\u011a" +
    "\034\107\035\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0122\001\001\000\004\037" +
    "\u0121\001\001\000\004\037\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\u0129\037\u0110\040\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\022\013\060\014" +
    "\u012f\015\042\016\047\017\064\021\065\022\054\023\044" +
    "\024\052\041\066\056\056\057\046\060\043\001\001\000" +
    "\004\054\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\256\043\262\044\264\045\257\050\265\051" +
    "\263\052\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\022\013\060\016\176\017\064\021\065\022" +
    "\054\023\044\024\052\027\177\030\u0136\041\066\056\056" +
    "\057\046\060\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0141\001\001\000\002\001" +
    "\001\000\036\006\022\013\060\014\u013f\015\042\016\047" +
    "\017\064\021\065\022\054\023\044\024\052\041\066\056" +
    "\056\057\046\060\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\u0145\006\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\022\013\060\016\176\017" +
    "\064\021\065\022\054\023\044\024\052\027\177\030\u0148" +
    "\041\066\056\056\057\046\060\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\022" +
    "\013\060\016\176\017\064\021\065\022\054\023\044\024" +
    "\052\027\177\030\u014c\041\066\056\056\057\046\060\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\100\033\u0156\034\107" +
    "\035\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\100\033\u0155\034\107\035\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\100\033\u0158\034\107\035\101\001\001\000\002\001\001" +
    "\000\014\006\022\007\u015a\010\017\011\023\041\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u015f\006\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\022\013\060" +
    "\014\u0162\015\042\016\047\017\064\021\065\022\054\023" +
    "\044\024\052\041\066\056\056\057\046\060\043\001\001" +
    "\000\002\001\001\000\014\006\022\007\u0164\010\017\011" +
    "\023\041\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\022\013\060\014\u0167\015\042\016\047\017" +
    "\064\021\065\022\054\023\044\024\052\041\066\056\056" +
    "\057\046\060\043\001\001\000\002\001\001\000\014\006" +
    "\022\007\u0169\010\017\011\023\041\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$javacup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$javacup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$javacup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Controlador_ controlador=new Controlador_();
    public ErrorClass errores;
     public ClasesJava java=new ClasesJava();
    public ArrayList<VariableDeclaracion> variablesDeclar=new ArrayList();
    public ArrayList<metodos> constructores=new ArrayList();

    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
     this.errores.AddError(1,s.left,s.right,s.value.toString());
    }
    public void syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
        this.errores.AddError(1,s.left,s.right,s.value.toString());

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$javacup$actions {
  private final javacup parser;

  /** Constructor */
  CUP$javacup$actions(javacup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$javacup$do_action_part00000000(
    int                        CUP$javacup$act_num,
    java_cup.runtime.lr_parser CUP$javacup$parser,
    java.util.Stack            CUP$javacup$stack,
    int                        CUP$javacup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$javacup$result;

      /* select the action based on the action number */
      switch (CUP$javacup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT = start_val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$javacup$parser.done_parsing();
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases PY 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PY 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clases ::= error clase 
            {
              Object RESULT =null;
		


              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clase ::= PUBLIC CLASS ID AC metodos CC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<metodos> datos = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		stringJavaClass=id;
  try{
    datos.forEach((x)->{
      x.string="JAVA_"+id+"_";
      x.validateSTRING();
    });
  }catch (Exception ex){}
              try{
                this.parser.constructores.forEach((x)->{
                  x.string="JAVA_constru_"+id+"_";
                  x.validateSTRING();
                });
              }catch (Exception ex){}

              Controlador_.verifyConstruc(this.parser.constructores,this.parser.errores,id);
  Controlador_.verifyMetodos(datos,this.parser.errores);
  //MetodosVisual.clasesJava=this.parser.java;
  this.parser.java.add(id,idleft,idright,datos,this.parser.constructores,this.parser.variablesDeclar);
  int tamaño=this.parser.variablesDeclar.size();
  int prev= SymTable.celdas.size()-tamaño;
  SymTable.celda celda=new SymTable.celda(20,false,0,-1,-1,id,-1);
  SymTable.celdas.add((prev),celda);
  int tamañoPrevio=SymTable.celdas.size();
  //celda.POS_MEMORIA=this.parser.constructores.size()+datos.size()+this.parser.variablesDeclar.size();
              for (int i = MetodosVisual.instrucciones.size()-1; i >=0 ; i--) {
                Cuadruplas tmp=MetodosVisual.instrucciones.get(i);
                if(tmp.TIPO==15 && tmp.ARG1.isEmpty()){
                  tmp.ARG1=id;
                }
              }
   if(!this.parser.variablesDeclar.isEmpty()){
		  this.parser.variablesDeclar.stream()
                  .forEach((x)->{
                    x.globalVar=1;
                  });
        }
        Controlador_.add=false;
		Controlador_.verifyArgs(this.parser.variablesDeclar, this.parser.errores);

        datos.stream()
                .forEach((x)->{
                  x.string="JAVA_"+id+"_";
                  x.errores=this.parser.errores;
                  x.addVars(this.parser.variablesDeclar);
                  x.validate();
                  x.argumentos.removeAll(this.parser.variablesDeclar);

                });
               if(this.parser.constructores!=null){
                 this.parser.constructores.stream()
                         .forEach((x)->{
                           x.errores=this.parser.errores;
                           if(this.parser.variablesDeclar!=null){
                             if(!this.parser.variablesDeclar.isEmpty()){
                               x.addVars(this.parser.variablesDeclar);
                             }
                           }

                           x.string="JAVA_constru_"+x.ID+"_";

                           x.validate();
                           try{
                             x.argumentos.removeAll(this.parser.variablesDeclar);
                           }catch (Exception ex){}

                         });
               }
              MetodosVisual.search(id);
              //MetodosVisual.add("class ",id,"","",9);

   celda.POS_MEMORIA=this.parser.variablesDeclar.size();
this.parser.variablesDeclar=new ArrayList();
this.parser.constructores=new ArrayList<>();



              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clase",2, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodos ::= PUBLIC ID AP argumentos CP AC datos CC 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // metodos ::= PUBLIC ID AP CP AC datos CC 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=new ArrayList();

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodos ::= PUBLIC ID AP argumentos CP AC datos CC metodos 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // metodos ::= PUBLIC ID AP CP AC datos CC metodos 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // metodos ::= declaracion_var PUNTOCOMA metodos 
            {
              ArrayList<metodos> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion list = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
           if(this.parser.variablesDeclar.isEmpty()){
                MetodosVisual.add("class","","","",15);
              }
  list.errores=this.parser.errores;
                try {
                  list.variables
                          .forEach((var)->{
                            var.ID="this."+var.ID;
                          });
                }catch (Exception ex){}
              list.initDatas(this.parser.variablesDeclar);
              list.validate(false);
list.variables.removeAll(this.parser.variablesDeclar);
this.parser.variablesDeclar.addAll(list.variables);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodos ::= declaracion_var PUNTOCOMA 
            {
              ArrayList<metodos> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion list = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
           if(this.parser.variablesDeclar.isEmpty()){
                MetodosVisual.add("class","","","",15);
              }
  list.errores=this.parser.errores;
                try {
                  list.variables
                          .forEach((var)->{
                            var.ID="this."+var.ID;
                          });
                }catch (Exception ex){}
              list.initDatas(this.parser.variablesDeclar);
              list.validate(false);
 list.variables.removeAll(this.parser.variablesDeclar);
this.parser.variablesDeclar.addAll(list.variables);

RESULT=new ArrayList();

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= funcion metodos 
            {
              ArrayList<metodos> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		metodos d = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
x.add(d);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= procedimiento metodos 
            {
              ArrayList<metodos> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		metodos d = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
x.add(d);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= procedimiento 
            {
              ArrayList<metodos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
RESULT=new ArrayList();
RESULT.add(metodo);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= funcion 
            {
              ArrayList<metodos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
RESULT=new ArrayList();
RESULT.add(metodo);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= error funcion 
            {
              ArrayList<metodos> RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= error procedimiento 
            {
              ArrayList<metodos> RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= PUBLIC tipos ID AP argumentos CP AC datos2 CC 
            {
              metodos RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= PUBLIC tipos ID AP CP AC datos2 CC 
            {
              metodos RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedimiento ::= PUBLIC VOID ID AP argumentos CP AC datos CC 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("procedimiento",7, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedimiento ::= PUBLIC VOID ID AP CP AC datos CC 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("procedimiento",7, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datos2 ::= 
            {
              ambito_ RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos2",22, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datos2 ::= instrucciones_fun 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=am;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos2",22, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datos ::= 
            {
              ambito_ RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datos ::= instrucciones 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=am;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones ::= instrucciones instruccion 
            {
              ambito_ RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
val.add(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones ::= instruccion 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		

try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones_fun ::= instruccion instrucciones_fun 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
val.addIndex(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",21, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones_fun ::= instruccion 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",21, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones_fun ::= RETURN e PUNTOCOMA 
            {
              ambito_ RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
ambito_ am=new ambito_(val,x1left,x1right);
RESULT=am;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",21, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$0 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= asignacion_var NT$0 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= declaracion_var NT$1 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= if_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= while_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= dowhile_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= for_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= switch_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= input_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= print_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		System.out.println(";");
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= error CP 
            {
              Instruccion RESULT =null;
		System.out.println("cp");
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= call_fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos ::= INT 
            {
              Integer RESULT =null;
		RESULT=1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipos ::= DOUBLE 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipos ::= CHAR 
            {
              Integer RESULT =null;
		RESULT=2;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argumentos ::= argumentos COMA tipos ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
list.add(new VariableDeclaracion(id,idleft,idright,t1,false));
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argumentos ::= tipos ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,t1,false));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_var ::= ID EQUALS e 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,nodo,idleft,idright);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_var ::= ID EQUALS input_var 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion input = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,input,idleft,idright);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_var ::= error e 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion_var ::= error input_var 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_var ::= tipos variables 
            {
              Instruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declaracion_var",31, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variables ::= variables COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variables ::= variables COMA ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variables ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variables ::= ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variables ::= error e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al declarar una variable, verifique que la asignacion sea correcta");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_var ::= IF AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_if(am,bool);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",15, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_var ::= IF AP boolean CP AC datos2 CC ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_if(bool,am,null,new instr_if(v));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",15, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_var ::= IF AP boolean CP AC datos2 CC else_var 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new instr_if(bool,am,list,null);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",15, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_var ::= IF AP boolean CP AC datos2 CC else_var ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-9)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_if(bool,am,list,new instr_if(v));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",15, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-11)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_var ::= else_var ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int instr_ifsleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int instr_ifsright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		ArrayList<instr_if> instr_ifs = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
 try{
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

 
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("else_var",14, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_var ::= ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
  try{
  ArrayList<instr_if> instr_ifs=new ArrayList();;
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

  
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("else_var",14, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_var ::= WHILE AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_while(am,bool);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("while_var",16, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dowhile_var ::= DO AC datos2 CC WHILE AP boolean CP 
            {
              Instruccion RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
 try{
  RESULT=new instr_dowhile(am,bool);
 }catch(Exception e){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("dowhile_var",17, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for_var ::= FOR AP ID PUNTOCOMA ID OP e PUNTOCOMA ID EQUALS e CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-12)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-10)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoAritmetica t3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_for_java(id,null,t2,t3,-1,am,idleft,idright,id2,id2left,id2right,id3,id3left,id3right);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("for_var",18, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // for_var ::= FOR AP tipos ID EQUALS e PUNTOCOMA ID OP e PUNTOCOMA ID EQUALS e CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-15)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-14)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-12)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-10)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoAritmetica t3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_for_java(id,t1,t2,t3,t,am,idleft,idright,id2,id2left,id2right,id3,id3left,id3right);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("for_var",18, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-17)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typeOp ::= SUM 
            {
              String RESULT =null;
		RESULT="+";
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("typeOp",19, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typeOp ::= RES 
            {
              String RESULT =null;
		RESULT="-";
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("typeOp",19, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declarateVar ::= ID 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",20, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarateVar ::= ID EQUALS e 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[4]=nodo;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",20, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarateVar ::= tipos ID EQUALS e 
            {
              Object[] RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[3]=t1;
obj[4]=nodo;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",20, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_var ::= SWITCH AP ID CP AC cases CC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new switch_var(id,list,idleft,idright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("switch_var",44, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cases ::= cases case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
list.add(caso);
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",41, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cases ::= case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
ArrayList<Sub_case> list=new ArrayList();
list.add(caso);
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",41, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cases ::= error case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error en un caso de la sentencia switch");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",41, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // case_ ::= CASE e_ BOTHPOINT datos break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Variable var=val.variable;
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(var,valleft,valright,am,1,false,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(var,valleft,valright,am,2,false,null);
 }
}else{
     RESULT=new Sub_case(var,valleft,valright,am,-1,false,null);
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("case_",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_ ::= DEFAULT BOTHPOINT datos break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
 if(br!=null){
  if(br[1]!=null){
      RESULT=new Sub_case(null,valleft,valright,am,1,true,(NodoAritmetica)br[1]);
  }else{
      RESULT=new Sub_case(null,valleft,valright,am,2,true,null);
  }
 }else{
      RESULT=new Sub_case(null,valleft,valright,am,-1,true,null);
 }
 
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("case_",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // break_case ::= BREAK PUNTOCOMA 
            {
              Object[] RESULT =null;
		
Object b[]=new Object[2];
b[0]=2;
RESULT=b;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",42, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // break_case ::= RETURN e PUNTOCOMA 
            {
              Object[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica x = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
Object b[]=new Object[2];
b[0]=1;
b[1]=x;
RESULT=b;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",42, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // break_case ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",42, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // datos_ ::= e YYYY 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica cd = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos_",47, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // datos_ ::= CADENA XXXX 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos_",47, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // XXXX ::= SUM datos_ 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=d;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("XXXX",48, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // XXXX ::= 
            {
              ArrayList<argumento_dato> RESULT =null;
		RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("XXXX",48, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // YYYY ::= SUM CADENA XXXX 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("YYYY",49, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // YYYY ::= 
            {
              ArrayList<argumento_dato> RESULT =null;
		RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("YYYY",49, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // print_var ::= PRINTLN AP datos_ CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_print(datos,true);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // print_var ::= PRINTLN AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(true);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // print_var ::= PRINT AP datos_ CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_print(datos,false);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // print_var ::= PRINT AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(false);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // input_var ::= INPUTI AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,1,"e",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // input_var ::= INPUTD AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,0,"r",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // input_var ::= INPUTC AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,1,"c",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // input_var ::= INPUTI AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(1,"e",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // input_var ::= INPUTD AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(0,"r",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // input_var ::= INPUTC AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(1,"c",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=val1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // f ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // f ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // f ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // e_ ::= e_ SUM t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("+",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // e_ ::= e_ RES t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("-",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // e_ ::= t_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // t_ ::= t_ MUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("*",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // t_ ::= t_ DIV f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("/",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // t_ ::= f_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // t_ ::= t_ MODUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("%",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // f_ ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // f_ ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // f_ ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // f_ ::= AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=val1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // f_ ::= RES AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // f_ ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // f_ ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // boolean ::= boolean AND b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("boolean",40, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=v1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("boolean",40, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // b ::= b OR c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("b",38, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=v1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("b",38, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
            this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
            this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
             this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
    }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }
}
RESULT=v1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // c ::= NOT AP boolean CP 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=v1;
RESULT.canAdd=false;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // z ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // y ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ff1 ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ff1 ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ff1 ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // call_fun ::= ID AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		
call_c call=new call_c(0,id,idleft,idright);
RESULT=call;
call.tipoMetodo=2;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("call_fun",9, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // call_fun ::= ID AP argumentos_function CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
call_c call=new call_c(0,id,idleft,idright,list);
RESULT=call;
call.tipoMetodo=2;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("call_fun",9, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // argumentos_function ::= argumentos_function COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos_function",8, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // argumentos_function ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos_function",8, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$javacup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$javacup$do_action(
    int                        CUP$javacup$act_num,
    java_cup.runtime.lr_parser CUP$javacup$parser,
    java.util.Stack            CUP$javacup$stack,
    int                        CUP$javacup$top)
    throws java.lang.Exception
    {
              return CUP$javacup$do_action_part00000000(
                               CUP$javacup$act_num,
                               CUP$javacup$parser,
                               CUP$javacup$stack,
                               CUP$javacup$top);
    }
}

}
