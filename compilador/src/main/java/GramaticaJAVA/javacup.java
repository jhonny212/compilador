
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaJAVA;

import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import Lenguajes.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class javacup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public javacup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public javacup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public javacup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\010\000\002\007\012\000\002\007\011\000" +
    "\002\007\013\000\002\007\012\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\010\013\000\002\010\012\000\002\011\013\000" +
    "\002\011\012\000\002\026\002\000\002\026\003\000\002" +
    "\012\002\000\002\012\003\000\002\013\004\000\002\013" +
    "\003\000\002\025\004\000\002\025\003\000\002\025\005" +
    "\000\002\062\002\000\002\014\005\000\002\063\002\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\005\006\000\002\005\004\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\015\004\000\002\037" +
    "\004\000\002\040\005\000\002\040\007\000\002\040\003" +
    "\000\002\040\005\000\002\040\004\000\002\017\011\000" +
    "\002\017\015\000\002\017\012\000\002\017\016\000\002" +
    "\016\013\000\002\016\012\000\002\020\011\000\002\021" +
    "\012\000\002\022\021\000\002\022\024\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\006\000\002\054\011\000\002\051\004\000\002" +
    "\051\003\000\002\051\004\000\002\053\007\000\002\053" +
    "\006\000\002\052\004\000\002\052\005\000\002\052\002" +
    "\000\002\057\004\000\002\057\004\000\002\060\004\000" +
    "\002\060\002\000\002\061\005\000\002\061\002\000\002" +
    "\056\006\000\002\056\005\000\002\056\006\000\002\056" +
    "\005\000\002\055\006\000\002\055\006\000\002\055\006" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\032" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\006\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\036" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\006\000\002\050\005\000" +
    "\002\050\003\000\002\046\005\000\002\046\003\000\002" +
    "\047\004\000\002\047\007\000\002\047\006\000\002\044" +
    "\002\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\045\002\000" +
    "\002\045\004\000\002\045\004\000\002\041\005\000\002" +
    "\041\005\000\002\041\003\000\002\042\005\000\002\042" +
    "\005\000\002\042\003\000\002\042\005\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\010\003\004\004\007\041\005\001\002\000" +
    "\004\004\007\001\002\000\004\002\uffff\001\002\000\006" +
    "\004\007\041\u0159\001\002\000\004\005\013\001\002\000" +
    "\004\002\012\001\002\000\006\004\ufffd\041\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\017\014\001\002\000" +
    "\004\010\015\001\002\000\014\003\026\004\017\014\016" +
    "\015\025\016\027\001\002\000\006\003\uffd4\017\uffd4\001" +
    "\002\000\014\012\034\014\016\015\025\016\027\017\u014c" +
    "\001\002\000\016\003\026\004\017\011\ufff1\014\016\015" +
    "\025\016\027\001\002\000\004\011\u014a\001\002\000\006" +
    "\003\u0141\017\u0140\001\002\000\004\021\u013e\001\002\000" +
    "\016\003\026\004\017\011\ufff2\014\016\015\025\016\027" +
    "\001\002\000\006\003\uffd3\017\uffd3\001\002\000\004\004" +
    "\032\001\002\000\006\003\uffd2\017\uffd2\001\002\000\004" +
    "\011\uffef\001\002\000\004\011\ufff0\001\002\000\012\012" +
    "\034\014\016\015\025\016\027\001\002\000\004\017\u0132" +
    "\001\002\000\004\017\035\001\002\000\004\006\036\001" +
    "\002\000\012\007\041\014\016\015\025\016\027\001\002" +
    "\000\006\007\u012c\023\u012b\001\002\000\004\017\u012a\001" +
    "\002\000\004\010\042\001\002\000\042\003\063\011\uffe8" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\070\032\056\034\067\035\072\036\071\037\062\040\060" +
    "\054\051\001\002\000\052\003\063\011\uffe7\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\070\032\056" +
    "\033\uffe7\034\067\035\072\036\071\037\062\040\060\053" +
    "\uffe7\054\051\055\uffe7\056\uffe7\001\002\000\004\021\u0128" +
    "\001\002\000\004\021\u0127\001\002\000\004\006\u0121\001" +
    "\002\000\004\021\u0120\001\002\000\052\003\uffe5\011\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\025\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000" +
    "\004\006\362\001\002\000\004\006\325\001\002\000\052" +
    "\003\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda\025" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\004\022\322\001\002\000\052\003\uffdc" +
    "\011\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\025\uffdc\027" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\001" +
    "\002\000\004\010\234\001\002\000\052\003\uffd9\011\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\025\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000" +
    "\004\006\230\001\002\000\004\011\227\001\002\000\004" +
    "\006\223\001\002\000\030\006\104\007\217\017\102\021" +
    "\222\034\067\035\072\036\071\042\077\043\103\044\105" +
    "\046\076\001\002\000\004\021\uffe1\001\002\000\052\003" +
    "\uffdd\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\025\uffdd" +
    "\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\001\002\000\004\021\uffdf\001\002\000\004\006\207\001" +
    "\002\000\004\006\143\001\002\000\004\006\137\001\002" +
    "\000\004\006\073\001\002\000\022\006\104\007\075\017" +
    "\102\020\074\042\077\043\103\044\105\046\076\001\002" +
    "\000\006\007\uffaa\045\130\001\002\000\004\021\uff9e\001" +
    "\002\000\004\006\133\001\002\000\032\007\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\026\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\001\002\000\032\007\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\001\002\000\010" +
    "\007\uffa8\045\125\046\120\001\002\000\032\007\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\026\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\001\002\000\032\007" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\001\002\000" +
    "\016\006\104\017\102\042\077\043\103\044\105\046\076" +
    "\001\002\000\032\007\uff94\021\uff94\022\uff94\023\uff94\024" +
    "\uff94\026\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\001\002\000\032\007\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\026\uff9b\045\uff9b\046\uff9b\047\112\050\113" +
    "\051\111\052\uff9b\001\002\000\004\007\110\001\002\000" +
    "\004\021\uffa1\001\002\000\016\006\104\017\102\042\077" +
    "\043\103\044\105\046\076\001\002\000\016\006\104\017" +
    "\102\042\077\043\103\044\105\046\076\001\002\000\016" +
    "\006\104\017\102\042\077\043\103\044\105\046\076\001" +
    "\002\000\032\007\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\026\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\001\002\000\032\007\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\026\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\001\002\000\032\007\uff97\021\uff97\022\uff97" +
    "\023\uff97\024\uff97\026\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\001\002\000\010\007\122\045\121" +
    "\046\120\001\002\000\016\006\104\017\102\042\077\043" +
    "\103\044\105\046\076\001\002\000\016\006\104\017\102" +
    "\042\077\043\103\044\105\046\076\001\002\000\032\007" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\001\002\000" +
    "\032\007\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d" +
    "\045\uff9d\046\uff9d\047\112\050\113\051\111\052\uff9d\001" +
    "\002\000\032\007\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\026\uff9c\045\uff9c\046\uff9c\047\112\050\113\051\111\052" +
    "\uff9c\001\002\000\020\006\104\017\102\020\127\042\077" +
    "\043\103\044\105\046\076\001\002\000\004\007\uffad\001" +
    "\002\000\006\007\uffaa\045\130\001\002\000\020\006\104" +
    "\017\102\020\074\042\077\043\103\044\105\046\076\001" +
    "\002\000\004\007\uffa9\001\002\000\004\007\uffab\001\002" +
    "\000\016\006\104\017\102\042\077\043\103\044\105\046" +
    "\076\001\002\000\010\007\135\045\121\046\120\001\002" +
    "\000\032\007\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\001\002\000\004\007\uffac\001\002\000\022\006\104\007" +
    "\140\017\102\020\074\042\077\043\103\044\105\046\076" +
    "\001\002\000\004\021\uff9f\001\002\000\004\007\142\001" +
    "\002\000\004\021\uffa2\001\002\000\012\014\016\015\025" +
    "\016\027\017\144\001\002\000\004\021\173\001\002\000" +
    "\004\017\146\001\002\000\004\022\147\001\002\000\016" +
    "\006\104\017\102\042\077\043\103\044\105\046\076\001" +
    "\002\000\010\021\151\045\121\046\120\001\002\000\004" +
    "\017\152\001\002\000\004\052\153\001\002\000\016\006" +
    "\104\017\102\042\077\043\103\044\105\046\076\001\002" +
    "\000\010\021\155\045\121\046\120\001\002\000\004\017" +
    "\156\001\002\000\004\022\157\001\002\000\016\006\104" +
    "\017\102\042\077\043\103\044\105\046\076\001\002\000" +
    "\010\007\161\045\121\046\120\001\002\000\004\010\162" +
    "\001\002\000\044\003\063\011\uffea\014\016\015\025\016" +
    "\027\017\054\025\052\027\046\031\070\032\056\033\163" +
    "\034\067\035\072\036\071\037\062\040\060\054\051\001" +
    "\002\000\016\006\104\017\102\042\077\043\103\044\105" +
    "\046\076\001\002\000\044\003\063\011\uffe3\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\070\032\056" +
    "\033\163\034\067\035\072\036\071\037\062\040\060\054" +
    "\051\001\002\000\004\011\uffe9\001\002\000\004\011\167" +
    "\001\002\000\052\003\uffbc\011\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\025\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\004\011\uffe4\001\002" +
    "\000\010\021\172\045\121\046\120\001\002\000\004\011" +
    "\uffe2\001\002\000\004\017\174\001\002\000\004\052\175" +
    "\001\002\000\016\006\104\017\102\042\077\043\103\044" +
    "\105\046\076\001\002\000\010\021\177\045\121\046\120" +
    "\001\002\000\004\017\200\001\002\000\004\022\201\001" +
    "\002\000\016\006\104\017\102\042\077\043\103\044\105" +
    "\046\076\001\002\000\010\007\203\045\121\046\120\001" +
    "\002\000\004\010\204\001\002\000\044\003\063\011\uffea" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\070\032\056\033\163\034\067\035\072\036\071\037\062" +
    "\040\060\054\051\001\002\000\004\011\206\001\002\000" +
    "\052\003\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\025\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\001\002\000\022\006\104\007\210\017\102\020" +
    "\074\042\077\043\103\044\105\046\076\001\002\000\004" +
    "\021\uffa0\001\002\000\004\007\212\001\002\000\004\021" +
    "\uffa3\001\002\000\004\021\214\001\002\000\052\003\uffde" +
    "\011\uffde\014\uffde\015\uffde\016\uffde\017\uffde\025\uffde\027" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\053\uffde\054\uffde\055\uffde\056\uffde\001" +
    "\002\000\004\021\216\001\002\000\052\003\uffe0\011\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\025\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000" +
    "\052\003\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\025\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\001\002\000\004\021\uffcc\001\002\000\010\021" +
    "\uffcd\045\121\046\120\001\002\000\052\003\uffd6\011\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\025\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002\000" +
    "\022\006\104\007\224\017\102\020\074\042\077\043\103" +
    "\044\105\046\076\001\002\000\004\021\uffa4\001\002\000" +
    "\004\007\226\001\002\000\004\021\uffa5\001\002\000\016" +
    "\003\uffeb\004\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb\001" +
    "\002\000\022\006\104\007\231\017\102\020\074\042\077" +
    "\043\103\044\105\046\076\001\002\000\004\021\uffa6\001" +
    "\002\000\004\007\233\001\002\000\004\021\uffa7\001\002" +
    "\000\044\003\063\011\uffea\014\016\015\025\016\027\017" +
    "\054\025\052\027\046\031\070\032\056\033\163\034\067" +
    "\035\072\036\071\037\062\040\060\054\051\001\002\000" +
    "\004\011\236\001\002\000\004\027\237\001\002\000\004" +
    "\006\240\001\002\000\016\006\252\013\251\017\243\042" +
    "\241\043\245\044\253\001\002\000\026\007\uff6a\022\uff6a" +
    "\024\uff6a\026\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\001\002\000\026\007\uff6f\022\uff6f\024\uff6f" +
    "\026\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\001\002\000\026\007\uff6d\022\uff6d\024\uff6d\026\uff6d" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\001" +
    "\002\000\010\007\uff81\024\uff81\026\uff81\001\002\000\026" +
    "\007\uff6c\022\uff6c\024\uff6c\026\uff6c\045\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\001\002\000\020\007\uff77" +
    "\022\273\024\uff77\026\uff77\045\316\046\315\052\272\001" +
    "\002\000\026\007\uff72\022\uff72\024\uff72\026\uff72\045\uff72" +
    "\046\uff72\047\310\050\311\051\307\052\uff72\001\002\000" +
    "\010\007\uff83\024\uff83\026\260\001\002\000\004\006\304" +
    "\001\002\000\016\006\252\013\251\017\243\042\241\043" +
    "\245\044\253\001\002\000\026\007\uff6b\022\uff6b\024\uff6b" +
    "\026\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\001\002\000\006\007\256\024\255\001\002\000\016" +
    "\006\252\013\251\017\243\042\241\043\245\044\253\001" +
    "\002\000\004\021\uffbe\001\002\000\010\007\uff84\024\uff84" +
    "\026\260\001\002\000\016\006\252\013\251\017\243\042" +
    "\241\043\245\044\253\001\002\000\010\007\uff82\024\uff82" +
    "\026\uff82\001\002\000\006\007\263\024\255\001\002\000" +
    "\026\007\uff7d\022\uff7d\024\uff7d\026\uff7d\045\265\046\264" +
    "\047\267\050\270\051\266\052\uff7d\001\002\000\016\006" +
    "\104\017\102\042\077\043\103\044\105\046\076\001\002" +
    "\000\016\006\104\017\102\042\077\043\103\044\105\046" +
    "\076\001\002\000\016\006\104\017\102\042\077\043\103" +
    "\044\105\046\076\001\002\000\016\006\104\017\102\042" +
    "\077\043\103\044\105\046\076\001\002\000\016\006\104" +
    "\017\102\042\077\043\103\044\105\046\076\001\002\000" +
    "\014\007\uff77\022\273\024\uff77\026\uff77\052\272\001\002" +
    "\000\016\006\104\017\102\042\077\043\103\044\105\046" +
    "\076\001\002\000\016\006\104\017\102\042\077\043\103" +
    "\044\105\046\076\001\002\000\010\007\uff7f\024\uff7f\026" +
    "\uff7f\001\002\000\014\007\uff75\024\uff75\026\uff75\045\121" +
    "\046\120\001\002\000\014\007\uff76\024\uff76\026\uff76\045" +
    "\121\046\120\001\002\000\020\007\uff79\022\uff79\024\uff79" +
    "\026\uff79\045\121\046\120\052\uff79\001\002\000\020\007" +
    "\uff7a\022\uff7a\024\uff7a\026\uff7a\045\121\046\120\052\uff7a" +
    "\001\002\000\020\007\uff78\022\uff78\024\uff78\026\uff78\045" +
    "\121\046\120\052\uff78\001\002\000\020\007\uff7c\022\uff7c" +
    "\024\uff7c\026\uff7c\045\121\046\120\052\uff7c\001\002\000" +
    "\020\007\uff7b\022\uff7b\024\uff7b\026\uff7b\045\121\046\120" +
    "\052\uff7b\001\002\000\016\006\252\013\251\017\243\042" +
    "\241\043\245\044\253\001\002\000\006\007\306\024\255" +
    "\001\002\000\010\007\uff7e\024\uff7e\026\uff7e\001\002\000" +
    "\016\006\104\017\102\042\077\043\103\044\105\046\076" +
    "\001\002\000\016\006\104\017\102\042\077\043\103\044" +
    "\105\046\076\001\002\000\016\006\104\017\102\042\077" +
    "\043\103\044\105\046\076\001\002\000\026\007\uff70\022" +
    "\uff70\024\uff70\026\uff70\045\uff70\046\uff70\047\uff70\050\uff70" +
    "\051\uff70\052\uff70\001\002\000\026\007\uff71\022\uff71\024" +
    "\uff71\026\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71" +
    "\052\uff71\001\002\000\026\007\uff6e\022\uff6e\024\uff6e\026" +
    "\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e" +
    "\001\002\000\016\006\104\017\102\042\077\043\103\044" +
    "\105\046\076\001\002\000\016\006\104\017\102\042\077" +
    "\043\103\044\105\046\076\001\002\000\010\007\uff80\024" +
    "\uff80\026\uff80\001\002\000\026\007\uff74\022\uff74\024\uff74" +
    "\026\uff74\045\uff74\046\uff74\047\112\050\113\051\111\052" +
    "\uff74\001\002\000\026\007\uff73\022\uff73\024\uff73\026\uff73" +
    "\045\uff73\046\uff73\047\112\050\113\051\111\052\uff73\001" +
    "\002\000\024\006\104\017\102\034\067\035\072\036\071" +
    "\042\077\043\103\044\105\046\076\001\002\000\004\021" +
    "\uffce\001\002\000\010\021\uffcf\045\121\046\120\001\002" +
    "\000\016\006\252\013\251\017\243\042\241\043\245\044" +
    "\253\001\002\000\006\007\327\024\255\001\002\000\004" +
    "\010\330\001\002\000\044\003\063\011\uffea\014\016\015" +
    "\025\016\027\017\054\025\052\027\046\031\070\032\056" +
    "\033\163\034\067\035\072\036\071\037\062\040\060\054" +
    "\051\001\002\000\004\011\332\001\002\000\054\003\uffc5" +
    "\011\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\025\uffc5\027" +
    "\uffc5\030\333\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\006\010\350\025\351\001\002\000\054" +
    "\003\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\025" +
    "\uffc3\027\uffc3\030\335\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\006\010\336\025\337\001\002" +
    "\000\044\003\063\011\uffea\014\016\015\025\016\027\017" +
    "\054\025\052\027\046\031\070\032\056\033\163\034\067" +
    "\035\072\036\071\037\062\040\060\054\051\001\002\000" +
    "\004\006\340\001\002\000\016\006\252\013\251\017\243" +
    "\042\241\043\245\044\253\001\002\000\006\007\342\024" +
    "\255\001\002\000\004\010\343\001\002\000\044\003\063" +
    "\011\uffea\014\016\015\025\016\027\017\054\025\052\027" +
    "\046\031\070\032\056\033\163\034\067\035\072\036\071" +
    "\037\062\040\060\054\051\001\002\000\004\011\345\001" +
    "\002\000\054\003\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\001\002\000\004\011\347\001" +
    "\002\000\052\003\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\025\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\044\003\063\011\uffea\014" +
    "\016\015\025\016\027\017\054\025\052\027\046\031\070" +
    "\032\056\033\163\034\067\035\072\036\071\037\062\040" +
    "\060\054\051\001\002\000\004\006\352\001\002\000\016" +
    "\006\252\013\251\017\243\042\241\043\245\044\253\001" +
    "\002\000\006\007\354\024\255\001\002\000\004\010\355" +
    "\001\002\000\044\003\063\011\uffea\014\016\015\025\016" +
    "\027\017\054\025\052\027\046\031\070\032\056\033\163" +
    "\034\067\035\072\036\071\037\062\040\060\054\051\001" +
    "\002\000\004\011\357\001\002\000\054\003\uffc0\011\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\025\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\001" +
    "\002\000\004\011\361\001\002\000\052\003\uffc4\011\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\025\uffc4\027\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000" +
    "\004\017\363\001\002\000\004\007\364\001\002\000\004" +
    "\010\365\001\002\000\010\003\367\053\366\055\372\001" +
    "\002\000\004\057\u011d\001\002\000\006\053\366\055\372" +
    "\001\002\000\010\011\uffb4\053\uffb4\055\uffb4\001\002\000" +
    "\010\011\u011a\053\366\055\372\001\002\000\014\006\376" +
    "\042\u0102\043\375\044\u0100\046\373\001\002\000\004\006" +
    "\u0117\001\002\000\020\007\uff8e\045\uff8e\046\uff8e\047\u010f" +
    "\050\u0110\051\u010e\057\uff8e\001\002\000\020\007\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\057\uff89\001\002" +
    "\000\014\006\376\042\u0102\043\375\044\u0100\046\373\001" +
    "\002\000\010\045\u0104\046\u0103\057\u0105\001\002\000\020" +
    "\007\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\057" +
    "\uff88\001\002\000\020\007\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\057\uff8b\001\002\000\020\007\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\057\uff87\001\002" +
    "\000\014\006\376\042\u0102\043\375\044\u0100\046\373\001" +
    "\002\000\014\006\376\042\u0102\043\375\044\u0100\046\373" +
    "\001\002\000\052\003\063\011\uffe8\014\016\015\025\016" +
    "\027\017\054\025\052\027\046\031\070\032\056\033\uffe8" +
    "\034\067\035\072\036\071\037\062\040\060\053\uffe8\054" +
    "\051\055\uffe8\056\uffe8\001\002\000\014\011\uffae\033\u0108" +
    "\053\uffae\055\uffae\056\u0109\001\002\000\010\011\uffb2\053" +
    "\uffb2\055\uffb2\001\002\000\016\006\104\017\102\042\077" +
    "\043\103\044\105\046\076\001\002\000\004\021\u010a\001" +
    "\002\000\010\011\uffb0\053\uffb0\055\uffb0\001\002\000\010" +
    "\021\u010c\045\121\046\120\001\002\000\010\011\uffaf\053" +
    "\uffaf\055\uffaf\001\002\000\020\007\uff90\045\uff90\046\uff90" +
    "\047\u010f\050\u0110\051\u010e\057\uff90\001\002\000\014\006" +
    "\376\042\u0102\043\375\044\u0100\046\373\001\002\000\014" +
    "\006\376\042\u0102\043\375\044\u0100\046\373\001\002\000" +
    "\014\006\376\042\u0102\043\375\044\u0100\046\373\001\002" +
    "\000\020\007\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\057\uff8c\001\002\000\020\007\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\057\uff8d\001\002\000\020\007" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\057\uff8a" +
    "\001\002\000\020\007\uff8f\045\uff8f\046\uff8f\047\u010f\050" +
    "\u0110\051\u010e\057\uff8f\001\002\000\010\007\u0116\045\u0104" +
    "\046\u0103\001\002\000\020\007\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\057\uff86\001\002\000\014\006\376" +
    "\042\u0102\043\375\044\u0100\046\373\001\002\000\010\007" +
    "\u0119\045\u0104\046\u0103\001\002\000\020\007\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\057\uff85\001\002\000" +
    "\052\003\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\025\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\001\002\000\010\011\uffb5\053\uffb5\055\uffb5\001" +
    "\002\000\010\011\uffb3\053\uffb3\055\uffb3\001\002\000\052" +
    "\003\063\011\uffe8\014\016\015\025\016\027\017\054\025" +
    "\052\027\046\031\070\032\056\033\uffe8\034\067\035\072" +
    "\036\071\037\062\040\060\053\uffe8\054\051\055\uffe8\056" +
    "\uffe8\001\002\000\014\011\uffae\033\u0108\053\uffae\055\uffae" +
    "\056\u0109\001\002\000\010\011\uffb1\053\uffb1\055\uffb1\001" +
    "\002\000\052\003\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\025\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\001\002\000\016\006\252\013\251\017" +
    "\243\042\241\043\245\044\253\001\002\000\006\007\u0123" +
    "\024\255\001\002\000\004\010\u0124\001\002\000\044\003" +
    "\063\011\uffea\014\016\015\025\016\027\017\054\025\052" +
    "\027\046\031\070\032\056\033\163\034\067\035\072\036" +
    "\071\037\062\040\060\054\051\001\002\000\004\011\u0126" +
    "\001\002\000\052\003\uffbf\011\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\025\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\001\002\000\052\003\uffdb\011\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\025\uffdb\027\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000" +
    "\052\003\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\025\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\001\002\000\052\003\uffe6\011\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\025\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\006\007\uffd0" +
    "\023\uffd0\001\002\000\010\014\016\015\025\016\027\001" +
    "\002\000\004\010\u012d\001\002\000\042\003\063\011\uffe8" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\070\032\056\034\067\035\072\036\071\037\062\040\060" +
    "\054\051\001\002\000\004\011\u012f\001\002\000\016\003" +
    "\uffec\004\uffec\011\uffec\014\uffec\015\uffec\016\uffec\001\002" +
    "\000\004\017\u0131\001\002\000\006\007\uffd1\023\uffd1\001" +
    "\002\000\004\006\u0133\001\002\000\012\007\u0135\014\016" +
    "\015\025\016\027\001\002\000\006\007\u0139\023\u012b\001" +
    "\002\000\004\010\u0136\001\002\000\044\003\063\011\uffea" +
    "\014\016\015\025\016\027\017\054\025\052\027\046\031" +
    "\070\032\056\033\163\034\067\035\072\036\071\037\062" +
    "\040\060\054\051\001\002\000\004\011\u0138\001\002\000" +
    "\016\003\uffed\004\uffed\011\uffed\014\uffed\015\uffed\016\uffed" +
    "\001\002\000\004\010\u013a\001\002\000\044\003\063\011" +
    "\uffea\014\016\015\025\016\027\017\054\025\052\027\046" +
    "\031\070\032\056\033\163\034\067\035\072\036\071\037" +
    "\062\040\060\054\051\001\002\000\004\011\u013c\001\002" +
    "\000\016\003\uffee\004\uffee\011\uffee\014\uffee\015\uffee\016" +
    "\uffee\001\002\000\004\011\ufff3\001\002\000\016\003\026" +
    "\004\017\011\ufff5\014\016\015\025\016\027\001\002\000" +
    "\004\011\ufff6\001\002\000\010\021\uffc8\022\u0148\023\uffc8" +
    "\001\002\000\016\006\104\017\102\042\077\043\103\044" +
    "\105\046\076\001\002\000\006\021\uffcb\023\u0143\001\002" +
    "\000\004\017\u0144\001\002\000\010\021\uffca\022\u0145\023" +
    "\uffca\001\002\000\016\006\104\017\102\042\077\043\103" +
    "\044\105\046\076\001\002\000\012\021\uffc9\023\uffc9\045" +
    "\121\046\120\001\002\000\012\021\uffc6\023\uffc6\045\121" +
    "\046\120\001\002\000\016\006\104\017\102\042\077\043" +
    "\103\044\105\046\076\001\002\000\012\021\uffc7\023\uffc7" +
    "\045\121\046\120\001\002\000\006\004\ufffb\041\ufffb\001" +
    "\002\000\004\011\ufff4\001\002\000\004\006\u014d\001\002" +
    "\000\012\007\u014f\014\016\015\025\016\027\001\002\000" +
    "\006\007\u0154\023\u012b\001\002\000\004\010\u0150\001\002" +
    "\000\042\003\063\011\uffe8\014\016\015\025\016\027\017" +
    "\054\025\052\027\046\031\070\032\056\034\067\035\072" +
    "\036\071\037\062\040\060\054\051\001\002\000\004\011" +
    "\u0152\001\002\000\016\003\026\004\017\011\ufff9\014\016" +
    "\015\025\016\027\001\002\000\004\011\ufff7\001\002\000" +
    "\004\010\u0155\001\002\000\042\003\063\011\uffe8\014\016" +
    "\015\025\016\027\017\054\025\052\027\046\031\070\032" +
    "\056\034\067\035\072\036\071\037\062\040\060\054\051" +
    "\001\002\000\004\011\u0157\001\002\000\016\003\026\004" +
    "\017\011\ufffa\014\016\015\025\016\027\001\002\000\004" +
    "\011\ufff8\001\002\000\004\002\000\001\002\000\006\004" +
    "\ufffe\041\ufffe\001\002\000\006\004\ufffc\041\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\010\002\007\003\005\004\010\001\001\000" +
    "\004\004\u015a\001\001\000\002\001\001\000\004\004\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\021\007\020\010\017\011\023\037\022\001" +
    "\001\000\002\001\001\000\004\006\032\001\001\000\014" +
    "\006\021\007\u014a\010\017\011\023\037\022\001\001\000" +
    "\002\001\001\000\004\040\u0141\001\001\000\002\001\001" +
    "\000\014\006\021\007\u013c\010\017\011\023\037\022\001" +
    "\001\000\002\001\001\000\006\010\030\011\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\036\006\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\021\012\060\013\042\014\047\015\063\017\064\020" +
    "\054\021\044\022\052\037\065\054\056\055\046\056\043" +
    "\001\001\000\030\006\021\014\u0128\015\063\017\064\020" +
    "\054\021\044\022\052\037\065\054\056\055\046\056\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\220\032\105\033\077\055\217\001\001\000\004\062\214" +
    "\001\001\000\002\001\001\000\004\063\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\100\032\105\033\077\057\106\001" +
    "\001\000\004\060\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\116\032\105\033\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\115\001\001\000\004\033\114\001\001\000\004\033" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\123\033\077\001" +
    "\001\000\006\032\122\033\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\122\033" +
    "\077\001\001\000\002\001\001\000\004\060\130\001\001" +
    "\000\012\031\100\032\105\033\077\057\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\133\032\105" +
    "\033\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\100\032\105\033\077\057\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\147\032\105\033" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\153\032\105\033\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\157\032\105\033\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\021\014\163\015\063\017\064" +
    "\020\054\021\044\022\052\025\164\026\165\037\065\054" +
    "\056\055\046\056\043\001\001\000\010\031\170\032\105" +
    "\033\077\001\001\000\032\006\021\014\163\015\063\017" +
    "\064\020\054\021\044\022\052\025\167\037\065\054\056" +
    "\055\046\056\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\175\032\105\033\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\201\032" +
    "\105\033\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\021\014\163\015\063\017\064\020\054\021" +
    "\044\022\052\025\164\026\204\037\065\054\056\055\046" +
    "\056\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\100\032\105\033\077\057\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\100\032\105\033\077\057\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\100\032\105\033\077" +
    "\057\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\021\014\163\015\063\017\064" +
    "\020\054\021\044\022\052\025\164\026\234\037\065\054" +
    "\056\055\046\056\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\041\245\042\246\043" +
    "\241\046\247\047\243\050\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\041\245\042" +
    "\246\043\241\046\247\047\243\050\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\041\245\042\246\043" +
    "\241\046\256\047\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\041\245\042\246\043\241\047\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\270" +
    "\001\001\000\010\031\302\032\105\033\077\001\001\000" +
    "\010\031\301\032\105\033\077\001\001\000\010\031\300" +
    "\032\105\033\077\001\001\000\010\031\277\032\105\033" +
    "\077\001\001\000\010\031\276\032\105\033\077\001\001" +
    "\000\004\045\273\001\001\000\010\031\275\032\105\033" +
    "\077\001\001\000\010\031\274\032\105\033\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\041\245\042\246\043" +
    "\241\046\247\047\243\050\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\313\001\001\000\004\033" +
    "\312\001\001\000\004\033\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\320\033" +
    "\077\001\001\000\006\032\317\033\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\323\032\105\033\077\055\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\041\245\042\246\043\241\046" +
    "\247\047\243\050\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\021\014\163\015\063\017\064\020" +
    "\054\021\044\022\052\025\164\026\330\037\065\054\056" +
    "\055\046\056\043\001\001\000\002\001\001\000\004\016" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\021\014\163\015\063\017\064\020" +
    "\054\021\044\022\052\025\164\026\345\037\065\054\056" +
    "\055\046\056\043\001\001\000\002\001\001\000\016\041" +
    "\245\042\246\043\241\046\247\047\243\050\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\021\014" +
    "\163\015\063\017\064\020\054\021\044\022\052\025\164" +
    "\026\343\037\065\054\056\055\046\056\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\021\014\163\015\063\017\064\020" +
    "\054\021\044\022\052\025\164\026\357\037\065\054\056" +
    "\055\046\056\043\001\001\000\002\001\001\000\016\041" +
    "\245\042\246\043\241\046\247\047\243\050\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\021\014" +
    "\163\015\063\017\064\020\054\021\044\022\052\025\164" +
    "\026\355\037\065\054\056\055\046\056\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\370\053\367\001\001\000\002\001\001" +
    "\000\004\053\u011b\001\001\000\002\001\001\000\004\053" +
    "\u011a\001\001\000\010\034\376\035\u0100\036\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\u0114\035\u0100\036\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\u0100\036\u0113\001\001\000\006\035\u0100\036\u010c" +
    "\001\001\000\034\006\021\012\u0105\013\042\014\047\015" +
    "\063\017\064\020\054\021\044\022\052\037\065\054\056" +
    "\055\046\056\043\001\001\000\004\052\u0106\001\001\000" +
    "\002\001\001\000\010\031\u010a\032\105\033\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u0112\001\001" +
    "\000\004\035\u0111\001\001\000\004\035\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\u0117\035\u0100\036\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\021\012\u011d\013\042\014\047\015\063" +
    "\017\064\020\054\021\044\022\052\037\065\054\056\055" +
    "\046\056\043\001\001\000\004\052\u011e\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\041\245\042\246\043" +
    "\241\046\247\047\243\050\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\021\014\163\015\063\017" +
    "\064\020\054\021\044\022\052\025\164\026\u0124\037\065" +
    "\054\056\055\046\056\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u012f\001\001\000" +
    "\002\001\001\000\034\006\021\012\u012d\013\042\014\047" +
    "\015\063\017\064\020\054\021\044\022\052\037\065\054" +
    "\056\055\046\056\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\u0133\006\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\021\014\163\015\063\017" +
    "\064\020\054\021\044\022\052\025\164\026\u0136\037\065" +
    "\054\056\055\046\056\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\021\014\163" +
    "\015\063\017\064\020\054\021\044\022\052\025\164\026" +
    "\u013a\037\065\054\056\055\046\056\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\021\007\u013e\010\017\011\023\037\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\u0146\032\105\033" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\u0145\032\105\033\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\u0148\032\105" +
    "\033\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u014d\006\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\021\012\u0150\013\042\014\047\015\063\017\064\020\054" +
    "\021\044\022\052\037\065\054\056\055\046\056\043\001" +
    "\001\000\002\001\001\000\014\006\021\007\u0152\010\017" +
    "\011\023\037\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\021\012\u0155\013\042\014\047\015\063" +
    "\017\064\020\054\021\044\022\052\037\065\054\056\055" +
    "\046\056\043\001\001\000\002\001\001\000\014\006\021" +
    "\007\u0157\010\017\011\023\037\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$javacup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$javacup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$javacup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Controlador_ controlador=new Controlador_();
    public ErrorClass errores;
     public ClasesJava java=new ClasesJava();
    public ArrayList<VariableDeclaracion> variablesDeclar=new ArrayList();
    public ArrayList<metodos> constructores=new ArrayList();

    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
     this.errores.AddError(1,s.left,s.right,s.value.toString());
    }
    public void syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
        this.errores.AddError(1,s.left,s.right,s.value.toString());

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$javacup$actions {
  private final javacup parser;

  /** Constructor */
  CUP$javacup$actions(javacup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$javacup$do_action_part00000000(
    int                        CUP$javacup$act_num,
    java_cup.runtime.lr_parser CUP$javacup$parser,
    java.util.Stack            CUP$javacup$stack,
    int                        CUP$javacup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$javacup$result;

      /* select the action based on the action number */
      switch (CUP$javacup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT = start_val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$javacup$parser.done_parsing();
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases PY 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= PY 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clases ::= error clase 
            {
              Object RESULT =null;
		


              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clase ::= PUBLIC CLASS ID AC metodos CC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<metodos> datos = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;

  Controlador_.verifyConstruc(this.parser.constructores,this.parser.errores,id);
  Controlador_.verifyMetodos(datos,this.parser.errores);
  MetodosVisual.add("class",id,"","",15);
if(!this.parser.variablesDeclar.isEmpty()){
		  this.parser.variablesDeclar.stream()
                  .forEach((x)->{
                    x.globalVar=1;
                  });
        }
		Controlador_.verifyArgs(this.parser.variablesDeclar, this.parser.errores);

        datos.stream()
                .forEach((x)->{
                  x.string="JAVA_"+id+"_";
                  x.errores=this.parser.errores;
                  x.addVars(this.parser.variablesDeclar);
                  x.validate();
                  x.argumentos.removeAll(this.parser.variablesDeclar);

                });
               if(this.parser.constructores!=null){
                 this.parser.constructores.stream()
                         .forEach((x)->{
                           x.errores=this.parser.errores;
                           if(this.parser.variablesDeclar!=null){
                             if(!this.parser.variablesDeclar.isEmpty()){
                               x.addVars(this.parser.variablesDeclar);
                             }
                           }
                           x.string="JAVA_";
                           x.validate();
                           try{
                             x.argumentos.removeAll(this.parser.variablesDeclar);
                           }catch (Exception ex){}

                         });
               }
              MetodosVisual.search(id);
              MetodosVisual.add("class",id,"","",9);
              this.parser.java.add(id,idleft,idright,datos,this.parser.constructores,this.parser.variablesDeclar);

this.parser.variablesDeclar=new ArrayList();
this.parser.constructores=new ArrayList<>();


              CUP$javacup$result = parser.getSymbolFactory().newSymbol("clase",2, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodos ::= PUBLIC ID AP argumentos CP AC datos CC 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // metodos ::= PUBLIC ID AP CP AC datos CC 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=new ArrayList();

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // metodos ::= PUBLIC ID AP argumentos CP AC datos CC metodos 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // metodos ::= PUBLIC ID AP CP AC datos CC metodos 
            {
              ArrayList<metodos> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
constructores.add(metodo);
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // metodos ::= declaracion_var PUNTOCOMA metodos 
            {
              ArrayList<metodos> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion list = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
           if(this.parser.variablesDeclar.isEmpty()){
                MetodosVisual.add("class","","","",15);
              }
  list.errores=this.parser.errores;
              list.initDatas(this.parser.variablesDeclar);
              list.validate(false);
list.variables.removeAll(this.parser.variablesDeclar);
this.parser.variablesDeclar.addAll(list.variables);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodos ::= declaracion_var PUNTOCOMA 
            {
              ArrayList<metodos> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion list = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
           if(this.parser.variablesDeclar.isEmpty()){
                MetodosVisual.add("class","","","",15);
              }
  list.errores=this.parser.errores;
              list.initDatas(this.parser.variablesDeclar);
              list.validate(false);
 list.variables.removeAll(this.parser.variablesDeclar);
this.parser.variablesDeclar.addAll(list.variables);

RESULT=new ArrayList();

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= funcion metodos 
            {
              ArrayList<metodos> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		metodos d = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
x.add(d);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= procedimiento metodos 
            {
              ArrayList<metodos> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		metodos d = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<metodos> x = (ArrayList<metodos>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(x==null){
x=new ArrayList();
}
x.add(d);
RESULT=x;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= procedimiento 
            {
              ArrayList<metodos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
RESULT=new ArrayList();
RESULT.add(metodo);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= funcion 
            {
              ArrayList<metodos> RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		metodos metodo = (metodos)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
metodo.errores=this.parser.errores;
RESULT=new ArrayList();
RESULT.add(metodo);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= error funcion 
            {
              ArrayList<metodos> RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= error procedimiento 
            {
              ArrayList<metodos> RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("metodos",5, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= PUBLIC tipos ID AP argumentos CP AC datos2 CC 
            {
              metodos RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= PUBLIC tipos ID AP CP AC datos2 CC 
            {
              metodos RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,true);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
metodo.TIPO=t1;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedimiento ::= PUBLIC VOID ID AP argumentos CP AC datos CC 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
metodos metodo=new metodos(am,list,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("procedimiento",7, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedimiento ::= PUBLIC VOID ID AP CP AC datos CC 
            {
              metodos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		

metodos metodo=new metodos(am,false);
metodo.FILA=idleft;
metodo.COLUMNA=idright;
metodo.ID=id;
RESULT=metodo;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("procedimiento",7, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datos2 ::= 
            {
              ambito_ RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos2",20, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datos2 ::= instrucciones_fun 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=am;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos2",20, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datos ::= 
            {
              ambito_ RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos",8, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datos ::= instrucciones 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=am;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos",8, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones ::= instrucciones instruccion 
            {
              ambito_ RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
val.add(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones ::= instruccion 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		

try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones_fun ::= instruccion instrucciones_fun 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
val.addIndex(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",19, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones_fun ::= instruccion 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",19, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones_fun ::= RETURN e PUNTOCOMA 
            {
              ambito_ RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
ambito_ am=new ambito_(val,x1left,x1right);
RESULT=am;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",19, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$0 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= asignacion_var NT$0 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= declaracion_var NT$1 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= if_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= while_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= dowhile_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= for_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= switch_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= input_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= print_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=x;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		System.out.println(";");
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= error CP 
            {
              Instruccion RESULT =null;
		System.out.println("cp");
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos ::= INT 
            {
              Integer RESULT =null;
		RESULT=1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos ::= DOUBLE 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipos ::= CHAR 
            {
              Integer RESULT =null;
		RESULT=2;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argumentos ::= argumentos COMA tipos ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
list.add(new VariableDeclaracion(id,idleft,idright,t1,false));
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argumentos ::= tipos ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,t1,false));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion_var ::= ID EQUALS e 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,nodo,idleft,idright);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_var ::= ID EQUALS input_var 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Instruccion input = (Instruccion)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,input,idleft,idright);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_var ::= error e 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_var ::= error input_var 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("asignacion_var",11, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_var ::= tipos variables 
            {
              Instruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declaracion_var",29, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variables ::= variables COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variables ::= variables COMA ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variables ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variables ::= ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variables ::= error e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al declarar una variable, verifique que la asignacion sea correcta");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_var ::= IF AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_if(am,bool);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_var ::= IF AP boolean CP AC datos2 CC ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_if(bool,am,null,new instr_if(v));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_var ::= IF AP boolean CP AC datos2 CC else_var 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new instr_if(bool,am,list,null);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_var ::= IF AP boolean CP AC datos2 CC else_var ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-9)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-9)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_if(bool,am,list,new instr_if(v));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("if_var",13, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-11)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else_var ::= else_var ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int instr_ifsleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int instr_ifsright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		ArrayList<instr_if> instr_ifs = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
 try{
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

 
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_var ::= ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
  try{
  ArrayList<instr_if> instr_ifs=new ArrayList();;
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

  
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_var ::= WHILE AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_while(am,bool);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("while_var",14, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dowhile_var ::= DO AC datos2 CC WHILE AP boolean CP 
            {
              Instruccion RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-5)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
 try{
  RESULT=new instr_dowhile(am,bool);
 }catch(Exception e){}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("dowhile_var",15, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-7)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_var ::= FOR AP ID PUNTOCOMA ID OP e PUNTOCOMA ID EQUALS e CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-12)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoAritmetica t3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_for_java(id,null,t2,t3,-1,am,idleft,idright,id2,id2left,id2right,id3,id3left,id3right);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("for_var",16, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for_var ::= FOR AP tipos ID EQUALS e PUNTOCOMA ID OP e PUNTOCOMA ID EQUALS e CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-15)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-14)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-14)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-12)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-12)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-10)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-8)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-8)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		NodoAritmetica t3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_for_java(id,t1,t2,t3,t,am,idleft,idright,id2,id2left,id2right,id3,id3left,id3right);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("for_var",16, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-17)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // typeOp ::= SUM 
            {
              String RESULT =null;
		RESULT="+";
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("typeOp",17, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typeOp ::= RES 
            {
              String RESULT =null;
		RESULT="-";
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("typeOp",17, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declarateVar ::= ID 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",18, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declarateVar ::= ID EQUALS e 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[4]=nodo;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",18, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarateVar ::= tipos ID EQUALS e 
            {
              Object[] RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[3]=t1;
obj[4]=nodo;
RESULT=obj;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("declarateVar",18, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switch_var ::= SWITCH AP ID CP AC cases CC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new switch_var(id,list,idleft,idright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("switch_var",42, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-6)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cases ::= cases case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
list.add(caso);
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cases ::= case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
ArrayList<Sub_case> list=new ArrayList();
list.add(caso);
RESULT=list;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cases ::= error case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error en un caso de la sentencia switch");

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case_ ::= CASE e_ BOTHPOINT datos break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
Variable var=val.variable;
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(var,valleft,valright,am,1,false,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(var,valleft,valright,am,2,false,null);
 }
}else{
     RESULT=new Sub_case(var,valleft,valright,am,-1,false,null);
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("case_",41, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // case_ ::= DEFAULT BOTHPOINT datos break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
 if(br!=null){
  if(br[1]!=null){
      RESULT=new Sub_case(null,valleft,valright,am,1,true,(NodoAritmetica)br[1]);
  }else{
      RESULT=new Sub_case(null,valleft,valright,am,2,true,null);
  }
 }else{
      RESULT=new Sub_case(null,valleft,valright,am,-1,true,null);
 }
 
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("case_",41, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // break_case ::= BREAK PUNTOCOMA 
            {
              Object[] RESULT =null;
		
Object b[]=new Object[2];
b[0]=2;
RESULT=b;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",40, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // break_case ::= RETURN e PUNTOCOMA 
            {
              Object[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica x = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
Object b[]=new Object[2];
b[0]=1;
b[1]=x;
RESULT=b;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",40, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // break_case ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("break_case",40, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // datos_ ::= e YYYY 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica cd = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos_",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // datos_ ::= CADENA XXXX 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("datos_",45, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // XXXX ::= SUM datos_ 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=d;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("XXXX",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // XXXX ::= 
            {
              ArrayList<argumento_dato> RESULT =null;
		RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("XXXX",46, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // YYYY ::= SUM CADENA XXXX 
            {
              ArrayList<argumento_dato> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(d==null){
d=new ArrayList();
}
d.add(0,new argumento_dato(cd));
RESULT=d;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("YYYY",47, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // YYYY ::= 
            {
              ArrayList<argumento_dato> RESULT =null;
		RESULT=new ArrayList();
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("YYYY",47, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // print_var ::= PRINTLN AP datos_ CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_print(datos,true);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",44, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // print_var ::= PRINTLN AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(true);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",44, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // print_var ::= PRINT AP datos_ CP 
            {
              Instruccion RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=new instr_print(datos,false);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",44, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // print_var ::= PRINT AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_print(false);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("print_var",44, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // input_var ::= INPUTI AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,1,"e",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // input_var ::= INPUTD AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,0,"r",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // input_var ::= INPUTC AP datos_ CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		ArrayList<argumento_dato> datos = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=new instr_input(datos,1,"c",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // input_var ::= INPUTI AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(1,"e",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // input_var ::= INPUTD AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(0,"r",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // input_var ::= INPUTC AP CP 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		RESULT=new instr_input(1,"c",xleft,xright);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("input_var",43, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",23, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",23, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e",23, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",24, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",24, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",24, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t",24, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=val1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f",25, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // e_ ::= e_ SUM t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("+",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // e_ ::= e_ RES t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("-",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // e_ ::= t_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("e_",26, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // t_ ::= t_ MUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("*",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // t_ ::= t_ DIV f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("/",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // t_ ::= f_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // t_ ::= t_ MODUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("%",val1,val2);

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("t_",28, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // f_ ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // f_ ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // f_ ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // f_ ::= AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		RESULT=val1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // f_ ::= RES AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("f_",27, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // boolean ::= boolean AND b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("boolean",38, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=v1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("boolean",38, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // b ::= b OR c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("b",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=v1;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("b",36, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
            this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
            this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
             this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
    }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }
}
RESULT=v1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-4)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // c ::= NOT AP boolean CP 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		
RESULT=v1;
RESULT.canAdd=false;
RESULT.cambiarSigno=1;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("c",37, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-3)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // z ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // y ::= 
            {
              Object[] RESULT =null;

              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("y",35, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-1)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",31, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",31, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ee1",31, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=val;
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.elementAt(CUP$javacup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("tt1",32, ((java_cup.runtime.Symbol)CUP$javacup$stack.elementAt(CUP$javacup$top-2)), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$javacup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$javacup$result = parser.getSymbolFactory().newSymbol("ff1",33, ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), ((java_cup.runtime.Symbol)CUP$javacup$stack.peek()), RESULT);
            }
          return CUP$javacup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$javacup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$javacup$do_action(
    int                        CUP$javacup$act_num,
    java_cup.runtime.lr_parser CUP$javacup$parser,
    java.util.Stack            CUP$javacup$stack,
    int                        CUP$javacup$top)
    throws java.lang.Exception
    {
              return CUP$javacup$do_action_part00000000(
                               CUP$javacup$act_num,
                               CUP$javacup$parser,
                               CUP$javacup$stack,
                               CUP$javacup$top);
    }
}

}
