
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaPython;

import Lenguajes.MetodosVisual;
import java_cup.runtime.Symbol;
import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import GramaticaC.call_c;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class pycup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public pycup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public pycup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public pycup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\007\012\000\002\007\013\000\002\007\012\000" +
    "\002\007\011\000\002\005\005\000\002\005\003\000\002" +
    "\005\004\000\002\010\005\000\002\010\003\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\004\000\002\011\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\013" +
    "\005\000\002\014\016\000\002\015\005\000\002\016\004" +
    "\000\002\016\005\000\002\017\005\000\002\017\006\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\006\000\002\024\004\000\002\024\004\000" +
    "\002\024\003\000\002\034\005\000\002\034\003\000\002" +
    "\032\005\000\002\032\003\000\002\033\004\000\002\033" +
    "\007\000\002\033\006\000\002\030\002\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\031\002\000\002\031\004\000\002" +
    "\031\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\004\000\002" +
    "\027\004\000\002\027\003\000\002\004\005\000\002\004" +
    "\006\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\036\004\001\002\000\010\003\011\011" +
    "\007\031\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002\000\006\011" +
    "\274\031\012\001\002\000\004\031\012\001\002\000\004" +
    "\037\014\001\002\000\006\011\ufffd\031\ufffd\001\002\000" +
    "\004\016\015\001\002\000\010\003\017\017\021\037\016" +
    "\001\002\000\006\014\ufff6\017\ufff6\001\002\000\004\014" +
    "\272\001\002\000\006\014\263\017\264\001\002\000\004" +
    "\013\022\001\002\000\004\036\023\001\002\000\034\003" +
    "\042\004\030\005\026\006\034\007\045\010\031\012\033" +
    "\027\040\037\035\040\041\044\046\045\051\046\050\001" +
    "\002\000\010\011\ufff8\031\ufff8\036\261\001\002\000\010" +
    "\011\uffed\031\uffed\036\uffed\001\002\000\004\013\260\001" +
    "\002\000\010\011\uffec\031\uffec\036\uffec\001\002\000\020" +
    "\016\177\023\164\034\176\037\170\041\165\042\171\043" +
    "\200\001\002\000\016\016\066\023\055\037\063\041\056" +
    "\042\064\043\067\001\002\000\010\011\ufff3\031\ufff3\036" +
    "\ufff3\001\002\000\004\037\253\001\002\000\020\016\177" +
    "\023\164\034\176\037\170\041\165\042\171\043\200\001" +
    "\002\000\004\030\155\001\002\000\010\011\uffef\031\uffef" +
    "\036\uffef\001\002\000\010\011\ufff0\031\ufff0\036\ufff0\001" +
    "\002\000\020\016\177\023\164\034\176\037\170\041\165" +
    "\042\171\043\200\001\002\000\004\016\160\001\002\000" +
    "\046\003\153\004\030\005\026\006\034\007\045\010\031" +
    "\012\033\016\066\023\055\027\040\037\152\040\041\041" +
    "\056\042\064\043\067\044\046\045\051\046\050\001\002" +
    "\000\010\011\ufff1\031\ufff1\036\ufff1\001\002\000\010\011" +
    "\uffee\031\uffee\036\uffee\001\002\000\004\037\136\001\002" +
    "\000\004\016\132\001\002\000\010\011\uffeb\031\uffeb\036" +
    "\uffeb\001\002\000\004\016\126\001\002\000\004\016\052" +
    "\001\002\000\024\003\065\016\066\017\054\023\055\035" +
    "\053\037\063\041\056\042\064\043\067\001\002\000\006" +
    "\014\uffd6\017\uffd6\001\002\000\010\011\uffdc\031\uffdc\036" +
    "\uffdc\001\002\000\010\016\122\041\123\042\121\001\002" +
    "\000\040\011\uffc9\013\uffc9\014\uffc9\017\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\036\uffc9\001\002\000\040\011\uffc4\013" +
    "\uffc4\014\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036" +
    "\uffc4\001\002\000\040\011\uffce\013\uffce\014\uffce\017\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\036\uffce\001\002\000\012" +
    "\014\uffd5\017\uffd5\022\101\023\100\001\002\000\006\014" +
    "\115\017\116\001\002\000\042\011\uffcc\013\uffcc\014\uffcc" +
    "\016\106\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc" +
    "\001\002\000\040\011\uffcb\013\uffcb\014\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\036\uffcb\001\002\000\016\016" +
    "\066\023\055\037\063\041\056\042\064\043\067\001\002" +
    "\000\016\016\066\023\055\037\063\041\056\042\064\043" +
    "\067\001\002\000\040\011\uffca\013\uffca\014\uffca\017\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\036\uffca\001\002\000\040" +
    "\011\uffd1\013\uffd1\014\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\072\025\073\026\071\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\036\uffd1\001\002\000\016\016\066\023\055\037" +
    "\063\041\056\042\064\043\067\001\002\000\016\016\066" +
    "\023\055\037\063\041\056\042\064\043\067\001\002\000" +
    "\016\016\066\023\055\037\063\041\056\042\064\043\067" +
    "\001\002\000\040\011\uffcf\013\uffcf\014\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\036\uffcf\001\002\000\040\011" +
    "\uffd0\013\uffd0\014\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\036\uffd0\001\002\000\040\011\uffcd\013\uffcd\014\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\036\uffcd\001\002" +
    "\000\010\017\102\022\101\023\100\001\002\000\016\016" +
    "\066\023\055\037\063\041\056\042\064\043\067\001\002" +
    "\000\016\016\066\023\055\037\063\041\056\042\064\043" +
    "\067\001\002\000\040\011\uffc8\013\uffc8\014\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\001\002\000\040" +
    "\011\uffd3\013\uffd3\014\uffd3\017\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\072\025\073\026\071\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\036\uffd3\001\002\000\040\011\uffd2\013\uffd2\014" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\072\025\073" +
    "\026\071\030\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2\001" +
    "\002\000\012\014\uffd4\017\uffd4\022\101\023\100\001\002" +
    "\000\020\016\066\017\110\023\055\037\063\041\056\042" +
    "\064\043\067\001\002\000\006\014\112\017\113\001\002" +
    "\000\040\011\uffa5\013\uffa5\014\uffa5\017\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\036\uffa5\001\002\000\012\014\uffa2\017" +
    "\uffa2\022\101\023\100\001\002\000\016\016\066\023\055" +
    "\037\063\041\056\042\064\043\067\001\002\000\040\011" +
    "\uffa4\013\uffa4\014\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\036\uffa4\001\002\000\012\014\uffa3\017\uffa3\022\101" +
    "\023\100\001\002\000\020\016\066\023\055\035\117\037" +
    "\063\041\056\042\064\043\067\001\002\000\010\011\uffd9" +
    "\031\uffd9\036\uffd9\001\002\000\006\014\uffd8\017\uffd8\001" +
    "\002\000\012\014\uffd7\017\uffd7\022\101\023\100\001\002" +
    "\000\040\011\uffc5\013\uffc5\014\uffc5\017\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\001\002\000\016\016\066\023" +
    "\055\037\063\041\056\042\064\043\067\001\002\000\040" +
    "\011\uffc6\013\uffc6\014\uffc6\017\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\036\uffc6\001\002\000\010\017\125\022\101\023" +
    "\100\001\002\000\040\011\uffc7\013\uffc7\014\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\036\uffc7\001\002\000\024" +
    "\003\065\016\066\017\127\023\055\035\053\037\063\041" +
    "\056\042\064\043\067\001\002\000\010\011\uffdd\031\uffdd" +
    "\036\uffdd\001\002\000\006\014\115\017\131\001\002\000" +
    "\010\011\uffda\031\uffda\036\uffda\001\002\000\024\003\065" +
    "\016\066\017\133\023\055\035\053\037\063\041\056\042" +
    "\064\043\067\001\002\000\010\011\uffde\031\uffde\036\uffde" +
    "\001\002\000\006\014\115\017\135\001\002\000\010\011" +
    "\uffdb\031\uffdb\036\uffdb\001\002\000\004\015\137\001\002" +
    "\000\004\020\140\001\002\000\004\016\141\001\002\000" +
    "\016\016\066\023\055\037\063\041\056\042\064\043\067" +
    "\001\002\000\010\014\143\022\101\023\100\001\002\000" +
    "\016\016\066\023\055\037\063\041\056\042\064\043\067" +
    "\001\002\000\010\014\145\022\101\023\100\001\002\000" +
    "\016\016\066\023\055\037\063\041\056\042\064\043\067" +
    "\001\002\000\010\017\147\022\101\023\100\001\002\000" +
    "\004\013\150\001\002\000\010\011\uffe4\031\uffe4\036\uffe4" +
    "\001\002\000\010\011\ufff2\031\ufff2\036\ufff2\001\002\000" +
    "\026\011\uffcc\016\106\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\030\155\031\uffcc\036\uffcc\001\002\000\016\016" +
    "\066\023\055\037\063\041\056\042\064\043\067\001\002" +
    "\000\014\011\uffe6\022\101\023\100\031\uffe6\036\uffe6\001" +
    "\002\000\024\016\066\023\055\037\063\041\056\042\064" +
    "\043\067\044\046\045\051\046\050\001\002\000\010\011" +
    "\uffe7\031\uffe7\036\uffe7\001\002\000\014\011\uffe8\022\101" +
    "\023\100\031\uffe8\036\uffe8\001\002\000\024\003\065\016" +
    "\066\017\161\023\055\035\053\037\063\041\056\042\064" +
    "\043\067\001\002\000\010\011\uffe0\031\uffe0\036\uffe0\001" +
    "\002\000\006\014\115\017\163\001\002\000\010\011\uffdf" +
    "\031\uffdf\036\uffdf\001\002\000\006\041\250\042\247\001" +
    "\002\000\030\013\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\030\uffa9\032\uffa9\033\uffa9\001" +
    "\002\000\030\013\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\030\uffa6\032\uffa6\033\uffa6\001" +
    "\002\000\030\013\uffae\017\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\030\uffae\032\uffae\033\uffae\001" +
    "\002\000\032\013\uffac\016\106\017\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac\032\uffac\033" +
    "\uffac\001\002\000\030\013\uffab\017\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\030\uffab\032\uffab\033" +
    "\uffab\001\002\000\022\013\uffb6\017\uffb6\021\217\022\243" +
    "\023\242\030\220\032\uffb6\033\uffb6\001\002\000\012\013" +
    "\uffc0\017\uffc0\032\uffc0\033\uffc0\001\002\000\030\013\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\235\025\236\026" +
    "\234\030\uffb1\032\uffb1\033\uffb1\001\002\000\012\013\uffc2" +
    "\017\uffc2\032\uffc2\033\205\001\002\000\004\016\231\001" +
    "\002\000\020\016\177\023\164\034\176\037\170\041\165" +
    "\042\171\043\200\001\002\000\030\013\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\030\uffaa" +
    "\032\uffaa\033\uffaa\001\002\000\006\013\203\032\202\001" +
    "\002\000\020\016\177\023\164\034\176\037\170\041\165" +
    "\042\171\043\200\001\002\000\010\011\uffe1\031\uffe1\036" +
    "\uffe1\001\002\000\012\013\uffc3\017\uffc3\032\uffc3\033\205" +
    "\001\002\000\020\016\177\023\164\034\176\037\170\041" +
    "\165\042\171\043\200\001\002\000\012\013\uffc1\017\uffc1" +
    "\032\uffc1\033\uffc1\001\002\000\006\017\210\032\202\001" +
    "\002\000\030\013\uffbc\017\uffbc\021\uffbc\022\212\023\211" +
    "\024\214\025\215\026\213\030\uffbc\032\uffbc\033\uffbc\001" +
    "\002\000\016\016\066\023\055\037\063\041\056\042\064" +
    "\043\067\001\002\000\016\016\066\023\055\037\063\041" +
    "\056\042\064\043\067\001\002\000\016\016\066\023\055" +
    "\037\063\041\056\042\064\043\067\001\002\000\016\016" +
    "\066\023\055\037\063\041\056\042\064\043\067\001\002" +
    "\000\016\016\066\023\055\037\063\041\056\042\064\043" +
    "\067\001\002\000\016\013\uffb6\017\uffb6\021\217\030\220" +
    "\032\uffb6\033\uffb6\001\002\000\016\016\066\023\055\037" +
    "\063\041\056\042\064\043\067\001\002\000\016\016\066" +
    "\023\055\037\063\041\056\042\064\043\067\001\002\000" +
    "\012\013\uffbe\017\uffbe\032\uffbe\033\uffbe\001\002\000\016" +
    "\013\uffb4\017\uffb4\022\101\023\100\032\uffb4\033\uffb4\001" +
    "\002\000\016\013\uffb5\017\uffb5\022\101\023\100\032\uffb5" +
    "\033\uffb5\001\002\000\022\013\uffb8\017\uffb8\021\uffb8\022" +
    "\101\023\100\030\uffb8\032\uffb8\033\uffb8\001\002\000\022" +
    "\013\uffb9\017\uffb9\021\uffb9\022\101\023\100\030\uffb9\032" +
    "\uffb9\033\uffb9\001\002\000\022\013\uffb7\017\uffb7\021\uffb7" +
    "\022\101\023\100\030\uffb7\032\uffb7\033\uffb7\001\002\000" +
    "\022\013\uffbb\017\uffbb\021\uffbb\022\101\023\100\030\uffbb" +
    "\032\uffbb\033\uffbb\001\002\000\022\013\uffba\017\uffba\021" +
    "\uffba\022\101\023\100\030\uffba\032\uffba\033\uffba\001\002" +
    "\000\020\016\177\023\164\034\176\037\170\041\165\042" +
    "\171\043\200\001\002\000\006\017\233\032\202\001\002" +
    "\000\012\013\uffbd\017\uffbd\032\uffbd\033\uffbd\001\002\000" +
    "\016\016\066\023\055\037\063\041\056\042\064\043\067" +
    "\001\002\000\016\016\066\023\055\037\063\041\056\042" +
    "\064\043\067\001\002\000\016\016\066\023\055\037\063" +
    "\041\056\042\064\043\067\001\002\000\030\013\uffaf\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\030\uffaf\032\uffaf\033\uffaf\001\002\000\030\013\uffb0\017" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\030\uffb0\032\uffb0\033\uffb0\001\002\000\030\013\uffad\017" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\030\uffad\032\uffad\033\uffad\001\002\000\016\016\066\023" +
    "\055\037\063\041\056\042\064\043\067\001\002\000\016" +
    "\016\066\023\055\037\063\041\056\042\064\043\067\001" +
    "\002\000\012\013\uffbf\017\uffbf\032\uffbf\033\uffbf\001\002" +
    "\000\030\013\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\072\025\073\026\071\030\uffb3\032\uffb3\033\uffb3\001\002" +
    "\000\030\013\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\072\025\073\026\071\030\uffb2\032\uffb2\033\uffb2\001\002" +
    "\000\030\013\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\030\uffa7\032\uffa7\033\uffa7\001\002" +
    "\000\030\013\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\030\uffa8\032\uffa8\033\uffa8\001\002" +
    "\000\006\013\252\032\202\001\002\000\010\011\uffe3\031" +
    "\uffe3\036\uffe3\001\002\000\004\016\106\001\002\000\010" +
    "\011\uffea\031\uffea\036\uffea\001\002\000\014\011\uffe9\022" +
    "\101\023\100\031\uffe9\036\uffe9\001\002\000\006\013\257" +
    "\032\202\001\002\000\010\011\uffe5\031\uffe5\036\uffe5\001" +
    "\002\000\010\011\uffe2\031\uffe2\036\uffe2\001\002\000\040" +
    "\003\153\004\030\005\026\006\034\007\045\010\031\011" +
    "\ufff9\012\033\027\040\031\ufff9\037\035\040\041\044\046" +
    "\045\051\046\050\001\002\000\010\011\ufff4\031\ufff4\036" +
    "\ufff4\001\002\000\004\037\271\001\002\000\004\013\265" +
    "\001\002\000\004\036\266\001\002\000\034\003\042\004" +
    "\030\005\026\006\034\007\045\010\031\012\033\027\040" +
    "\037\035\040\041\044\046\045\051\046\050\001\002\000" +
    "\010\011\ufffb\031\ufffb\036\270\001\002\000\040\003\153" +
    "\004\030\005\026\006\034\007\045\010\031\011\ufffa\012" +
    "\033\027\040\031\ufffa\037\035\040\041\044\046\045\051" +
    "\046\050\001\002\000\006\014\ufff7\017\ufff7\001\002\000" +
    "\006\014\ufff5\017\ufff5\001\002\000\006\011\ufffc\031\ufffc" +
    "\001\002\000\004\002\000\001\002\000\006\011\ufffe\031" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\002\004\001\001\000\006\006\007\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\274\001\001\000\004\007\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\023\011\031\012\042\013\036\014\035\015" +
    "\043\016\046\017\024\021\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\165\025\171\026\173\027\166\032\174\033\172" +
    "\034\255\001\001\000\012\004\056\022\254\023\067\024" +
    "\057\001\001\000\002\001\001\000\004\004\253\001\001" +
    "\000\020\004\165\025\171\026\173\027\166\032\174\033" +
    "\172\034\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\165\025\171\026\173\027" +
    "\166\032\174\033\172\034\200\001\001\000\002\001\001" +
    "\000\032\004\056\011\150\012\042\013\036\014\035\015" +
    "\043\016\046\017\024\021\026\022\153\023\067\024\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\056\020\061\022\060\023" +
    "\067\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\056\022\104\023" +
    "\067\024\057\001\001\000\012\004\056\022\076\023\067" +
    "\024\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\056\024\075\001\001\000\006\004\056\024\074" +
    "\001\001\000\006\004\056\024\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\056\023\103\024\057\001\001\000\010\004" +
    "\056\023\102\024\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\106\004\056\022\110\023\067\024\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\056\022\113\023\067\024\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\056\022\117\023\067\024" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\056\022\123\023" +
    "\067\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\056\020\127\022\060\023" +
    "\067\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\056\020\133\022\060\023" +
    "\067\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\056\022\141\023\067\024\057" +
    "\001\001\000\002\001\001\000\012\004\056\022\143\023" +
    "\067\024\057\001\001\000\002\001\001\000\012\004\056" +
    "\022\145\023\067\024\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\056\022\153\023\067\024\057\001" +
    "\001\000\002\001\001\000\014\004\056\021\155\022\156" +
    "\023\067\024\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\056\020\161\022\060\023\067\024\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\165\025" +
    "\171\026\173\027\166\032\174\033\172\034\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\165\025" +
    "\171\026\173\027\166\032\203\033\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\165\025\171\026" +
    "\173\027\166\033\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\215\001\001\000\012\004\056\022" +
    "\227\023\067\024\057\001\001\000\012\004\056\022\226" +
    "\023\067\024\057\001\001\000\012\004\056\022\225\023" +
    "\067\024\057\001\001\000\012\004\056\022\224\023\067" +
    "\024\057\001\001\000\012\004\056\022\223\023\067\024" +
    "\057\001\001\000\004\031\220\001\001\000\012\004\056" +
    "\022\222\023\067\024\057\001\001\000\012\004\056\022" +
    "\221\023\067\024\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\165\025\171\026\173\027\166\032\174\033" +
    "\172\034\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\056\024\240\001\001\000\006\004\056\024" +
    "\237\001\001\000\006\004\056\024\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\056\023\245\024\057\001\001\000\010\004\056\023\244" +
    "\024\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\261\012\042\013\036\014" +
    "\035\015\043\016\046\017\024\021\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\266\011\031\012\042\013\036\014\035" +
    "\015\043\016\046\017\024\021\026\001\001\000\002\001" +
    "\001\000\022\011\261\012\042\013\036\014\035\015\043" +
    "\016\046\017\024\021\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$pycup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$pycup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$pycup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private Controlador_ controlador=new Controlador_();
public ArrayList<metodo_py> metodos=new ArrayList<>();
    public ErrorClass errores;
    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
    }
    public void syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$pycup$actions {
  private final pycup parser;

  /** Constructor */
  CUP$pycup$actions(pycup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$pycup$do_action_part00000000(
    int                        CUP$pycup$act_num,
    java_cup.runtime.lr_parser CUP$pycup$parser,
    java.util.Stack            CUP$pycup$stack,
    int                        CUP$pycup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$pycup$result;

      /* select the action based on the action number */
      switch (CUP$pycup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT = start_val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$pycup$parser.done_parsing();
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SALTO_LINEA metodos CODC 
            {
              Object RESULT =null;
		

		      this.parser.metodos
                      .forEach(metodo_py::getCodigo);
              MetodosVisual.metodosPY=this.parser.metodos;
              this.parser.metodos
                      .forEach((x)->{
                        x.validate();
                      });

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= SALTO_LINEA CODC 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodos ::= metodos funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodos ::= funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= error funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= DEF ID AP argumentos CP TWOPOINT SALTO_LINEA instrucciones 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).right;
		ArrayList<VariableDeclaracion> args = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list,args);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= DEF ID AP argumentos CP TWOPOINT SALTO_LINEA instrucciones SALTO_LINEA 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).right;
		ArrayList<VariableDeclaracion> args = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list,args);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= DEF ID AP CP TWOPOINT SALTO_LINEA instrucciones SALTO_LINEA 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= DEF ID AP CP TWOPOINT SALTO_LINEA instrucciones 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argumentos ::= argumentos COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
VariableDeclaracion var=new VariableDeclaracion(id,idleft,idright);
var.isNull=false;
list.add(var);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argumentos ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
VariableDeclaracion var=new VariableDeclaracion(id,idleft,idright);
var.isNull=false;
RESULT=new ArrayList();
RESULT.add(var);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argumentos ::= error COMA 
            {
              ArrayList<VariableDeclaracion> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= instrucciones SALTO_LINEA instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy in = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
list.add(in);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy in = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
ArrayList<InstruccionPy> list=new ArrayList();
list.add(in);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= error instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= asignacion_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= while_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= for_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= if_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= print_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= input_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= else_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= PY call_fun 
            {
              InstruccionPy RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new call_fun_py(x,pleft,pright);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= RETURN e 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new return_py(x1left,x1right,nodo);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion_var ::= ID EQUALS e 
            {
              InstruccionPy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new asignacion_PY(id,nodo,idleft,idright);


              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion_var ::= ID EQUALS input_var 
            {
              InstruccionPy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy nodo = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new asignacion_PY(id,(input_PY)nodo,idleft,idright);


              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion_var ::= error e 
            {
              InstruccionPy RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // while_var ::= WHILE boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new while_PY(bool,x1left,x1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("while_var",9, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_var ::= FOR ID IN RANGE AP e COMA e COMA e CP TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		NodoAritmetica n1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).right;
		NodoAritmetica n2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica n3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new for_py(x1left,x1right,id,idleft,idright,n1,n2,n3);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("for_var",10, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_var ::= IF boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new if_py(x1left,x1right,bool);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("if_var",11, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else_var ::= ELSE TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new else_py(x1left,x1right,null);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // else_var ::= ELSEIF boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new else_py(x1left,x1right,bool);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_var ::= PRINT AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new print_PY(x1left,x1right,null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("print_var",13, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // print_var ::= PRINT AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new print_PY(x1left,x1right,d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("print_var",13, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // input_var ::= INPUTI AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,1,"e",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // input_var ::= INPUTD AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,0,"r",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // input_var ::= INPUTC AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,2,"c",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // input_var ::= INPUTI AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,1,"e",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // input_var ::= INPUTD AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,0,"r",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // input_var ::= INPUTC AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,2,"c",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datos ::= datos COMA CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
d.add(new argumento_dato(id));
RESULT=d;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // datos ::= datos COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
d.add(new argumento_dato(nodo));
RESULT=d;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datos ::= CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT= new ArrayList();
RESULT.add(new argumento_dato(id));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // datos ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT= new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // datos ::= error e 
            {
              ArrayList<argumento_dato> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=val1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // f ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // f ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // f ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean ::= boolean AND b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("boolean",26, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=v1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("boolean",26, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b ::= b OR c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("b",24, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=v1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("b",24, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
                    this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
                    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
             this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
        }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
        }
}
RESULT=v1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c ::= NOT AP boolean CP 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=v1;
RESULT.canAdd=false;
RESULT.cambiarSigno=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // z ::= 
            {
              Object[] RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // y ::= 
            {
              Object[] RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ff1 ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ff1 ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ff1 ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // call_fun ::= ID AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		
call_c call=new call_c(0,id,idleft,idright);
RESULT=call;
call.tipoMetodo=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("call_fun",2, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // call_fun ::= ID AP argumentos_function CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
call_c call=new call_c(0,id,idleft,idright,list);
RESULT=call;
call.tipoMetodo=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("call_fun",2, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argumentos_function ::= argumentos_function COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos_function",1, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // argumentos_function ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos_function",1, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$pycup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$pycup$do_action(
    int                        CUP$pycup$act_num,
    java_cup.runtime.lr_parser CUP$pycup$parser,
    java.util.Stack            CUP$pycup$stack,
    int                        CUP$pycup$top)
    throws java.lang.Exception
    {
              return CUP$pycup$do_action_part00000000(
                               CUP$pycup$act_num,
                               CUP$pycup$parser,
                               CUP$pycup$stack,
                               CUP$pycup$top);
    }
}

}
