
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaPython;

import GramaticaC.call_c;
import Lenguajes.MetodosVisual;
import java_cup.runtime.Symbol;
import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class pycup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public pycup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public pycup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public pycup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\007\012\000\002\007\013\000\002\007\012\000" +
    "\002\007\011\000\002\005\005\000\002\005\003\000\002" +
    "\005\004\000\002\010\005\000\002\010\003\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\013\005\000\002\014" +
    "\016\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\017\005\000\002\017\006\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\004" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\023\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\005\000\002\024\006" +
    "\000\002\024\004\000\002\024\004\000\002\024\003\000" +
    "\002\034\005\000\002\034\003\000\002\032\005\000\002" +
    "\032\003\000\002\033\004\000\002\033\007\000\002\033" +
    "\006\000\002\030\002\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\031\002\000\002\031\004\000\002\031\004\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\026\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\003\000\002\004\005\000\002\004\006\000\002\003" +
    "\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\035\004\001\002\000\010\003\011\011" +
    "\007\030\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002\000\006\011" +
    "\271\030\012\001\002\000\004\030\012\001\002\000\004" +
    "\036\014\001\002\000\006\011\ufffd\030\ufffd\001\002\000" +
    "\004\015\015\001\002\000\010\003\017\016\021\036\016" +
    "\001\002\000\006\013\ufff6\016\ufff6\001\002\000\004\013" +
    "\267\001\002\000\006\013\260\016\261\001\002\000\004" +
    "\012\022\001\002\000\004\035\023\001\002\000\032\003" +
    "\041\004\027\005\026\006\033\007\045\010\031\026\037" +
    "\036\034\037\040\043\044\044\050\045\047\001\002\000" +
    "\010\011\ufff8\030\ufff8\035\256\001\002\000\010\011\uffed" +
    "\030\uffed\035\uffed\001\002\000\004\012\255\001\002\000" +
    "\020\015\176\022\163\033\175\036\167\040\164\041\171" +
    "\042\177\001\002\000\010\011\uffec\030\uffec\035\uffec\001" +
    "\002\000\016\015\065\022\054\036\062\040\055\041\064" +
    "\042\066\001\002\000\010\011\ufff3\030\ufff3\035\ufff3\001" +
    "\002\000\020\015\176\022\163\033\175\036\167\040\164" +
    "\041\171\042\177\001\002\000\004\027\154\001\002\000" +
    "\010\011\uffef\030\uffef\035\uffef\001\002\000\010\011\ufff0" +
    "\030\ufff0\035\ufff0\001\002\000\020\015\176\022\163\033" +
    "\175\036\167\040\164\041\171\042\177\001\002\000\004" +
    "\015\157\001\002\000\044\003\152\004\027\005\026\006" +
    "\033\007\045\010\031\015\065\022\054\026\037\036\151" +
    "\037\040\040\055\041\064\042\066\043\044\044\050\045" +
    "\047\001\002\000\010\011\ufff1\030\ufff1\035\ufff1\001\002" +
    "\000\010\011\uffee\030\uffee\035\uffee\001\002\000\004\015" +
    "\144\001\002\000\004\036\131\001\002\000\010\011\uffeb" +
    "\030\uffeb\035\uffeb\001\002\000\004\015\125\001\002\000" +
    "\004\015\051\001\002\000\024\003\063\015\065\016\053" +
    "\022\054\034\052\036\062\040\055\041\064\042\066\001" +
    "\002\000\006\013\uffd7\016\uffd7\001\002\000\010\011\uffdd" +
    "\030\uffdd\035\uffdd\001\002\000\010\015\121\040\122\041" +
    "\120\001\002\000\040\011\uffca\012\uffca\013\uffca\016\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\035\uffca\001\002\000\040" +
    "\011\uffc5\012\uffc5\013\uffc5\016\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\035\uffc5\001\002\000\040\011\uffcf\012\uffcf\013" +
    "\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\001" +
    "\002\000\012\013\uffd6\016\uffd6\021\100\022\077\001\002" +
    "\000\006\013\114\016\115\001\002\000\042\011\uffcd\012" +
    "\uffcd\013\uffcd\015\105\016\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\035\uffcd\001\002\000\016\015\065\022\054\036\062" +
    "\040\055\041\064\042\066\001\002\000\040\011\uffcc\012" +
    "\uffcc\013\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035" +
    "\uffcc\001\002\000\016\015\065\022\054\036\062\040\055" +
    "\041\064\042\066\001\002\000\040\011\uffcb\012\uffcb\013" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb\001" +
    "\002\000\040\011\uffd2\012\uffd2\013\uffd2\016\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\071\024\072\025\070\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\035\uffd2\001\002\000\016\015\065" +
    "\022\054\036\062\040\055\041\064\042\066\001\002\000" +
    "\016\015\065\022\054\036\062\040\055\041\064\042\066" +
    "\001\002\000\016\015\065\022\054\036\062\040\055\041" +
    "\064\042\066\001\002\000\040\011\uffd0\012\uffd0\013\uffd0" +
    "\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\035\uffd0\001\002" +
    "\000\040\011\uffd1\012\uffd1\013\uffd1\016\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\035\uffd1\001\002\000\040\011\uffce\012" +
    "\uffce\013\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035" +
    "\uffce\001\002\000\010\016\101\021\100\022\077\001\002" +
    "\000\016\015\065\022\054\036\062\040\055\041\064\042" +
    "\066\001\002\000\016\015\065\022\054\036\062\040\055" +
    "\041\064\042\066\001\002\000\040\011\uffc9\012\uffc9\013" +
    "\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\035\uffc9\001" +
    "\002\000\040\011\uffd4\012\uffd4\013\uffd4\016\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\071\024\072\025\070\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\035\uffd4\001\002\000\040\011\uffd3" +
    "\012\uffd3\013\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\071\024\072\025\070\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\035\uffd3\001\002\000\012\013\uffd5\016\uffd5\021\100\022" +
    "\077\001\002\000\020\015\065\016\107\022\054\036\062" +
    "\040\055\041\064\042\066\001\002\000\006\013\111\016" +
    "\112\001\002\000\040\011\uffa6\012\uffa6\013\uffa6\016\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\035\uffa6\001\002\000\012" +
    "\013\uffa3\016\uffa3\021\100\022\077\001\002\000\016\015" +
    "\065\022\054\036\062\040\055\041\064\042\066\001\002" +
    "\000\040\011\uffa5\012\uffa5\013\uffa5\016\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\035\uffa5\001\002\000\012\013\uffa4\016" +
    "\uffa4\021\100\022\077\001\002\000\020\015\065\022\054" +
    "\034\116\036\062\040\055\041\064\042\066\001\002\000" +
    "\010\011\uffda\030\uffda\035\uffda\001\002\000\006\013\uffd9" +
    "\016\uffd9\001\002\000\012\013\uffd8\016\uffd8\021\100\022" +
    "\077\001\002\000\040\011\uffc6\012\uffc6\013\uffc6\016\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\001\002\000\016" +
    "\015\065\022\054\036\062\040\055\041\064\042\066\001" +
    "\002\000\040\011\uffc7\012\uffc7\013\uffc7\016\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\035\uffc7\001\002\000\010\016\124" +
    "\021\100\022\077\001\002\000\040\011\uffc8\012\uffc8\013" +
    "\uffc8\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\001" +
    "\002\000\024\003\063\015\065\016\126\022\054\034\052" +
    "\036\062\040\055\041\064\042\066\001\002\000\010\011" +
    "\uffde\030\uffde\035\uffde\001\002\000\006\013\114\016\130" +
    "\001\002\000\010\011\uffdb\030\uffdb\035\uffdb\001\002\000" +
    "\004\014\132\001\002\000\004\017\133\001\002\000\004" +
    "\015\134\001\002\000\016\015\065\022\054\036\062\040" +
    "\055\041\064\042\066\001\002\000\010\013\136\021\100" +
    "\022\077\001\002\000\016\015\065\022\054\036\062\040" +
    "\055\041\064\042\066\001\002\000\010\013\140\021\100" +
    "\022\077\001\002\000\016\015\065\022\054\036\062\040" +
    "\055\041\064\042\066\001\002\000\010\016\142\021\100" +
    "\022\077\001\002\000\004\012\143\001\002\000\010\011" +
    "\uffe5\030\uffe5\035\uffe5\001\002\000\024\003\063\015\065" +
    "\016\145\022\054\034\052\036\062\040\055\041\064\042" +
    "\066\001\002\000\010\011\uffdf\030\uffdf\035\uffdf\001\002" +
    "\000\006\013\114\016\147\001\002\000\010\011\uffdc\030" +
    "\uffdc\035\uffdc\001\002\000\010\011\ufff2\030\ufff2\035\ufff2" +
    "\001\002\000\026\011\uffcd\015\105\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\027\154\030\uffcd\035\uffcd\001\002" +
    "\000\016\015\065\022\054\036\062\040\055\041\064\042" +
    "\066\001\002\000\014\011\uffe7\021\100\022\077\030\uffe7" +
    "\035\uffe7\001\002\000\024\015\065\022\054\036\062\040" +
    "\055\041\064\042\066\043\044\044\050\045\047\001\002" +
    "\000\010\011\uffe8\030\uffe8\035\uffe8\001\002\000\014\011" +
    "\uffe9\021\100\022\077\030\uffe9\035\uffe9\001\002\000\024" +
    "\003\063\015\065\016\160\022\054\034\052\036\062\040" +
    "\055\041\064\042\066\001\002\000\010\011\uffe1\030\uffe1" +
    "\035\uffe1\001\002\000\006\013\114\016\162\001\002\000" +
    "\010\011\uffe0\030\uffe0\035\uffe0\001\002\000\006\040\247" +
    "\041\246\001\002\000\030\012\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\031\uffaa" +
    "\032\uffaa\001\002\000\030\012\uffa7\016\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\031\uffa7" +
    "\032\uffa7\001\002\000\030\012\uffaf\016\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\031\uffaf" +
    "\032\uffaf\001\002\000\032\012\uffad\015\105\016\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad" +
    "\031\uffad\032\uffad\001\002\000\012\012\uffc1\016\uffc1\031" +
    "\uffc1\032\uffc1\001\002\000\030\012\uffac\016\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\027\uffac\031" +
    "\uffac\032\uffac\001\002\000\022\012\uffb7\016\uffb7\020\216" +
    "\021\242\022\241\027\217\031\uffb7\032\uffb7\001\002\000" +
    "\030\012\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\234" +
    "\024\235\025\233\027\uffb2\031\uffb2\032\uffb2\001\002\000" +
    "\012\012\uffc3\016\uffc3\031\uffc3\032\204\001\002\000\004" +
    "\015\230\001\002\000\020\015\176\022\163\033\175\036" +
    "\167\040\164\041\171\042\177\001\002\000\030\012\uffab" +
    "\016\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\027\uffab\031\uffab\032\uffab\001\002\000\006\012\202" +
    "\031\201\001\002\000\020\015\176\022\163\033\175\036" +
    "\167\040\164\041\171\042\177\001\002\000\010\011\uffe2" +
    "\030\uffe2\035\uffe2\001\002\000\012\012\uffc4\016\uffc4\031" +
    "\uffc4\032\204\001\002\000\020\015\176\022\163\033\175" +
    "\036\167\040\164\041\171\042\177\001\002\000\012\012" +
    "\uffc2\016\uffc2\031\uffc2\032\uffc2\001\002\000\006\016\207" +
    "\031\201\001\002\000\030\012\uffbd\016\uffbd\020\uffbd\021" +
    "\211\022\210\023\213\024\214\025\212\027\uffbd\031\uffbd" +
    "\032\uffbd\001\002\000\016\015\065\022\054\036\062\040" +
    "\055\041\064\042\066\001\002\000\016\015\065\022\054" +
    "\036\062\040\055\041\064\042\066\001\002\000\016\015" +
    "\065\022\054\036\062\040\055\041\064\042\066\001\002" +
    "\000\016\015\065\022\054\036\062\040\055\041\064\042" +
    "\066\001\002\000\016\015\065\022\054\036\062\040\055" +
    "\041\064\042\066\001\002\000\016\012\uffb7\016\uffb7\020" +
    "\216\027\217\031\uffb7\032\uffb7\001\002\000\016\015\065" +
    "\022\054\036\062\040\055\041\064\042\066\001\002\000" +
    "\016\015\065\022\054\036\062\040\055\041\064\042\066" +
    "\001\002\000\012\012\uffbf\016\uffbf\031\uffbf\032\uffbf\001" +
    "\002\000\016\012\uffb5\016\uffb5\021\100\022\077\031\uffb5" +
    "\032\uffb5\001\002\000\016\012\uffb6\016\uffb6\021\100\022" +
    "\077\031\uffb6\032\uffb6\001\002\000\022\012\uffb9\016\uffb9" +
    "\020\uffb9\021\100\022\077\027\uffb9\031\uffb9\032\uffb9\001" +
    "\002\000\022\012\uffba\016\uffba\020\uffba\021\100\022\077" +
    "\027\uffba\031\uffba\032\uffba\001\002\000\022\012\uffb8\016" +
    "\uffb8\020\uffb8\021\100\022\077\027\uffb8\031\uffb8\032\uffb8" +
    "\001\002\000\022\012\uffbc\016\uffbc\020\uffbc\021\100\022" +
    "\077\027\uffbc\031\uffbc\032\uffbc\001\002\000\022\012\uffbb" +
    "\016\uffbb\020\uffbb\021\100\022\077\027\uffbb\031\uffbb\032" +
    "\uffbb\001\002\000\020\015\176\022\163\033\175\036\167" +
    "\040\164\041\171\042\177\001\002\000\006\016\232\031" +
    "\201\001\002\000\012\012\uffbe\016\uffbe\031\uffbe\032\uffbe" +
    "\001\002\000\016\015\065\022\054\036\062\040\055\041" +
    "\064\042\066\001\002\000\016\015\065\022\054\036\062" +
    "\040\055\041\064\042\066\001\002\000\016\015\065\022" +
    "\054\036\062\040\055\041\064\042\066\001\002\000\030" +
    "\012\uffb0\016\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\031\uffb0\032\uffb0\001\002\000\030" +
    "\012\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\031\uffb1\032\uffb1\001\002\000\030" +
    "\012\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\uffae\031\uffae\032\uffae\001\002\000\016" +
    "\015\065\022\054\036\062\040\055\041\064\042\066\001" +
    "\002\000\016\015\065\022\054\036\062\040\055\041\064" +
    "\042\066\001\002\000\012\012\uffc0\016\uffc0\031\uffc0\032" +
    "\uffc0\001\002\000\030\012\uffb4\016\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\071\024\072\025\070\027\uffb4\031\uffb4\032" +
    "\uffb4\001\002\000\030\012\uffb3\016\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\071\024\072\025\070\027\uffb3\031\uffb3\032" +
    "\uffb3\001\002\000\030\012\uffa8\016\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\031\uffa8\032" +
    "\uffa8\001\002\000\030\012\uffa9\016\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\031\uffa9\032" +
    "\uffa9\001\002\000\006\012\251\031\201\001\002\000\010" +
    "\011\uffe4\030\uffe4\035\uffe4\001\002\000\014\011\uffea\021" +
    "\100\022\077\030\uffea\035\uffea\001\002\000\006\012\254" +
    "\031\201\001\002\000\010\011\uffe6\030\uffe6\035\uffe6\001" +
    "\002\000\010\011\uffe3\030\uffe3\035\uffe3\001\002\000\036" +
    "\003\152\004\027\005\026\006\033\007\045\010\031\011" +
    "\ufff9\026\037\030\ufff9\036\034\037\040\043\044\044\050" +
    "\045\047\001\002\000\010\011\ufff4\030\ufff4\035\ufff4\001" +
    "\002\000\004\036\266\001\002\000\004\012\262\001\002" +
    "\000\004\035\263\001\002\000\032\003\041\004\027\005" +
    "\026\006\033\007\045\010\031\026\037\036\034\037\040" +
    "\043\044\044\050\045\047\001\002\000\010\011\ufffb\030" +
    "\ufffb\035\265\001\002\000\036\003\152\004\027\005\026" +
    "\006\033\007\045\010\031\011\ufffa\026\037\030\ufffa\036" +
    "\034\037\040\043\044\044\050\045\047\001\002\000\006" +
    "\013\ufff7\016\ufff7\001\002\000\006\013\ufff5\016\ufff5\001" +
    "\002\000\006\011\ufffc\030\ufffc\001\002\000\004\002\000" +
    "\001\002\000\006\011\ufffe\030\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\002\004\001\001\000\006\006\007\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\271\001\001\000\004\007\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\023\011\031\012\041\013\035\014\034\015" +
    "\042\016\045\017\024\021\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\164\025" +
    "\171\026\172\027\165\032\173\033\167\034\252\001\001" +
    "\000\002\001\001\000\012\004\055\022\251\023\066\024" +
    "\056\001\001\000\002\001\001\000\020\004\164\025\171" +
    "\026\172\027\165\032\173\033\167\034\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\164\025\171\026\172\027\165\032\173\033\167\034" +
    "\177\001\001\000\002\001\001\000\032\004\055\011\147" +
    "\012\041\013\035\014\034\015\042\016\045\017\024\021" +
    "\027\022\152\023\066\024\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\055\020\060\022\057\023\066\024\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\055" +
    "\022\103\023\066\024\056\001\001\000\002\001\001\000" +
    "\012\004\055\022\075\023\066\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\055\024\074\001" +
    "\001\000\006\004\055\024\073\001\001\000\006\004\055" +
    "\024\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\055\023\102" +
    "\024\056\001\001\000\010\004\055\023\101\024\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\105\004\055\022\107\023" +
    "\066\024\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\055\022\112\023\066\024" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\055\022\116\023\066\024\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\055\022\122\023\066\024\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\055\020\126\022\057\023\066\024\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\055\022\134\023\066\024\056\001\001\000\002\001\001" +
    "\000\012\004\055\022\136\023\066\024\056\001\001\000" +
    "\002\001\001\000\012\004\055\022\140\023\066\024\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\055\020\145\022\057\023\066\024\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\055" +
    "\022\152\023\066\024\056\001\001\000\002\001\001\000" +
    "\014\004\055\021\154\022\155\023\066\024\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\055\020" +
    "\160\022\057\023\066\024\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\164\025\171\026\172\027\165\032" +
    "\173\033\167\034\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\164\025\171\026\172\027\165\032" +
    "\202\033\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\164\025\171\026\172\027\165\033\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\214" +
    "\001\001\000\012\004\055\022\226\023\066\024\056\001" +
    "\001\000\012\004\055\022\225\023\066\024\056\001\001" +
    "\000\012\004\055\022\224\023\066\024\056\001\001\000" +
    "\012\004\055\022\223\023\066\024\056\001\001\000\012" +
    "\004\055\022\222\023\066\024\056\001\001\000\004\031" +
    "\217\001\001\000\012\004\055\022\221\023\066\024\056" +
    "\001\001\000\012\004\055\022\220\023\066\024\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\164\025\171" +
    "\026\172\027\165\032\173\033\167\034\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\055\024\237" +
    "\001\001\000\006\004\055\024\236\001\001\000\006\004" +
    "\055\024\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\055\023\244\024\056\001" +
    "\001\000\010\004\055\023\243\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\256\012\041\013\035\014\034" +
    "\015\042\016\045\017\024\021\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\263\011\031\012\041\013\035\014\034\015" +
    "\042\016\045\017\024\021\027\001\001\000\002\001\001" +
    "\000\022\011\256\012\041\013\035\014\034\015\042\016" +
    "\045\017\024\021\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$pycup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$pycup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$pycup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private Controlador_ controlador=new Controlador_();
public ArrayList<metodo_py> metodos=new ArrayList<>();
    public ErrorClass errores;
    @Override
    public void unrecovered_syntax_error(Symbol s){
    this.errores.AddError(1,s.left,s.right,s.value.toString());
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
    }
    public void syntax_error(Symbol s){
      this.errores.AddError(1,s.left,s.right,s.value.toString());
      System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$pycup$actions {
  private final pycup parser;

  /** Constructor */
  CUP$pycup$actions(pycup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$pycup$do_action_part00000000(
    int                        CUP$pycup$act_num,
    java_cup.runtime.lr_parser CUP$pycup$parser,
    java.util.Stack            CUP$pycup$stack,
    int                        CUP$pycup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$pycup$result;

      /* select the action based on the action number */
      switch (CUP$pycup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT = start_val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$pycup$parser.done_parsing();
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SALTO_LINEA metodos CODC 
            {
              Object RESULT =null;
		      this.parser.metodos
                      .forEach(metodo_py::getCodigo);
              MetodosVisual.metodosPY=this.parser.metodos;
              this.parser.metodos
                      .forEach((x)->{
                        x.validate();
                      });
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= SALTO_LINEA CODC 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodos ::= metodos funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // metodos ::= funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // metodos ::= error funcion 
            {
              Object RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("metodos",4, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= DEF ID AP argumentos CP TWOPOINT SALTO_LINEA instrucciones 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).right;
		ArrayList<VariableDeclaracion> args = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list,args);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= DEF ID AP argumentos CP TWOPOINT SALTO_LINEA instrucciones SALTO_LINEA 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).right;
		ArrayList<VariableDeclaracion> args = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list,args);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-8)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= DEF ID AP CP TWOPOINT SALTO_LINEA instrucciones SALTO_LINEA 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-7)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= DEF ID AP CP TWOPOINT SALTO_LINEA instrucciones 
            {
              Object RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
metodo_py m=new metodo_py (id,x1left,x1right,list);
m.errorClass=this.parser.errores;
//m.validate();
this.parser.metodos.add(m);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argumentos ::= argumentos COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
VariableDeclaracion var=new VariableDeclaracion(id,idleft,idright);
var.isNull=false;
list.add(var);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argumentos ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
VariableDeclaracion var=new VariableDeclaracion(id,idleft,idright);
var.isNull=false;
RESULT=new ArrayList();
RESULT.add(var);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argumentos ::= error COMA 
            {
              ArrayList<VariableDeclaracion> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos",3, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= instrucciones SALTO_LINEA instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<InstruccionPy> list = (ArrayList<InstruccionPy>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy in = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
list.add(in);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy in = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
ArrayList<InstruccionPy> list=new ArrayList();
list.add(in);
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= error instruccion 
            {
              ArrayList<InstruccionPy> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= asignacion_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= while_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= for_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= if_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= print_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= input_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= else_var 
            {
              InstruccionPy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy x = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=x;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= RETURN e 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new return_py(x1left,x1right,nodo);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion_var ::= ID EQUALS e 
            {
              InstruccionPy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new asignacion_PY(id,nodo,idleft,idright);


              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion_var ::= ID EQUALS input_var 
            {
              InstruccionPy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		InstruccionPy nodo = (InstruccionPy)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new asignacion_PY(id,(input_PY)nodo,idleft,idright);


              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion_var ::= error e 
            {
              InstruccionPy RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("asignacion_var",8, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while_var ::= WHILE boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new while_PY(bool,x1left,x1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("while_var",9, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_var ::= FOR ID IN RANGE AP e COMA e COMA e CP TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-6)).right;
		NodoAritmetica n1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)).right;
		NodoAritmetica n2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica n3 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new for_py(x1left,x1right,id,idleft,idright,n1,n2,n3);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("for_var",10, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-11)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_var ::= IF boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new if_py(x1left,x1right,bool);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("if_var",11, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // else_var ::= ELSE TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new else_py(x1left,x1right,null);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else_var ::= ELSEIF boolean TWOPOINT 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=new else_py(x1left,x1right,bool);

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("else_var",12, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print_var ::= PRINT AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new print_PY(x1left,x1right,null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("print_var",13, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_var ::= PRINT AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new print_PY(x1left,x1right,d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("print_var",13, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // input_var ::= INPUTI AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,1,"e",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // input_var ::= INPUTD AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,0,"r",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // input_var ::= INPUTC AP CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		RESULT=new input_PY(x1left,x1right,2,"c",null);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // input_var ::= INPUTI AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,1,"e",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // input_var ::= INPUTD AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,0,"r",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // input_var ::= INPUTC AP datos CP 
            {
              InstruccionPy RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=new input_PY(x1left,x1right,2,"c",d);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("input_var",15, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datos ::= datos COMA CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
d.add(new argumento_dato(id));
RESULT=d;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datos ::= datos COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> d = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
d.add(new argumento_dato(nodo));
RESULT=d;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // datos ::= CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT= new ArrayList();
RESULT.add(new argumento_dato(id));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datos ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT= new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // datos ::= error e 
            {
              ArrayList<argumento_dato> RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("datos",14, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("t",17, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		RESULT=val1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // f ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // f ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // f ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("f",18, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boolean ::= boolean AND b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("boolean",26, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=v1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("boolean",26, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= b OR c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("b",24, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=v1;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("b",24, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
                    this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
                    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
             this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
        }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
        }
}
RESULT=v1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-4)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c ::= NOT AP boolean CP 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
RESULT=v1;
RESULT.canAdd=false;
RESULT.cambiarSigno=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("c",25, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // z ::= 
            {
              Object[] RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("z",22, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // y ::= 
            {
              Object[] RESULT =null;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("y",23, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ee1",19, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=val;
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("tt1",20, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ff1 ::= RES ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ff1 ::= RES REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));
              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ff1 ::= call_fun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("ff1",21, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // call_fun ::= ID AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		
call_c call=new call_c(0,id,idleft,idright);
RESULT=call;
call.tipoMetodo=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("call_fun",2, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // call_fun ::= ID AP argumentos_function CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-1)).value;
		
call_c call=new call_c(0,id,idleft,idright,list);
RESULT=call;
call.tipoMetodo=1;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("call_fun",2, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-3)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // argumentos_function ::= argumentos_function COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$pycup$stack.elementAt(CUP$pycup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos_function",1, ((java_cup.runtime.Symbol)CUP$pycup$stack.elementAt(CUP$pycup$top-2)), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argumentos_function ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$pycup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$pycup$result = parser.getSymbolFactory().newSymbol("argumentos_function",1, ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), ((java_cup.runtime.Symbol)CUP$pycup$stack.peek()), RESULT);
            }
          return CUP$pycup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$pycup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$pycup$do_action(
    int                        CUP$pycup$act_num,
    java_cup.runtime.lr_parser CUP$pycup$parser,
    java.util.Stack            CUP$pycup$stack,
    int                        CUP$pycup$top)
    throws java.lang.Exception
    {
              return CUP$pycup$do_action_part00000000(
                               CUP$pycup$act_num,
                               CUP$pycup$parser,
                               CUP$pycup$stack,
                               CUP$pycup$top);
    }
}

}
