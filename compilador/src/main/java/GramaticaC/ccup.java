
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package GramaticaC;

import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;
import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ccup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ccup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ccup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ccup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\005\000\002\005" +
    "\002\000\002\005\003\000\002\060\005\000\002\060\004" +
    "\000\002\006\002\000\002\006\003\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\061\011\000\002" +
    "\025\002\000\002\025\003\000\002\011\004\000\002\011" +
    "\003\000\002\024\004\000\002\024\003\000\002\062\002" +
    "\000\002\012\005\000\002\063\002\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\057\005\000\002\056\006\000\002\056\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\003\005\000\002\003\003\000\002\003\003\000\002\003" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\006" +
    "\000\002\013\011\000\002\013\005\000\002\013\007\000" +
    "\002\034\004\000\002\034\005\000\002\036\006\000\002" +
    "\036\007\000\002\036\004\000\002\036\005\000\002\034" +
    "\004\000\002\010\005\000\002\010\010\000\002\010\007" +
    "\000\002\010\005\000\002\010\006\000\002\010\003\000" +
    "\002\035\005\000\002\035\007\000\002\035\003\000\002" +
    "\035\005\000\002\035\004\000\002\035\006\000\002\035" +
    "\004\000\002\035\004\000\002\016\011\000\002\016\015" +
    "\000\002\016\012\000\002\016\016\000\002\015\013\000" +
    "\002\015\012\000\002\017\011\000\002\020\012\000\002" +
    "\021\023\000\002\021\022\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\006" +
    "\000\002\052\011\000\002\047\004\000\002\047\003\000" +
    "\002\047\004\000\002\051\007\000\002\051\006\000\002" +
    "\050\004\000\002\050\002\000\002\055\005\000\002\055" +
    "\003\000\002\055\004\000\002\054\006\000\002\054\005" +
    "\000\002\054\010\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\006\000\002\030\004\000\002\030\003\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\033\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\005\000\002\032\006\000\002\046\005\000\002\046" +
    "\003\000\002\044\005\000\002\044\003\000\002\045\004" +
    "\000\002\045\007\000\002\042\002\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\043\002\000\002\043\004\000\002\043" +
    "\004\000\002\037\005\000\002\037\005\000\002\037\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\003\000" +
    "\002\040\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\004\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\022\003\uffff\012\uffff\017\uffff\020\uffff\021" +
    "\uffff\043\uffff\066\006\067\uffff\001\002\000\020\003\022" +
    "\012\ufffb\017\014\020\021\021\025\043\024\067\020\001" +
    "\002\000\022\003\ufffe\012\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\043\ufffe\066\012\067\ufffe\001\002\000\004\023\011\001" +
    "\002\000\004\002\010\001\002\000\004\002\001\001\002" +
    "\000\022\003\ufffc\012\ufffc\017\ufffc\020\ufffc\021\ufffc\043" +
    "\ufffc\066\ufffc\067\ufffc\001\002\000\004\023\013\001\002" +
    "\000\022\003\ufffd\012\ufffd\017\ufffd\020\ufffd\021\ufffd\043" +
    "\ufffd\066\ufffd\067\ufffd\001\002\000\006\003\uffde\022\uffde" +
    "\001\002\000\004\012\162\001\002\000\004\024\160\001" +
    "\002\000\006\003\144\022\143\001\002\000\004\022\127" +
    "\001\002\000\006\003\uffdd\022\uffdd\001\002\000\004\024" +
    "\126\001\002\000\016\012\ufffa\017\014\020\021\021\025" +
    "\043\024\067\020\001\002\000\010\017\014\020\021\021" +
    "\025\001\002\000\006\003\uffdc\022\uffdc\001\002\000\004" +
    "\022\027\001\002\000\006\025\121\044\035\001\002\000" +
    "\006\024\uffd0\026\031\001\002\000\004\022\032\001\002" +
    "\000\006\025\033\044\035\001\002\000\024\006\050\022" +
    "\045\047\040\050\046\051\051\053\037\070\036\071\047" +
    "\072\044\001\002\000\010\024\uffcf\026\uffcf\044\101\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\004\006" +
    "\114\001\002\000\004\006\111\001\002\000\034\007\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\045\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002" +
    "\000\034\007\uff94\024\uff94\025\uff94\026\uff94\027\uff94\031" +
    "\uff94\045\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\001\002\000\010\045\110\052\063\053\062\001" +
    "\002\000\034\007\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\031\uff8b\045\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\001\002\000\004\006\104\001\002\000\036" +
    "\007\uff92\024\uff92\025\uff92\026\uff92\027\uff92\031\uff92\044" +
    "\035\045\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\001\002\000\034\007\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\031\uff91\045\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\001\002\000\004\006\067\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\034\007" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90\045\uff90" +
    "\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\001" +
    "\002\000\034\007\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\031\uff97\045\uff97\052\uff97\053\uff97\054\054\055\055\056" +
    "\053\057\uff97\001\002\000\024\006\050\022\045\047\040" +
    "\050\046\051\051\053\037\070\036\071\047\072\044\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\024\006" +
    "\050\022\045\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\034\007\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\031\uff95\045\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\001\002\000\034\007" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\031\uff96\045\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001" +
    "\002\000\034\007\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\031\uff93\045\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\001\002\000\010\007\064\052\063\053\062" +
    "\001\002\000\024\006\050\022\045\047\040\050\046\051" +
    "\051\053\037\070\036\071\047\072\044\001\002\000\024" +
    "\006\050\022\045\047\040\050\046\051\051\053\037\070" +
    "\036\071\047\072\044\001\002\000\034\007\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\031\uff8e\045\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\001\002\000\034" +
    "\007\uff99\024\uff99\025\uff99\026\uff99\027\uff99\031\uff99\045" +
    "\uff99\052\uff99\053\uff99\054\054\055\055\056\053\057\uff99" +
    "\001\002\000\034\007\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\031\uff98\045\uff98\052\uff98\053\uff98\054\054\055\055" +
    "\056\053\057\uff98\001\002\000\030\006\050\007\071\022" +
    "\045\023\070\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\006\007\uffd9\026\uffd9\001" +
    "\002\000\034\007\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\031\uff9b\045\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\001\002\000\012\007\uffda\026\uffda\052\063" +
    "\053\062\001\002\000\006\007\075\026\074\001\002\000" +
    "\026\006\050\022\045\023\076\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\034\007" +
    "\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\045\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001" +
    "\002\000\006\007\uffd8\026\uffd8\001\002\000\012\007\uffdb" +
    "\026\uffdb\052\063\053\062\001\002\000\036\007\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\031\uff8c\044\101\045\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\010\045" +
    "\103\052\063\053\062\001\002\000\036\007\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\031\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002" +
    "\000\030\006\050\007\105\022\045\023\070\047\040\050" +
    "\046\051\051\053\037\070\036\071\047\072\044\001\002" +
    "\000\034\007\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031" +
    "\uff9a\045\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\001\002\000\006\007\107\026\074\001\002\000" +
    "\034\007\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d" +
    "\045\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\036\007\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\031\uffdf\044\uffdf\045\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\001\002\000\024\006\050" +
    "\022\045\047\040\050\046\051\051\053\037\070\036\071" +
    "\047\072\044\001\002\000\010\007\113\052\063\053\062" +
    "\001\002\000\034\007\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\031\uff8d\045\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\001\002\000\030\006\050\007\115\022" +
    "\045\023\070\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\034\007\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\031\uff9c\045\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\006\007" +
    "\117\026\074\001\002\000\034\007\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\031\uff9f\045\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\012\024\uffce" +
    "\026\uffce\052\063\053\062\001\002\000\024\006\050\022" +
    "\045\047\040\050\046\051\051\053\037\070\036\071\047" +
    "\072\044\001\002\000\010\024\uffcd\026\uffcd\044\101\001" +
    "\002\000\012\024\uffcc\026\uffcc\052\063\053\062\001\002" +
    "\000\004\024\125\001\002\000\016\012\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\043\ufff9\067\ufff9\001\002\000\016\012\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\043\ufff7\067\ufff7\001\002\000" +
    "\010\006\137\024\uffc5\026\uffc5\001\002\000\006\024\uffcb" +
    "\026\131\001\002\000\004\022\132\001\002\000\010\006" +
    "\133\024\uffca\026\uffca\001\002\000\030\006\050\007\134" +
    "\022\045\023\070\047\040\050\046\051\051\053\037\070" +
    "\036\071\047\072\044\001\002\000\006\024\uffc8\026\uffc8" +
    "\001\002\000\006\007\136\026\074\001\002\000\006\024" +
    "\uffc9\026\uffc9\001\002\000\030\006\050\007\140\022\045" +
    "\023\070\047\040\050\046\051\051\053\037\070\036\071" +
    "\047\072\044\001\002\000\006\024\uffc7\026\uffc7\001\002" +
    "\000\006\007\142\026\074\001\002\000\006\024\uffc6\026" +
    "\uffc6\001\002\000\012\024\uffc2\025\155\026\uffc2\044\035" +
    "\001\002\000\026\006\050\022\045\026\153\047\040\050" +
    "\046\051\051\053\037\070\036\071\047\072\044\001\002" +
    "\000\006\024\uffd1\026\146\001\002\000\004\022\147\001" +
    "\002\000\012\024\uffc4\025\150\026\uffc4\044\035\001\002" +
    "\000\024\006\050\022\045\047\040\050\046\051\051\053" +
    "\037\070\036\071\047\072\044\001\002\000\010\024\uffbf" +
    "\026\uffbf\044\101\001\002\000\012\024\uffc3\026\uffc3\052" +
    "\063\053\062\001\002\000\006\024\uffbd\026\uffbd\001\002" +
    "\000\012\024\uffbe\026\uffbe\052\063\053\062\001\002\000" +
    "\024\006\050\022\045\047\040\050\046\051\051\053\037" +
    "\070\036\071\047\072\044\001\002\000\010\024\uffc0\026" +
    "\uffc0\044\101\001\002\000\012\024\uffc1\026\uffc1\052\063" +
    "\053\062\001\002\000\016\012\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\043\ufff8\067\ufff8\001\002\000\004\002\000\001\002" +
    "\000\004\046\163\001\002\000\004\006\164\001\002\000" +
    "\004\007\165\001\002\000\004\010\166\001\002\000\052" +
    "\003\210\011\ufff5\014\173\015\174\016\215\017\014\020" +
    "\021\021\025\022\201\030\177\032\172\034\216\035\204" +
    "\042\207\043\024\062\176\067\020\070\036\071\047\072" +
    "\044\001\002\000\004\024\u015c\001\002\000\004\024\u015b" +
    "\001\002\000\004\024\u015a\001\002\000\004\006\u0154\001" +
    "\002\000\004\006\u014e\001\002\000\004\006\u014c\001\002" +
    "\000\060\003\210\011\ufff0\014\173\015\174\016\215\017" +
    "\014\020\021\021\025\022\201\030\177\032\172\034\216" +
    "\035\204\042\207\043\024\061\ufff0\062\176\063\ufff0\064" +
    "\ufff0\067\020\070\036\071\047\072\044\001\002\000\004" +
    "\006\u0120\001\002\000\004\006\u0103\001\002\000\012\011" +
    "\ufff4\061\ufff4\063\ufff4\064\ufff4\001\002\000\006\025\373" +
    "\044\035\001\002\000\060\003\uffe8\011\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030\uffe8" +
    "\032\uffe8\034\uffe8\035\uffe8\042\uffe8\043\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\001\002\000\060\003\uffea\011\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\030\uffea\032\uffea" +
    "\034\uffea\035\uffea\042\uffea\043\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\067\uffea\070\uffea\071\uffea\072\uffea\001\002" +
    "\000\004\010\307\001\002\000\060\003\uffe7\011\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\030\uffe7\032\uffe7\034\uffe7\035\uffe7\042\uffe7\043\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\001\002\000\004\024\306\001\002\000\004\006" +
    "\271\001\002\000\030\006\050\007\266\022\045\024\270" +
    "\047\040\050\046\051\051\053\037\070\036\071\047\072" +
    "\044\001\002\000\004\024\uffef\001\002\000\060\003\uffeb" +
    "\011\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\030\uffeb\032\uffeb\034\uffeb\035\uffeb\042\uffeb" +
    "\043\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\001\002\000\004\024\uffed\001\002" +
    "\000\004\011\261\001\002\000\004\006\257\001\002\000" +
    "\004\006\217\001\002\000\012\017\014\020\021\021\025" +
    "\022\220\001\002\000\006\024\uffb0\025\255\001\002\000" +
    "\004\022\252\001\002\000\004\024\223\001\002\000\004" +
    "\022\224\001\002\000\004\057\225\001\002\000\024\006" +
    "\050\022\045\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\010\024\227\052\063\053" +
    "\062\001\002\000\004\022\230\001\002\000\010\025\233" +
    "\052\232\053\231\001\002\000\004\025\uffb1\001\002\000" +
    "\004\025\uffb2\001\002\000\024\006\050\022\045\047\040" +
    "\050\046\051\051\053\037\070\036\071\047\072\044\001" +
    "\002\000\004\025\235\001\002\000\024\006\050\022\045" +
    "\047\040\050\046\051\051\053\037\070\036\071\047\072" +
    "\044\001\002\000\010\024\237\052\063\053\062\001\002" +
    "\000\004\007\240\001\002\000\004\010\241\001\002\000" +
    "\052\003\210\011\ufff5\014\173\015\174\016\215\017\014" +
    "\020\021\021\025\022\201\030\177\032\172\034\216\035" +
    "\204\042\207\043\024\062\176\067\020\070\036\071\047" +
    "\072\044\001\002\000\004\011\243\001\002\000\060\003" +
    "\uffb4\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\030\uffb4\032\uffb4\034\uffb4\035\uffb4\042" +
    "\uffb4\043\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\001\002\000\010\024\245\052" +
    "\063\053\062\001\002\000\004\007\246\001\002\000\004" +
    "\010\247\001\002\000\052\003\210\011\ufff5\014\173\015" +
    "\174\016\215\017\014\020\021\021\025\022\201\030\177" +
    "\032\172\034\216\035\204\042\207\043\024\062\176\067" +
    "\020\070\036\071\047\072\044\001\002\000\004\011\251" +
    "\001\002\000\060\003\uffb3\011\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\030\uffb3\032\uffb3" +
    "\034\uffb3\035\uffb3\042\uffb3\043\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\001\002" +
    "\000\004\025\253\001\002\000\024\006\050\022\045\047" +
    "\040\050\046\051\051\053\037\070\036\071\047\072\044" +
    "\001\002\000\010\024\uffae\052\063\053\062\001\002\000" +
    "\024\006\050\022\045\047\040\050\046\051\051\053\037" +
    "\070\036\071\047\072\044\001\002\000\010\024\uffaf\052" +
    "\063\053\062\001\002\000\004\007\260\001\002\000\004" +
    "\024\uffd3\001\002\000\004\002\ufff6\001\002\000\004\024" +
    "\263\001\002\000\060\003\uffec\011\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\030\uffec\032" +
    "\uffec\034\uffec\035\uffec\042\uffec\043\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\067\uffec\070\uffec\071\uffec\072\uffec\001" +
    "\002\000\004\024\265\001\002\000\060\003\uffee\011\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\030\uffee\032\uffee\034\uffee\035\uffee\042\uffee\043\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\067\uffee\070\uffee\071" +
    "\uffee\072\uffee\001\002\000\060\003\uffe4\011\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\030" +
    "\uffe4\032\uffe4\034\uffe4\035\uffe4\042\uffe4\043\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\067\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\001\002\000\010\024\uffd6\052\063\053\062\001\002" +
    "\000\060\003\uffe5\011\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\030\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\042\uffe5\043\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\001\002\000\010" +
    "\007\273\023\274\060\272\001\002\000\004\026\276\001" +
    "\002\000\004\024\uffa1\001\002\000\004\007\275\001\002" +
    "\000\004\024\uffa2\001\002\000\026\003\300\006\050\022" +
    "\045\047\040\050\046\051\051\053\037\070\036\071\047" +
    "\072\044\001\002\000\012\007\uffa4\026\uffa4\052\063\053" +
    "\062\001\002\000\024\006\050\022\045\047\040\050\046" +
    "\051\051\053\037\070\036\071\047\072\044\001\002\000" +
    "\006\007\303\026\302\001\002\000\024\006\050\022\045" +
    "\047\040\050\046\051\051\053\037\070\036\071\047\072" +
    "\044\001\002\000\004\024\uffa0\001\002\000\012\007\uffa5" +
    "\026\uffa5\052\063\053\062\001\002\000\012\007\uffa3\026" +
    "\uffa3\052\063\053\062\001\002\000\060\003\uffe3\011\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3\042\uffe3\043\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\001\002\000\052\003\210\011\ufff5\014\173" +
    "\015\174\016\215\017\014\020\021\021\025\022\201\030" +
    "\177\032\172\034\216\035\204\042\207\043\024\062\176" +
    "\067\020\070\036\071\047\072\044\001\002\000\004\011" +
    "\311\001\002\000\004\032\312\001\002\000\004\006\313" +
    "\001\002\000\022\006\325\022\317\047\314\050\321\051" +
    "\326\070\036\071\047\072\044\001\002\000\026\007\uff65" +
    "\025\uff65\027\uff65\031\uff65\052\uff65\053\uff65\054\uff65\055" +
    "\uff65\056\uff65\057\uff65\001\002\000\026\007\uff6a\025\uff6a" +
    "\027\uff6a\031\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\057\uff6a\001\002\000\026\007\uff63\025\uff63\027\uff63" +
    "\031\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057" +
    "\uff63\001\002\000\030\007\uff68\025\uff68\027\uff68\031\uff68" +
    "\044\035\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057" +
    "\uff68\001\002\000\010\007\uff7b\027\uff7b\031\uff7b\001\002" +
    "\000\026\007\uff67\025\uff67\027\uff67\031\uff67\052\uff67\053" +
    "\uff67\054\uff67\055\uff67\056\uff67\057\uff67\001\002\000\020" +
    "\007\uff72\025\346\027\uff72\031\uff72\052\366\053\365\057" +
    "\345\001\002\000\026\007\uff6d\025\uff6d\027\uff6d\031\uff6d" +
    "\052\uff6d\053\uff6d\054\360\055\361\056\357\057\uff6d\001" +
    "\002\000\010\007\uff7d\027\uff7d\031\333\001\002\000\022" +
    "\006\325\022\317\047\314\050\321\051\326\070\036\071" +
    "\047\072\044\001\002\000\026\007\uff66\025\uff66\027\uff66" +
    "\031\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057" +
    "\uff66\001\002\000\006\007\331\027\330\001\002\000\022" +
    "\006\325\022\317\047\314\050\321\051\326\070\036\071" +
    "\047\072\044\001\002\000\004\024\uffb5\001\002\000\010" +
    "\007\uff7e\027\uff7e\031\333\001\002\000\022\006\325\022" +
    "\317\047\314\050\321\051\326\070\036\071\047\072\044" +
    "\001\002\000\010\007\uff7c\027\uff7c\031\uff7c\001\002\000" +
    "\006\007\336\027\330\001\002\000\026\007\uff78\025\uff78" +
    "\027\uff78\031\uff78\052\340\053\337\054\342\055\343\056" +
    "\341\057\uff78\001\002\000\024\006\050\022\045\047\040" +
    "\050\046\051\051\053\037\070\036\071\047\072\044\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\024\006" +
    "\050\022\045\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\024\006\050\022\045\047" +
    "\040\050\046\051\051\053\037\070\036\071\047\072\044" +
    "\001\002\000\024\006\050\022\045\047\040\050\046\051" +
    "\051\053\037\070\036\071\047\072\044\001\002\000\014" +
    "\007\uff72\025\346\027\uff72\031\uff72\057\345\001\002\000" +
    "\024\006\050\022\045\047\040\050\046\051\051\053\037" +
    "\070\036\071\047\072\044\001\002\000\024\006\050\022" +
    "\045\047\040\050\046\051\051\053\037\070\036\071\047" +
    "\072\044\001\002\000\010\007\uff79\027\uff79\031\uff79\001" +
    "\002\000\014\007\uff70\027\uff70\031\uff70\052\063\053\062" +
    "\001\002\000\014\007\uff71\027\uff71\031\uff71\052\063\053" +
    "\062\001\002\000\020\007\uff74\025\uff74\027\uff74\031\uff74" +
    "\052\063\053\062\057\uff74\001\002\000\020\007\uff75\025" +
    "\uff75\027\uff75\031\uff75\052\063\053\062\057\uff75\001\002" +
    "\000\020\007\uff73\025\uff73\027\uff73\031\uff73\052\063\053" +
    "\062\057\uff73\001\002\000\020\007\uff77\025\uff77\027\uff77" +
    "\031\uff77\052\063\053\062\057\uff77\001\002\000\020\007" +
    "\uff76\025\uff76\027\uff76\031\uff76\052\063\053\062\057\uff76" +
    "\001\002\000\024\006\050\022\045\047\040\050\046\051" +
    "\051\053\037\070\036\071\047\072\044\001\002\000\024" +
    "\006\050\022\045\047\040\050\046\051\051\053\037\070" +
    "\036\071\047\072\044\001\002\000\024\006\050\022\045" +
    "\047\040\050\046\051\051\053\037\070\036\071\047\072" +
    "\044\001\002\000\026\007\uff6b\025\uff6b\027\uff6b\031\uff6b" +
    "\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\001" +
    "\002\000\026\007\uff6c\025\uff6c\027\uff6c\031\uff6c\052\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\001\002\000" +
    "\026\007\uff69\025\uff69\027\uff69\031\uff69\052\uff69\053\uff69" +
    "\054\uff69\055\uff69\056\uff69\057\uff69\001\002\000\024\006" +
    "\050\022\045\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\024\006\050\022\045\047" +
    "\040\050\046\051\051\053\037\070\036\071\047\072\044" +
    "\001\002\000\010\007\uff7a\027\uff7a\031\uff7a\001\002\000" +
    "\026\007\uff6f\025\uff6f\027\uff6f\031\uff6f\052\uff6f\053\uff6f" +
    "\054\054\055\055\056\053\057\uff6f\001\002\000\026\007" +
    "\uff6e\025\uff6e\027\uff6e\031\uff6e\052\uff6e\053\uff6e\054\054" +
    "\055\055\056\053\057\uff6e\001\002\000\030\007\uff64\025" +
    "\uff64\027\uff64\031\uff64\044\101\052\uff64\053\uff64\054\uff64" +
    "\055\uff64\056\uff64\057\uff64\001\002\000\026\006\050\016" +
    "\u0100\022\045\047\040\050\046\051\051\053\037\070\036" +
    "\071\047\072\044\001\002\000\006\025\375\044\101\001" +
    "\002\000\024\006\050\022\045\047\040\050\046\051\051" +
    "\053\037\070\036\071\047\072\044\001\002\000\010\024" +
    "\uffd5\052\063\053\062\001\002\000\010\024\uffd7\052\063" +
    "\053\062\001\002\000\004\006\u0101\001\002\000\004\007" +
    "\u0102\001\002\000\004\024\uffd2\001\002\000\022\006\325" +
    "\022\317\047\314\050\321\051\326\070\036\071\047\072" +
    "\044\001\002\000\006\007\u0105\027\330\001\002\000\004" +
    "\010\u0106\001\002\000\052\003\210\011\ufff5\014\173\015" +
    "\174\016\215\017\014\020\021\021\025\022\201\030\177" +
    "\032\172\034\216\035\204\042\207\043\024\062\176\067" +
    "\020\070\036\071\047\072\044\001\002\000\004\011\u0108" +
    "\001\002\000\062\003\uffbc\011\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\030\uffbc\032\uffbc" +
    "\033\u0109\034\uffbc\035\uffbc\042\uffbc\043\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\001\002\000\006\010\u0116\030\u0117\001\002\000\062\003" +
    "\uffba\011\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\030\uffba\032\uffba\033\u010b\034\uffba\035" +
    "\uffba\042\uffba\043\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\001\002\000\006\010" +
    "\u010c\030\u010d\001\002\000\052\003\210\011\ufff5\014\173" +
    "\015\174\016\215\017\014\020\021\021\025\022\201\030" +
    "\177\032\172\034\216\035\204\042\207\043\024\062\176" +
    "\067\020\070\036\071\047\072\044\001\002\000\004\006" +
    "\u010e\001\002\000\022\006\325\022\317\047\314\050\321" +
    "\051\326\070\036\071\047\072\044\001\002\000\006\007" +
    "\u0110\027\330\001\002\000\004\010\u0111\001\002\000\052" +
    "\003\210\011\ufff5\014\173\015\174\016\215\017\014\020" +
    "\021\021\025\022\201\030\177\032\172\034\216\035\204" +
    "\042\207\043\024\062\176\067\020\070\036\071\047\072" +
    "\044\001\002\000\004\011\u0113\001\002\000\062\003\uffb8" +
    "\011\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\042\uffb8\043\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\001\002\000\004\011\u0115" +
    "\001\002\000\060\003\uffb9\011\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\030\uffb9\032\uffb9" +
    "\034\uffb9\035\uffb9\042\uffb9\043\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\001\002" +
    "\000\052\003\210\011\ufff5\014\173\015\174\016\215\017" +
    "\014\020\021\021\025\022\201\030\177\032\172\034\216" +
    "\035\204\042\207\043\024\062\176\067\020\070\036\071" +
    "\047\072\044\001\002\000\004\006\u0118\001\002\000\022" +
    "\006\325\022\317\047\314\050\321\051\326\070\036\071" +
    "\047\072\044\001\002\000\006\007\u011a\027\330\001\002" +
    "\000\004\010\u011b\001\002\000\052\003\210\011\ufff5\014" +
    "\173\015\174\016\215\017\014\020\021\021\025\022\201" +
    "\030\177\032\172\034\216\035\204\042\207\043\024\062" +
    "\176\067\020\070\036\071\047\072\044\001\002\000\004" +
    "\011\u011d\001\002\000\062\003\uffb7\011\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\030\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\042\uffb7\043\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\001\002\000\004\011\u011f\001\002\000\060\003" +
    "\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\030\uffbb\032\uffbb\034\uffbb\035\uffbb\042" +
    "\uffbb\043\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\001\002\000\004\022\u0121\001" +
    "\002\000\004\007\u0122\001\002\000\004\010\u0123\001\002" +
    "\000\010\003\u0125\061\u0124\063\u0128\001\002\000\004\065" +
    "\u0148\001\002\000\006\061\u0124\063\u0128\001\002\000\010" +
    "\011\uffab\061\uffab\063\uffab\001\002\000\010\011\u0145\061" +
    "\u0124\063\u0128\001\002\000\014\006\u012c\047\u0130\050\u012b" +
    "\051\u012e\053\u0129\001\002\000\004\006\u0142\001\002\000" +
    "\020\007\uff88\052\uff88\053\uff88\054\u013a\055\u013b\056\u0139" +
    "\065\uff88\001\002\000\020\007\uff83\052\uff83\053\uff83\054" +
    "\uff83\055\uff83\056\uff83\065\uff83\001\002\000\014\006\u012c" +
    "\047\u0130\050\u012b\051\u012e\053\u0129\001\002\000\010\052" +
    "\u0132\053\u0131\065\u0133\001\002\000\020\007\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\065\uff82\001\002\000" +
    "\020\007\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\065\uff85\001\002\000\020\007\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\065\uff81\001\002\000\014\006\u012c" +
    "\047\u0130\050\u012b\051\u012e\053\u0129\001\002\000\014\006" +
    "\u012c\047\u0130\050\u012b\051\u012e\053\u0129\001\002\000\060" +
    "\003\210\011\ufff5\014\173\015\174\016\215\017\014\020" +
    "\021\021\025\022\201\030\177\032\172\034\216\035\204" +
    "\042\207\043\024\061\ufff5\062\176\063\ufff5\064\ufff5\067" +
    "\020\070\036\071\047\072\044\001\002\000\012\011\uffa6" +
    "\061\uffa6\063\uffa6\064\u0136\001\002\000\010\011\uffa9\061" +
    "\uffa9\063\uffa9\001\002\000\004\024\u0137\001\002\000\010" +
    "\011\uffa7\061\uffa7\063\uffa7\001\002\000\020\007\uff8a\052" +
    "\uff8a\053\uff8a\054\u013a\055\u013b\056\u0139\065\uff8a\001\002" +
    "\000\014\006\u012c\047\u0130\050\u012b\051\u012e\053\u0129\001" +
    "\002\000\014\006\u012c\047\u0130\050\u012b\051\u012e\053\u0129" +
    "\001\002\000\014\006\u012c\047\u0130\050\u012b\051\u012e\053" +
    "\u0129\001\002\000\020\007\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\065\uff86\001\002\000\020\007\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\065\uff87\001\002" +
    "\000\020\007\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\065\uff84\001\002\000\020\007\uff89\052\uff89\053\uff89" +
    "\054\u013a\055\u013b\056\u0139\065\uff89\001\002\000\010\007" +
    "\u0141\052\u0132\053\u0131\001\002\000\020\007\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\056\uff80\065\uff80\001\002\000" +
    "\014\006\u012c\047\u0130\050\u012b\051\u012e\053\u0129\001\002" +
    "\000\010\007\u0144\052\u0132\053\u0131\001\002\000\020\007" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\065\uff7f" +
    "\001\002\000\060\003\uffad\011\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\030\uffad\032\uffad" +
    "\034\uffad\035\uffad\042\uffad\043\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\067\uffad\070\uffad\071\uffad\072\uffad\001\002" +
    "\000\010\011\uffac\061\uffac\063\uffac\001\002\000\010\011" +
    "\uffaa\061\uffaa\063\uffaa\001\002\000\060\003\210\011\ufff5" +
    "\014\173\015\174\016\215\017\014\020\021\021\025\022" +
    "\201\030\177\032\172\034\216\035\204\042\207\043\024" +
    "\061\ufff5\062\176\063\ufff5\064\ufff5\067\020\070\036\071" +
    "\047\072\044\001\002\000\012\011\uffa6\061\uffa6\063\uffa6" +
    "\064\u0136\001\002\000\010\011\uffa8\061\uffa8\063\uffa8\001" +
    "\002\000\012\011\ufff1\061\ufff1\063\ufff1\064\ufff1\001\002" +
    "\000\004\007\u014d\001\002\000\004\024\uffe1\001\002\000" +
    "\004\060\u014f\001\002\000\004\026\u0150\001\002\000\004" +
    "\013\u0151\001\002\000\004\022\u0152\001\002\000\004\007" +
    "\u0153\001\002\000\004\024\uffd4\001\002\000\022\006\325" +
    "\022\317\047\314\050\321\051\326\070\036\071\047\072" +
    "\044\001\002\000\006\007\u0156\027\330\001\002\000\004" +
    "\010\u0157\001\002\000\052\003\210\011\ufff5\014\173\015" +
    "\174\016\215\017\014\020\021\021\025\022\201\030\177" +
    "\032\172\034\216\035\204\042\207\043\024\062\176\067" +
    "\020\070\036\071\047\072\044\001\002\000\004\011\u0159" +
    "\001\002\000\060\003\uffb6\011\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\030\uffb6\032\uffb6" +
    "\034\uffb6\035\uffb6\042\uffb6\043\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\001\002" +
    "\000\060\003\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\030\uffe9\032\uffe9\034\uffe9" +
    "\035\uffe9\042\uffe9\043\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\060" +
    "\003\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\030\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\042\uffe2\043\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002\000\060\003\uffe6" +
    "\011\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\030\uffe6\032\uffe6\034\uffe6\035\uffe6\042\uffe6" +
    "\043\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\010\002\006\005\003\060\004\001\001\000" +
    "\012\004\016\006\014\007\022\034\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\160\001\001\000\002\001" +
    "\001\000\004\035\144\001\001\000\004\010\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\016\034" +
    "\123\001\001\000\004\004\025\001\001\000\002\001\001" +
    "\000\004\036\027\001\001\000\004\056\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\033\001\001" +
    "\000\012\014\042\026\117\027\051\030\040\001\001\000" +
    "\002\001\001\000\012\014\042\026\041\027\051\030\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\042\026\060\027\051" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\042\030\057\001\001\000\006\014\042\030\056" +
    "\001\001\000\006\014\042\030\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\042\027\065\030\040\001\001\000\010\014" +
    "\042\027\064\030\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\072\014\042\026" +
    "\071\027\051\030\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\042\026\076\027\051\030\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\042\026\101\027\051\030\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\105\014\042\026" +
    "\071\027\051\030\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\042\026\111\027\051\030\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\115\014\042\026\071\027" +
    "\051\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\042\026" +
    "\122\027\051\030\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\134\014\042\026\071\027" +
    "\051\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\140\014\042\026\071\027" +
    "\051\030\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\155\001\001\000\012\014" +
    "\042\026\153\027\051\030\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\150\001\001\000\012\014" +
    "\042\026\151\027\051\030\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\042\026\156\027\051\030\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\016\012\174\013\210\014" +
    "\205\016\211\017\202\020\170\021\201\024\177\025\213" +
    "\034\212\052\204\054\166\057\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\016\012" +
    "\174\013\210\014\205\016\211\017\202\020\170\021\201" +
    "\024\u014a\034\212\052\204\054\166\057\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\042\026\266\027\051\030\040\001" +
    "\001\000\004\062\263\001\001\000\002\001\001\000\004" +
    "\063\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\220\023\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\042\026\225\027\051" +
    "\030\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\042\026\243\027\051\030\040\001\001\000" +
    "\002\001\001\000\012\014\042\026\235\027\051\030\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\016\012\174\013\210\014\205\016\211" +
    "\017\202\020\170\021\201\024\177\025\241\034\212\052" +
    "\204\054\166\057\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\016\012\174\013\210\014\205\016\211" +
    "\017\202\020\170\021\201\024\177\025\247\034\212\052" +
    "\204\054\166\057\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\042\026\253\027" +
    "\051\030\040\001\001\000\002\001\001\000\012\014\042" +
    "\026\255\027\051\030\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\042\026\276" +
    "\027\051\030\040\055\300\001\001\000\002\001\001\000" +
    "\012\014\042\026\304\027\051\030\040\001\001\000\002" +
    "\001\001\000\012\014\042\026\303\027\051\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\016\012\174\013\210\014" +
    "\205\016\211\017\202\020\170\021\201\024\177\025\307" +
    "\034\212\052\204\054\166\057\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\315" +
    "\037\321\040\322\041\314\044\323\045\317\046\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\315\037\321\040\322\041\314\044" +
    "\323\045\317\046\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\315\037\321\040\322\041\314\044" +
    "\331\045\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\315\037\321\040\322\041\314\045\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\343" +
    "\001\001\000\012\014\042\026\355\027\051\030\040\001" +
    "\001\000\012\014\042\026\354\027\051\030\040\001\001" +
    "\000\012\014\042\026\353\027\051\030\040\001\001\000" +
    "\012\014\042\026\352\027\051\030\040\001\001\000\012" +
    "\014\042\026\351\027\051\030\040\001\001\000\004\043" +
    "\346\001\001\000\012\014\042\026\350\027\051\030\040" +
    "\001\001\000\012\014\042\026\347\027\051\030\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\042\030\363" +
    "\001\001\000\006\014\042\030\362\001\001\000\006\014" +
    "\042\030\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\042\027\370\030\040\001" +
    "\001\000\010\014\042\027\367\030\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\042\026\376\027\051\030\040\001\001" +
    "\000\002\001\001\000\012\014\042\026\375\027\051\030" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\315\037\321\040\322\041\314\044\323\045\317\046\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\016\012\174\013\210\014\205\016\211\017\202\020\170" +
    "\021\201\024\177\025\u0106\034\212\052\204\054\166\057" +
    "\167\001\001\000\002\001\001\000\004\015\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\016\012\174\013\210\014\205\016\211\017\202" +
    "\020\170\021\201\024\177\025\u0113\034\212\052\204\054" +
    "\166\057\167\001\001\000\002\001\001\000\020\014\315" +
    "\037\321\040\322\041\314\044\323\045\317\046\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\016" +
    "\012\174\013\210\014\205\016\211\017\202\020\170\021" +
    "\201\024\177\025\u0111\034\212\052\204\054\166\057\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\016\012\174\013\210" +
    "\014\205\016\211\017\202\020\170\021\201\024\177\025" +
    "\u011d\034\212\052\204\054\166\057\167\001\001\000\002" +
    "\001\001\000\020\014\315\037\321\040\322\041\314\044" +
    "\323\045\317\046\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\016\012\174\013\210\014\205\016" +
    "\211\017\202\020\170\021\201\024\177\025\u011b\034\212" +
    "\052\204\054\166\057\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\u0126\051\u0125\001\001\000\002\001\001\000\004\051\u0146" +
    "\001\001\000\002\001\001\000\004\051\u0145\001\001\000" +
    "\010\031\u012c\032\u012e\033\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\u013f\032" +
    "\u012e\033\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u012e\033" +
    "\u013e\001\001\000\006\032\u012e\033\u0137\001\001\000\036" +
    "\004\016\012\174\013\210\014\205\016\211\017\202\020" +
    "\170\021\201\024\177\025\u0133\034\212\052\204\054\166" +
    "\057\167\001\001\000\004\050\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u013d\001\001\000\004\032\u013c\001\001\000" +
    "\004\032\u013b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u0142\032\u012e\033\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\016\012\174" +
    "\013\210\014\205\016\211\017\202\020\170\021\201\024" +
    "\177\025\u0148\034\212\052\204\054\166\057\167\001\001" +
    "\000\004\050\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\315\037\321" +
    "\040\322\041\314\044\323\045\317\046\u0154\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\016\012\174" +
    "\013\210\014\205\016\211\017\202\020\170\021\201\024" +
    "\177\025\u0157\034\212\052\204\054\166\057\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ccup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ccup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ccup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Controlador_ controlador=new Controlador_();
    public ErrorClass errores=new ErrorClass();
    boolean hasGlobal=false,VBGLOBAL=false,PYGLOBAL=false;
    ArrayList<String> librerias=new ArrayList();
    ArrayList<Instruccion> variablesGlobales=new ArrayList();
    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
     this.errores.AddError(1,s.left,s.right,s.value.toString());
    }
    public void syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
        this.errores.AddError(1,s.left,s.right,s.value.toString());

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ccup$actions {
  private final ccup parser;

  /** Constructor */
  CUP$ccup$actions(ccup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ccup$do_action_part00000000(
    int                        CUP$ccup$act_num,
    java_cup.runtime.lr_parser CUP$ccup$parser,
    java.util.Stack            CUP$ccup$stack,
    int                        CUP$ccup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ccup$result;

      /* select the action based on the action number */
      switch (CUP$ccup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT = start_val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ccup$parser.done_parsing();
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= library global codigoc 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // library ::= 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("library",3, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // library ::= librerias 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("library",3, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // librerias ::= librerias INCLUDE CADENA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
String tmp=x.replaceAll(" ","");
x=tmp.replaceAll("\n","");
tmp=x.replaceAll("\t","");
if(tmp.equals("JAVA.*")){
 this.parser.hasGlobal=true;
}
if(!this.parser.hasGlobal){
if(tmp.startsWith("JAVA."))
{
this.parser.librerias.add(tmp);
}
}

if(tmp.equals("PY")){
this.parser.PYGLOBAL=true;
}
else if(tmp.equals("VB")){
this.parser.VBGLOBAL=true;
}
if(this.parser.hasGlobal){
this.parser.librerias=null;
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("librerias",46, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // librerias ::= INCLUDE CADENA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
String tmp=x.replaceAll(" ","");
x=tmp.replaceAll("\n","");
tmp=x.replaceAll("\t","");
if(tmp.equals("JAVA.*")){
 this.parser.hasGlobal=true;
}
if(!this.parser.hasGlobal){
if(tmp.startsWith("JAVA."))
{
this.parser.librerias.add(tmp);
}
}

if(tmp.equals("PY")){
this.parser.PYGLOBAL=true;
}
else if(tmp.equals("VB")){
this.parser.VBGLOBAL=true;
}
if(this.parser.hasGlobal){
this.parser.librerias=null;
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("librerias",46, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("global",4, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= global_var 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("global",4, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_var ::= global_var declaracion_var PUNTOCOMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.variablesGlobales.add(x);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("global_var",5, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global_var ::= declaracion_var PUNTOCOMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.variablesGlobales.add(x);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("global_var",5, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global_var ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("global_var",5, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoc ::= VOID MAIN AP CP AC datos2 CC 
            {
              ambito_ RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ x = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
 RESULT=x;
 x.errores=this.parser.errores;
        ArrayList<VariableDeclaracion> variableDeclaracions=new ArrayList();
        if(this.parser.variablesGlobales!=null){
          if(!this.parser.variablesGlobales.isEmpty()){
            for (int i = 0; i < this.parser.variablesGlobales.size(); i++) {
              Instruccion xx=this.parser.variablesGlobales.get(i);
              xx.errores=this.parser.errores;
              if(!variableDeclaracions.isEmpty()){
                xx.initDatas(variableDeclaracions);
              }
              xx.validate(false);
              variableDeclaracions=xx.variables;
            }
          }
        }
        Controlador_.verifyInstr(variableDeclaracions,this.parser.errores);
        x.validate(false);
 
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("codigoc",47, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datos2 ::= 
            {
              ambito_ RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("datos2",19, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datos2 ::= instrucciones_fun 
            {
              ambito_ RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=am;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("datos2",19, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instrucciones instruccion 
            {
              ambito_ RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= instruccion 
            {
              ambito_ RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones_fun ::= instruccion instrucciones_fun 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ambito_ val = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
val.addIndex(ins);
RESULT=val;
}catch(Exception ex){
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",18, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones_fun ::= instruccion 
            {
              ambito_ RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instrucciones_fun",18, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion_var NT$0 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= declaracion_var NT$1 PUNTOCOMA 
            {
              Instruccion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Instruccion) ((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= if_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= while_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= dowhile_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= for_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= switch_var 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= print_var PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		System.out.println(";");
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= error CP 
            {
              Instruccion RESULT =null;
		System.out.println("cp");
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= callfun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= clear_screen PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=x;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clear_screen ::= CLEAR AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new inst_clear();

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("clear_screen",45, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dimensiones ::= dimensiones ACOR e CCOR 
            {
              ArrayList<NodoAritmetica> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		ArrayList<NodoAritmetica> list = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
list.add(nodo);
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("dimensiones",44, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dimensiones ::= ACOR e CCOR 
            {
              ArrayList<NodoAritmetica> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new ArrayList();
RESULT.add(nodo);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("dimensiones",44, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos ::= INT 
            {
              Integer RESULT =null;
		RESULT=1;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipos ::= DOUBLE 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipos ::= CHAR 
            {
              Integer RESULT =null;
		RESULT=2;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argumentos ::= argumentos COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("argumentos",1, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argumentos ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("argumentos",1, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argumentos ::= CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(str));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("argumentos",1, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argumentos ::= argumentos COMA CADENA 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
list.add(new argumento_dato(str));
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("argumentos",1, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_var ::= ID EQUALS e 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,nodo,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_var ::= error e 
            {
              Instruccion RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion_var ::= ID dimensiones EQUALS e 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new instr_asignacion(id,nodos,nodo,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion_var ::= SCANF AP MASCARA COMA Y ID CP 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new asig_c (id,t,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion_var ::= GETCH AP CP 
            {
              Instruccion RESULT =null;
		
RESULT=new instr_getch();

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion_var ::= ID EQUALS GETCH AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		
RESULT=new instr_getch(id,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("asignacion_var",9, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_var ::= tipos variables 
            {
              Instruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declaracion_var",26, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_var ::= CONST tipos variables_const 
            {
              Instruccion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declaracion_var",26, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variables_const ::= variables_const COMA ID dimensiones 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
VariableDeclaracion var=new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables_const",28, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variables_const ::= variables_const COMA ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
VariableDeclaracion var=new VariableDeclaracion(id,nodo,idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables_const",28, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variables_const ::= ID dimensiones 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
VariableDeclaracion var=new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright);
var.isConst=true;
RESULT.add(var);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables_const",28, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variables_const ::= ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
VariableDeclaracion var=new VariableDeclaracion(id,nodo,idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables_const",28, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_var ::= INITJAVA vars_java 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
if(!this.parser.hasGlobal){
Controlador_.verifyLibrary(x,xleft,xright,this.parser.librerias,this.parser.errores);
}
RESULT=new declaracion_c(x,xleft,xright,list);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declaracion_var",26, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vars_java ::= vars_java COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright,true));
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vars_java ::= vars_java COMA ID AP argumentos CP 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		ArrayList<VariableDeclaracion> x = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
try{
x.add(new VariableDeclaracion(id,idleft,idright,list));
RESULT=x;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vars_java ::= vars_java COMA ID AP CP 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright,true));
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vars_java ::= ID AP CP 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,true));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vars_java ::= ID AP argumentos CP 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,list));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vars_java ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,true));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("vars_java",6, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variables ::= variables COMA ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variables ::= variables COMA ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variables ::= ID 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}


              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variables ::= ID EQUALS e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variables ::= ID dimensiones 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variables ::= variables COMA ID dimensiones 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		ArrayList<VariableDeclaracion> list = (ArrayList<VariableDeclaracion>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
list.add(new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright));
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variables ::= error e 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error al declarar una variable, verifique que la asignacion sea correcta");

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variables ::= error COMA 
            {
              ArrayList<VariableDeclaracion> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("variables",27, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_var ::= IF AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("if_var",12, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_var ::= IF AP boolean CP AC datos2 CC ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-8)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new instr_if(bool,am,null,new instr_if(v));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("if_var",12, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-10)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_var ::= IF AP boolean CP AC datos2 CC else_var 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new instr_if(bool,am,list,null);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("if_var",12, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_var ::= IF AP boolean CP AC datos2 CC else_var ELSE AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-9)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-9)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-9)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		ArrayList<instr_if> list = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ v = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new instr_if(bool,am,list,new instr_if(v));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("if_var",12, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-11)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else_var ::= else_var ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int instr_ifsleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).left;
		int instr_ifsright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).right;
		ArrayList<instr_if> instr_ifs = (ArrayList<instr_if>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-8)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
 try{
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

 
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("else_var",11, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // else_var ::= ELSE IF AP boolean CP AC datos2 CC 
            {
              ArrayList<instr_if> RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
  try{
  ArrayList<instr_if> instr_ifs=new ArrayList();;
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

  
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("else_var",11, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_var ::= WHILE AP boolean CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new instr_while(am,bool);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("while_var",13, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dowhile_var ::= DO AC datos2 CC WHILE AP boolean CP 
            {
              Instruccion RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoBoolean bool = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
 try{
  RESULT=new instr_dowhile(am,bool);
 }catch(Exception e){}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("dowhile_var",14, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_var ::= FOR AP declarateVar PUNTOCOMA ID OP e PUNTOCOMA ID typeOp EQUALS e PUNTOCOMA CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-14)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-14)).right;
		Object[] obj = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-14)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-12)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-12)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-12)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-11)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-11)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-11)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-10)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-10)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-8)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-8)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new instr_for_java(obj,t1,t2,x1left,x1right,x2left,x2right,op1,op,am);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("for_var",15, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-16)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_var ::= FOR AP declarateVar PUNTOCOMA ID OP e PUNTOCOMA ID EQUALS e PUNTOCOMA CP AC datos2 CC 
            {
              Instruccion RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-13)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-13)).right;
		Object[] obj = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-13)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-11)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-11)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-11)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-10)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-10)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-10)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-9)).right;
		NodoAritmetica t1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-9)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-7)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)).right;
		NodoAritmetica t2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-5)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new instr_for_java(obj,t1,t2,x1left,x1right,x2left,x2right,op1,"=",am);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("for_var",15, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-15)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // typeOp ::= SUM 
            {
              String RESULT =null;
		RESULT="+";
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("typeOp",16, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // typeOp ::= RES 
            {
              String RESULT =null;
		RESULT="-";
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("typeOp",16, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declarateVar ::= ID 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
RESULT=obj;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declarateVar",17, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarateVar ::= ID EQUALS e 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[4]=nodo;
RESULT=obj;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declarateVar",17, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarateVar ::= tipos ID EQUALS e 
            {
              Object[] RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[3]=t1;
obj[4]=nodo;
RESULT=obj;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("declarateVar",17, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch_var ::= SWITCH AP ID CP AC cases CC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new switch_var(id,list,idleft,idright);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("switch_var",40, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-6)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cases ::= cases case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<Sub_case> list = (ArrayList<Sub_case>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
list.add(caso);
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("cases",37, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cases ::= case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Sub_case caso = (Sub_case)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
ArrayList<Sub_case> list=new ArrayList();
list.add(caso);
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("cases",37, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cases ::= error case_ 
            {
              ArrayList<Sub_case> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error en un caso de la sentencia switch");

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("cases",37, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // case_ ::= CASE e_ BOTHPOINT datos2 break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
Variable var=val.variable;
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(var,valleft,valright,am,1,false,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(var,valleft,valright,am,2,false,null);
 }
}else{
     RESULT=new Sub_case(var,valleft,valright,am,-1,false,null);
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("case_",39, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case_ ::= DEFAULT BOTHPOINT datos2 break_case 
            {
              Sub_case RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ambito_ am = (ambito_)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Object[] br = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
 if(br!=null){
  if(br[1]!=null){
      RESULT=new Sub_case(null,valleft,valright,am,1,true,(NodoAritmetica)br[1]);
  }else{
      RESULT=new Sub_case(null,valleft,valright,am,2,true,null);
  }
 }else{
      RESULT=new Sub_case(null,valleft,valright,am,-1,true,null);
 }
 
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("case_",39, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // break_case ::= BREAK PUNTOCOMA 
            {
              Object[] RESULT =null;
		
Object b[]=new Object[2];
b[0]=2;
RESULT=b;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("break_case",38, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // break_case ::= 
            {
              Object[] RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("break_case",38, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datos_ ::= datos_ COMA e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
list.add(new argumento_dato(nodo));
RESULT=list;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("datos_",43, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datos_ ::= e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica nodo = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("datos_",43, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // datos_ ::= error e 
            {
              ArrayList<argumento_dato> RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object x1 = (Object)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
this.parser.errores.update(x1left,x1right,"Error en los parametros de printf");

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("datos_",43, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // print_var ::= PRINT AP CADENA CP 
            {
              Instruccion RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new print_c(str);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("print_var",42, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // print_var ::= PRINT AP CP 
            {
              Instruccion RESULT =null;
		RESULT=new print_c();
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("print_var",42, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // print_var ::= PRINT AP MASCARA COMA datos_ CP 
            {
              Instruccion RESULT =null;
		int mscleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int mscright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String msc = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int datasleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int datasright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> datas = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=new print_c(msc,datas);
RESULT.FILA=mscleft;
RESULT.COLUMNA=mscright;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("print_var",42, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-5)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // callfun ::= CALLJAVA AP argumentos CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=new call_c(2,id,idleft,idright,list);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // callfun ::= CALLPY AP argumentos CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
if(!this.parser.PYGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de python no ha sido importada");
}
RESULT=new call_c(1,id,idleft,idright,list);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // callfun ::= CALLVB AP argumentos CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		ArrayList<argumento_dato> list = (ArrayList<argumento_dato>)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
if(!this.parser.VBGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de visual basic no ha sido importada");
}
RESULT=new call_c(0,id,idleft,idright,list);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // callfun ::= CALLJAVA AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		

RESULT=new call_c(2,id,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // callfun ::= CALLPY AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		
if(!this.parser.PYGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de python no ha sido importada");
}
RESULT=new call_c(1,id,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // callfun ::= CALLVB AP CP 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		
if(!this.parser.VBGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de visual basic no ha sido importada");
}
RESULT=new call_c(0,id,idleft,idright);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("callfun",10, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // e ::= e SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // e ::= e RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // e ::= t 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // t ::= t MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // t ::= t DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // t ::= f 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // t ::= t MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t",21, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // f ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // f ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // f ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // f ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // f ::= AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=val1;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // f ::= RES AP e CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // f ::= ID dimensiones 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVECTOR(valleft,valright,val,nodos));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // f ::= callfun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // e_ ::= e_ SUM t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("+",val1,val2);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e_",23, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // e_ ::= e_ RES t_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("-",val1,val2);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e_",23, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // e_ ::= t_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("e_",23, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // t_ ::= t_ MUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("*",val1,val2);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t_",25, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // t_ ::= t_ DIV f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("/",val1,val2);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t_",25, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // t_ ::= f_ 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t_",25, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // t_ ::= t_ MODUL f_ 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=this.parser.controlador.Operar("%",val1,val2);

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("t_",25, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // f_ ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f_",24, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // f_ ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f_",24, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // f_ ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f_",24, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // f_ ::= AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		RESULT=val1;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f_",24, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // f_ ::= RES AP e_ CP 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		
RESULT=val1;
RESULT.cambiarSigno=1;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("f_",24, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // boolean ::= boolean AND b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"and",v2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // boolean ::= b 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=v1;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // b ::= b OR c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoBoolean v2 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoBoolean(v1,"or",v2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("b",34, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // b ::= c 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=v1;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("b",34, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // c ::= ee1 y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		NodoAritmetica v1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // c ::= AP boolean CP z y 
            {
              NodoBoolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-3)).right;
		NodoBoolean v1 = (NodoBoolean)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		Object[] v2 = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Object[] v3 = (Object[])((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
               this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
               this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
 }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
                  this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }
}
RESULT=v1;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-4)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // z ::= 
            {
              Object[] RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // z ::= SUM e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // z ::= RES e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // z ::= MUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // z ::= DIV e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // z ::= MODUL e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("z",32, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // y ::= 
            {
              Object[] RESULT =null;

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // y ::= OP e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // y ::= EQUALS e 
            {
              Object[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica v2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ee1 ::= ee1 SUM t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("+",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ee1",29, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ee1 ::= ee1 RES t 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("-",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ee1",29, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ee1 ::= tt1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ee1",29, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tt1 ::= tt1 MUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("*",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tt1",30, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tt1 ::= tt1 DIV f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("/",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tt1",30, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tt1 ::= ff1 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=val;
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tt1",30, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tt1 ::= tt1 MODUL f 
            {
              NodoAritmetica RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)).right;
		NodoAritmetica val1 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		NodoAritmetica val2 = (NodoAritmetica)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=this.parser.controlador.Operar("%",val1,val2);
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("tt1",30, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-2)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ff1 ::= ID 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ff1 ::= REAL 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ff1 ::= CARACTER 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ff1 ::= ENTERO 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ff1 ::= ID dimensiones 
            {
              NodoAritmetica RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ccup$stack.elementAt(CUP$ccup$top-1)).value;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		ArrayList<NodoAritmetica> nodos = (ArrayList<NodoAritmetica>)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableVECTOR(valleft,valright,val,nodos));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.elementAt(CUP$ccup$top-1)), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ff1 ::= callfun 
            {
              NodoAritmetica RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$ccup$stack.peek()).value;
		
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));

              CUP$ccup$result = parser.getSymbolFactory().newSymbol("ff1",31, ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ccup$stack.peek()), RESULT);
            }
          return CUP$ccup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ccup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ccup$do_action(
    int                        CUP$ccup$act_num,
    java_cup.runtime.lr_parser CUP$ccup$parser,
    java.util.Stack            CUP$ccup$stack,
    int                        CUP$ccup$top)
    throws java.lang.Exception
    {
              return CUP$ccup$do_action_part00000000(
                               CUP$ccup$act_num,
                               CUP$ccup$parser,
                               CUP$ccup$stack,
                               CUP$ccup$top);
    }
}

}
