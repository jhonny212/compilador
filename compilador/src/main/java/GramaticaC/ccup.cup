package GramaticaC;
import Errores.ErrorClass;
import controlador.Controlador_;
import java_cup.runtime.Symbol;
import Variable.*;
import Instrucciones.*;

import Arbol.*;
import Arbol.AritAST.*;
import Arbol.BoolAST.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

import java.util.ArrayList;

parser code {:
    Controlador_ controlador=new Controlador_();
    public ErrorClass errores=new ErrorClass();
    boolean hasGlobal=false,VBGLOBAL=false,PYGLOBAL=false;
    ArrayList<String> librerias=new ArrayList();
    ArrayList<Instruccion> variablesGlobales=new ArrayList();
    @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("SYNTAX_La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
     this.errores.AddError(1,s.left,s.right,s.value.toString());
    }
    public void syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
        this.errores.AddError(1,s.left,s.right,s.value.toString());

    }
:}
terminal String PUBLIC,CLASS,AP,CP,AC,CC,VOID,Y,SCANF,CLEAR,GETCH;
terminal String INT,DOUBLE,CHAR;
terminal String ID,CADENA,PUNTOCOMA,EQUALS,COMA,AND,IF,OR;
terminal String WHILE,ELSE,FOR,DO,RETURN;
terminal String INPUTI,INPUTC,INPUTD,PRINT,CONST,ACOR,CCOR,MAIN;
terminal Integer ENTERO;
terminal Double REAL;
terminal char CARACTER;
terminal String SUM,RES,MUL,DIV,MODUL,OP,MASCARA,NOT;
terminal DEFAULT,SWITCH,CASE,BREAK,BOTHPOINT,INCLUDE;
terminal String INITJAVA,CALLJAVA,CALLPY,CALLVB;
non-terminal inicio;

//------------------>argumentos
non-terminal ArrayList<argumento_dato > argumentos;

//-------------------->tipos
non-terminal Integer tipos;

//--------------------->metodos
non-terminal library,global;
non-terminal global_var;
non-terminal ArrayList<VariableDeclaracion> vars_java;
//-------------------->instrucciones

non-terminal ambito_ instrucciones;
non-terminal Instruccion instruccion;
non-terminal Instruccion asignacion_var;
non-terminal Instruccion callfun;
non-terminal ArrayList<instr_if> else_var;
non-terminal Instruccion if_var;
non-terminal Instruccion while_var;
non-terminal Instruccion dowhile_var;
non-terminal Instruccion for_var;
non-terminal String typeOp;
non-terminal Object[] declarateVar;
non-terminal ambito_ instrucciones_fun;
non-terminal ambito_ datos2;
//--------------------->aritmetica
non-terminal NodoAritmetica e,t,f;
non-terminal NodoAritmetica e_,f_,t_;
//--------------------------->
non-terminal Instruccion declaracion_var;
non-terminal ArrayList<VariableDeclaracion> variables,variables_const;
//----------------------->condicional
non-terminal NodoAritmetica ee1,tt1,ff1;
non-terminal Object[] z,y;
non-terminal NodoBoolean b,c;
non-terminal NodoBoolean boolean;
//----------------------------
non-terminal ArrayList<Sub_case> cases;
non-terminal Object[] break_case;
non-terminal Sub_case case_;
non-terminal Instruccion switch_var;
//-----------------------pantalla
non-terminal Instruccion input_var;
non-terminal Instruccion print_var;
non-terminal ArrayList<argumento_dato> datos_;
non-terminal ArrayList<NodoAritmetica> dimensiones;
//------------------------clear
non-terminal Instruccion clear_screen;

non-terminal librerias;
non-terminal ambito_ codigoc;
start with inicio;


inicio::=library global codigoc;

library::=
|librerias;

librerias::= librerias INCLUDE CADENA:x
{:
String tmp=x.replaceAll(" ","");
x=tmp.replaceAll("\n","");
tmp=x.replaceAll("\t","");
if(tmp.equals("JAVA.*")){
 this.parser.hasGlobal=true;
}
if(!this.parser.hasGlobal){
if(tmp.startsWith("JAVA."))
{
this.parser.librerias.add(tmp);
}
}

if(tmp.equals("PY")){
this.parser.PYGLOBAL=true;
}
else if(tmp.equals("VB")){
this.parser.VBGLOBAL=true;
}
if(this.parser.hasGlobal){
this.parser.librerias=null;
}
:}
|INCLUDE CADENA:x
{:
String tmp=x.replaceAll(" ","");
x=tmp.replaceAll("\n","");
tmp=x.replaceAll("\t","");
if(tmp.equals("JAVA.*")){
 this.parser.hasGlobal=true;
}
if(!this.parser.hasGlobal){
if(tmp.startsWith("JAVA."))
{
this.parser.librerias.add(tmp);
}
}

if(tmp.equals("PY")){
this.parser.PYGLOBAL=true;
}
else if(tmp.equals("VB")){
this.parser.VBGLOBAL=true;
}
if(this.parser.hasGlobal){
this.parser.librerias=null;
}
:};

global::=
|global_var;

global_var::= global_var declaracion_var:x PUNTOCOMA
{:
this.parser.variablesGlobales.add(x);
:}
|declaracion_var:x PUNTOCOMA
{:
this.parser.variablesGlobales.add(x);
:}
|error PUNTOCOMA;

codigoc::= VOID MAIN AP CP
 AC
 datos2:x
 CC
 {:
 RESULT=x;
 x.errores=this.parser.errores;
        ArrayList<VariableDeclaracion> variableDeclaracions=new ArrayList();
        if(this.parser.variablesGlobales!=null){
          if(!this.parser.variablesGlobales.isEmpty()){
            for (int i = 0; i < this.parser.variablesGlobales.size(); i++) {
              Instruccion xx=this.parser.variablesGlobales.get(i);
              xx.errores=this.parser.errores;
              if(!variableDeclaracions.isEmpty()){
                xx.initDatas(variableDeclaracions);
              }
              xx.validate(false);
              variableDeclaracions=xx.variables;
            }
          }
        }
        Controlador_.verifyInstr(variableDeclaracions,this.parser.errores);
        x.validate(false);
 :};





datos2::=
|instrucciones_fun:am {:RESULT=am;:} ;



instrucciones::= instrucciones instruccion
|instruccion ;

instrucciones_fun::=  instruccion:ins instrucciones_fun:val
{:
try{
val.addIndex(ins);
RESULT=val;
}catch(Exception ex){
}
:}
|instruccion:ins
{:
try{
ambito_ am=new ambito_();
am.add(ins);
RESULT=am;
}catch(Exception ex){
}
:}
;

instruccion::= asignacion_var:x {:RESULT=x;:} PUNTOCOMA
|declaracion_var:x {:RESULT=x;:} PUNTOCOMA
|if_var:x {:RESULT=x;:}
|while_var:x {:RESULT=x;:}
|dowhile_var:x PUNTOCOMA {:RESULT=x;:}
|for_var:x {:RESULT=x;:}
|switch_var:x {:RESULT=x;:}

|print_var:x  PUNTOCOMA {:RESULT=x;:}
|error PUNTOCOMA {:System.out.println(";");:}
|error CP {:System.out.println("cp");:}
|callfun:x PUNTOCOMA {:RESULT=x;:}
|clear_screen:x PUNTOCOMA {:RESULT=x;:}
;

clear_screen::= CLEAR AP CP 
{:
RESULT=new inst_clear();
:};

dimensiones::= dimensiones:list ACOR e:nodo CCOR
{:
list.add(nodo);
RESULT=list;
:}
|ACOR e:nodo CCOR
{:
RESULT=new ArrayList();
RESULT.add(nodo);
:};

tipos::= INT {:RESULT=1;:}
|DOUBLE {:RESULT=0;:}
|CHAR {:RESULT=2;:};

argumentos::= argumentos:list COMA e:nodo
{:
list.add(new argumento_dato(nodo));
RESULT=list;
:}
|e:nodo
{:
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));
:}
|CADENA:str
{:
RESULT=new ArrayList();
RESULT.add(new argumento_dato(str));
:}
|argumentos:list COMA CADENA:str
{:
list.add(new argumento_dato(str));
RESULT=list;
:};

asignacion_var::= ID:id EQUALS e:nodo
{:
RESULT=new instr_asignacion(id,nodo,idleft,idright);
:}
|error:x1 e
{:
this.parser.errores.update(x1left,x1right,"Error al asignar un valor a la una variable");
:}
|ID:id dimensiones:nodos EQUALS e:nodo
{:
RESULT=new instr_asignacion(id,nodos,nodo,idleft,idright);
:}
|SCANF AP MASCARA:t COMA Y ID:id CP
{:
RESULT=new asig_c (id,t,idleft,idright);
:}
|GETCH AP CP
{:
RESULT=new instr_getch();
:}
|ID:id EQUALS GETCH AP CP
{:
RESULT=new instr_getch(id,idleft,idright);
:};


declaracion_var::= tipos:t1 variables:list
{:
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}
:};

declaracion_var::=CONST tipos:t1 variables_const:list
{:
try{
this.parser.controlador.verifyID(list,this.parser.errores,t1);
RESULT=new instr_declaracion(list,t1);
}catch(Exception ex){}
:};

variables_const::= variables_const:list COMA ID:id dimensiones:nodos
{:
VariableDeclaracion var=new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;
:}
|variables_const:list COMA ID:id EQUALS e:nodo
{:
try{
VariableDeclaracion var=new VariableDeclaracion(id,nodo,idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;
}catch(Exception ex){}
:}
|ID:id dimensiones:nodos
{:
RESULT=new ArrayList();
VariableDeclaracion var=new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright);
var.isConst=true;
RESULT.add(var);
:}
|ID:id EQUALS e:nodo
{:
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
VariableDeclaracion var=new VariableDeclaracion(id,nodo,idleft,idright);
var.isConst=true;
list.add(var);
RESULT=list;
}catch(Exception ex){}
:};

declaracion_var::=INITJAVA:x  vars_java:list
{:
if(!this.parser.hasGlobal){
Controlador_.verifyLibrary(x,xleft,xright,this.parser.librerias,this.parser.errores);
}
RESULT=new declaracion_c(x,xleft,xright,list);
:};

vars_java::= vars_java:list COMA ID:id
{:
try{
list.add(new VariableDeclaracion(id,idleft,idright,true));
RESULT=list;
}catch(Exception ex){}
:}
|vars_java:x COMA ID:id AP argumentos:list CP
{:
try{
x.add(new VariableDeclaracion(id,idleft,idright,list));
RESULT=x;
}catch(Exception ex){}
:}
|vars_java:list COMA ID:id AP CP
{:
try{
list.add(new VariableDeclaracion(id,idleft,idright,true));
RESULT=list;
}catch(Exception ex){}
:}
|ID:id AP CP
{:
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,true));
:}
|ID:id AP argumentos:list CP
{:
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,list));
:}
|ID:id
{:
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,idleft,idright,true));
:};




variables::= variables:list COMA ID:id
{:
try{
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}
:}
|variables:list COMA ID:id EQUALS e:nodo
{:
try{
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}
:}
|ID:id
{:
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,idleft,idright));
RESULT=list;
}catch(Exception ex){}

:}
|ID:id EQUALS e:nodo
{:
try{
ArrayList<VariableDeclaracion> list=new ArrayList();
list.add(new VariableDeclaracion(id,nodo,idleft,idright));
RESULT=list;
}catch(Exception ex){}
:}
|ID:id dimensiones:nodos
{:
RESULT=new ArrayList();
RESULT.add(new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright));
:}
|variables:list COMA ID:id dimensiones:nodos
{:
list.add(new VariableDeclaracion(id,new VariableVECTOR(nodos),idleft,idright));
RESULT=list;
:}
|error:x1 e
{:
this.parser.errores.update(x1left,x1right,"Error al declarar una variable, verifique que la asignacion sea correcta");
:}
|error:x1 COMA;

if_var::= IF AP boolean:bool CP
AC
datos2:am
CC
{:
RESULT=new instr_if(am,bool);
:};

if_var::= IF AP boolean:bool CP
AC
datos2:am
CC
ELSE AC datos2:v CC
{:RESULT=new instr_if(bool,am,null,new instr_if(v));:};


if_var::= IF AP boolean:bool CP
AC
datos2:am
CC
else_var:list
{:RESULT=new instr_if(bool,am,list,null);:};

if_var::= IF AP boolean:bool CP
AC
datos2:am
CC
else_var:list
ELSE AC datos2:v CC
{:RESULT=new instr_if(bool,am,list,new instr_if(v));:};





else_var::= else_var:instr_ifs ELSE IF AP boolean:bool CP
 AC datos2:am CC
 {:
 try{
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

 :}
|ELSE IF AP boolean:bool CP
 AC datos2:am CC
  {:
  try{
  ArrayList<instr_if> instr_ifs=new ArrayList();;
  instr_ifs.add(new instr_if(am,bool));
  RESULT=instr_ifs;
  }catch(Exception ex){}

  :};

while_var::= WHILE AP boolean:bool CP
AC
datos2:am
CC
{:RESULT=new instr_while(am,bool);:}
;

dowhile_var::= DO AC
datos2:am
CC
WHILE AP boolean:bool CP
{:
 try{
  RESULT=new instr_dowhile(am,bool);
 }catch(Exception e){}
:};

for_var::= FOR AP declarateVar:obj PUNTOCOMA ID:x1 OP:op1 e:t1 PUNTOCOMA ID:x2 typeOp:op EQUALS e:t2  CP
AC
datos2:am
CC
{:
RESULT=new instr_for_java(obj,t1,t2,x1left,x1right,x2left,x2right,op1,op,am);
:}
;


for_var::= FOR AP declarateVar:obj PUNTOCOMA ID:x1 OP:op1 e:t1 PUNTOCOMA ID:x2 EQUALS e:t2  CP
AC
datos2:am
CC
{:
RESULT=new instr_for_java(obj,t1,t2,x1left,x1right,x2left,x2right,op1,"=",am);
:}
;

typeOp::= SUM {:RESULT="+";:}
|RES {:RESULT="-";:};

declarateVar::= ID:id
{:
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
RESULT=obj;
:}
|ID:id EQUALS e:nodo
{:
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[4]=nodo;
RESULT=obj;
:}
|tipos:t1 ID:id EQUALS e:nodo
{:
Object[]obj=new Object[5];
obj[0]=id;
obj[1]=idleft;
obj[2]=idright;
obj[3]=t1;
obj[4]=nodo;
RESULT=obj;
:};



switch_var::= SWITCH AP ID:id CP AC
cases:list
CC
{:RESULT=new switch_var(id,list,idleft,idright);:};


cases::= cases:list case_:caso
{:
list.add(caso);
RESULT=list;
:};
cases::= case_:caso
{:
ArrayList<Sub_case> list=new ArrayList();
list.add(caso);
RESULT=list;
:}
|error:x1 case_
{:
this.parser.errores.update(x1left,x1right,"Error en un caso de la sentencia switch");
:};

case_::= CASE e_:val BOTHPOINT
 datos2:am
 break_case:br
{:
Variable var=val.variable;
if(br!=null){
 if(br[1]!=null){
     RESULT=new Sub_case(var,valleft,valright,am,1,false,(NodoAritmetica)br[1]);
 }else{
     RESULT=new Sub_case(var,valleft,valright,am,2,false,null);
 }
}else{
     RESULT=new Sub_case(var,valleft,valright,am,-1,false,null);
}
:};

case_::= DEFAULT:val BOTHPOINT
 datos2:am
 break_case:br
 {:
 if(br!=null){
  if(br[1]!=null){
      RESULT=new Sub_case(null,valleft,valright,am,1,true,(NodoAritmetica)br[1]);
  }else{
      RESULT=new Sub_case(null,valleft,valright,am,2,true,null);
  }
 }else{
      RESULT=new Sub_case(null,valleft,valright,am,-1,true,null);
 }
 :};

break_case::= BREAK PUNTOCOMA
{:
Object b[]=new Object[2];
b[0]=2;
RESULT=b;
:}
|;


datos_::= datos_:list COMA e:nodo
{:
list.add(new argumento_dato(nodo));
RESULT=list;
:}
|e:nodo
{:
RESULT=new ArrayList();
RESULT.add(new argumento_dato(nodo));
:}
|error:x1 e
{:
this.parser.errores.update(x1left,x1right,"Error en los parametros de printf");
:};


print_var::= PRINT AP CADENA:str CP
{:RESULT=new print_c(str);:};
print_var::= PRINT AP CP
{:RESULT=new print_c();:};
print_var::= PRINT AP MASCARA:msc COMA datos_:datas CP
{:RESULT=new print_c(msc,datas);
RESULT.FILA=mscleft;
RESULT.COLUMNA=mscright;
:};


callfun::=CALLJAVA:id AP argumentos:list CP
{:
RESULT=new call_c(2,id,idleft,idright,list);
:};
callfun::=CALLPY:id AP argumentos:list CP
{:
if(!this.parser.PYGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de python no ha sido importada");
}
RESULT=new call_c(1,id,idleft,idright,list);
:};
callfun::=CALLVB:id AP argumentos:list CP
{:
if(!this.parser.VBGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de visual basic no ha sido importada");
}
RESULT=new call_c(0,id,idleft,idright,list);
:};
callfun::=CALLJAVA:id AP CP
{:

RESULT=new call_c(2,id,idleft,idright);
:};
callfun::=CALLPY:id AP CP
{:
if(!this.parser.PYGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de python no ha sido importada");
}
RESULT=new call_c(1,id,idleft,idright);
:};
callfun::=CALLVB:id AP CP
{:
if(!this.parser.VBGLOBAL)
{
  this.parser.errores.AddError(2,idleft,idright,id,"La libreria de visual basic no ha sido importada");
}
RESULT=new call_c(0,id,idleft,idright);
:};






e::= e:val1 SUM t:val2
{:RESULT=this.parser.controlador.Operar("+",val1,val2);:};
e::= e:val1 RES t:val2
{:RESULT=this.parser.controlador.Operar("-",val1,val2);:};

e::= t:val {:RESULT=val;:};
t::= t:val1 MUL f:val2
{:RESULT=this.parser.controlador.Operar("*",val1,val2);:};
t::= t:val1 DIV f:val2{:RESULT=this.parser.controlador.Operar("/",val1,val2);:};
t::= f:val {:RESULT=val;:};
t::= t:val1 MODUL f:val2
{:RESULT=this.parser.controlador.Operar("%",val1,val2);:};
f::= ID:val
{:RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));:};
f::= REAL:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));:};
f::= CARACTER:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));:};
f::= ENTERO:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));:};
f::= AP e:val1 CP {:RESULT=val1;:};
f::= RES AP e:val1 CP
{:
RESULT=val1;
RESULT.cambiarSigno=1;
:};
f::= ID:val dimensiones:nodos
{:
RESULT=new NodoAritmetica(new VariableVECTOR(valleft,valright,val,nodos));
:};

f::= callfun:fun
{:
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));
:};
f::= RES ENTERO:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));:};
f::= RES REAL:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));:};



e_::= e_:val1 SUM t_:val2
{:
RESULT=this.parser.controlador.Operar("+",val1,val2);
:};
e_::= e_:val1 RES t_:val2
{:
RESULT=this.parser.controlador.Operar("-",val1,val2);
:};


e_::= t_:val {:RESULT=val;:};
t_::= t_:val1 MUL f_:val2
{:
RESULT=this.parser.controlador.Operar("*",val1,val2);
:};
t_::= t_:val1 DIV f_:val2
{:
RESULT=this.parser.controlador.Operar("/",val1,val2);
:};
t_::= f_:val {:RESULT=val;:};
t_::= t_:val1 MODUL f_:val2
{:
RESULT=this.parser.controlador.Operar("%",val1,val2);
:};

f_::= REAL:val
{:
RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));
:};
f_::= CARACTER:val
{:
RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));
:};
f_::= ENTERO:val
{:
RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));
:};
f_::= AP e_:val1 CP {:RESULT=val1;:};
f_::= RES AP e_:val1 CP {:
RESULT=val1;
RESULT.cambiarSigno=1;
:};
f_::= RES ENTERO:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));:};
f_::= RES REAL:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));:};





boolean::= boolean:v1 AND b:v2 {:RESULT=new NodoBoolean(v1,"and",v2);:};
boolean::= b:v1 {:RESULT=v1;:};
b::= b:v1 OR c:v2 {:RESULT=new NodoBoolean(v1,"or",v2);:};
b::= c:v1 {:RESULT=v1;:};
c::= ee1:v1 y:v2
{:
if(v2!=null){
RESULT=new NodoBoolean(v1,(Nodo)v2[1],(String)v2[0]);
}else{
RESULT=new NodoBoolean(v1);
}
:};

c::= AP boolean:v1 CP z:v2 y:v3
{:
if(v2!=null && v3!=null){
    if(!v1.isOp && v1.canAdd){
        NodoAritmetica n1=(NodoAritmetica)v2[1];
        Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
        v1.canAdd=false;
        v1.izq=t;
        v1.der=(Nodo)v3[1];
        v1.isOp=false;
        v1.operador=(String)v3[0];
    }else{
               this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");
               this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
 }

}else if(v2!=null && v3==null){
    if(!v1.isOp && v1.canAdd){
      NodoAritmetica n1=(NodoAritmetica)v2[1];
      Nodo t=n1.addNodo((NodoAritmetica)v1.izq,n1,(String)v2[0],(Integer)v2[2],(Integer)v2[3]);
      v1.izq=t;
    }else{
                  this.parser.errores.AddError(1,(int)v2[2],(int)v2[3],(String)v2[0],"No se puede operar, ya cumple como una operacion booleana");

    }

}else if(v2==null && v3!=null){
    if(!v1.isOp && v1.canAdd){
            v1.der=(Nodo)v3[1];
            v1.isOp=false;
            v1.operador=(String)v3[0];
            v1.canAdd=false;
    }else{
    this.parser.errores.AddError(1,(int)v3[2],(int)v3[3],(String)v3[0],"No se puede operar, ya cumple como una operacion booleana");
    }
}
RESULT=v1;
:};

c::= NOT AP boolean:v1 CP
{:
RESULT=v1;
RESULT.canAdd=false;
RESULT.cambiarSigno=1;
:};

z::=
|SUM:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:}
|RES:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:}
|MUL:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:}
|DIV:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:}
|MODUL:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:};

y::=
|OP:v1 e:v2 {:RESULT=this.parser.controlador.getObj(v1,v2,v1left,v1right);:}
|EQUALS:v1 e:v2 {:RESULT=this.parser.controlador.getObj("=",v2,v1left,v1right);:};




ee1::= ee1:val1 SUM t:val2
{:RESULT=this.parser.controlador.Operar("+",val1,val2);:};
ee1::= ee1:val1 RES t:val2
{:RESULT=this.parser.controlador.Operar("-",val1,val2);:};


ee1::= tt1:val {:RESULT=val;:};
tt1::= tt1:val1 MUL f:val2
{:RESULT=this.parser.controlador.Operar("*",val1,val2);:};
tt1::= tt1:val1 DIV f:val2{:RESULT=this.parser.controlador.Operar("/",val1,val2);:};
tt1::= ff1:val {:RESULT=val;:};
tt1::= tt1:val1 MODUL f:val2
{:RESULT=this.parser.controlador.Operar("%",val1,val2);:};
ff1::= ID:val
{:RESULT=new NodoAritmetica(new VariableID(val,valleft,valright));:};
ff1::= REAL:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,0,"r"));:};
ff1::= CARACTER:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,1,"c"));:};
ff1::= ENTERO:val
{:RESULT=new NodoAritmetica(new VariableVAL(val,1,"e"));:};

ff1::= ID:val dimensiones:nodos
{:
RESULT=new NodoAritmetica(new VariableVECTOR(valleft,valright,val,nodos));
:};
ff1::= callfun:fun
{:
RESULT=new NodoAritmetica(new VariableMETODO((call_c) fun));
:};
ff1::= RES ENTERO:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,1,"e"));:};
ff1::= RES REAL:val
{:RESULT=new NodoAritmetica(new VariableVAL(val*-1,0,"r"));:};
